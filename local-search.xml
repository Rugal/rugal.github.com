<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Thought after kill-that-shi-jia-zhuang-ian</title>
    <link href="/2023/2023-11-01-thought-for-kill-that-shi-jia-zhuang-ian/"/>
    <url>/2023/2023-11-01-thought-for-kill-that-shi-jia-zhuang-ian/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>今天在知乎上看了一篇关于《杀死那个石家庄人》歌词的解析。从这篇文章的解析中沃可以看到，主人公是一个非常麻木的人，可能很少有主动去追求自己喜欢的东西，或者也有可能是社会的压力束缚导致他没有能力去追梦。<br>主人公在药厂工作，每天浑浑噩噩的上班下班。和一个自己不太喜欢的女人结婚，也生了孩子。不知道为什么主人公为什么不去抗拒，仍然要跟这个不爱的女人结婚，可能是生物的本能需求？<br>一切的悲剧起源于主人公工作的药厂，倒闭了，主角没有自己的专业技能，离开原来的烧锅炉工作以后不知道自己能够干什么，比迷茫更迷茫，生活更加浑浑噩噩。努力过也尝试过很多其他工作，但大多没有什么收货，导致自己的生活一地鸡毛。  </p><p>主人公的遭遇是不是悲剧，他的日子过的好吗？当然过的很辛苦，很多人的父母就是这样子的。那个年代，读书是一件比较奢侈的事情，能够上中专、大专甚至大学都是极其罕见的机遇。因此大部分人都没有很高的学历，更没有改变自己人生的机会。  </p><p>那么他们应该怎么办呢，只能做一些销售、推销方面的工作，我的父母就是这个样子的，特别是我的父亲。高中毕业没有考上本科，然后一意孤行就要去参军，兵役服完就立刻选择复员。没有任何专业技能和学历，就是一个普普通通的人来到这个市场化的就业环境中。<br>竞争是极其残酷的，大部分情况下只能做销售这样的工作，说得好听一点就做市场营销，但谁都知道那就是个卖货的，无论卖的是什么。因此，业绩压力就会很大，卖出去多少 你才能提取一些分成。不像公务员之流的，什么都不用干、或者只需要做一点点简单的事情就可以拿一个稳定的钱。<br>然而我的父母和上面这首歌的主人公不是太一样，首先是运气可能比主角要好一点，销售绩效要好一些，坚持的时间要长一些，因此有一些回报。因此不至于家里苦到没饭吃的穷困地步。由于在浙江，整体机会，经济发展形势也是要比北方要好，因此总体来说最终并没有混成和主角一样的地步。  </p><p>但我想说的是，一个最关键的问题，就是很多人一直都是抗拒变化，抗拒学习的。一旦在一个稳定的位置上就只会凭借现有的状态基本不做或者只做一点点学习，就像前一段说的公务员一样。没有多少是真正愿意持续学习，持续改良自己的人。<br>没错，人都是懒惰的，都愿意把自己的失败归咎于时代、社会。这很常见，但我觉得我们应该摈弃这种想法，社会不会因为你的这个想法而为了你做改变。如果碰到了这样的事情，一定要想清楚，需要找谁清算的事后可以清算，但一定要立足于当下，立马行动起来。改变自己，努力学习新的知识，适应新的场景。<br>其实学习这个事情应该是贯彻于人的一生的：持续学习、持续改良。而不是仅仅是当遭遇到困难的时候、药厂倒闭的时候才行动就已经太晚了。  </p><p>我的岳父就是一个很正面的例子。他从小就比较认学，后来他当年被中专录取了炼油专业，这在当年已经算是还可以了，但和本科录取毕竟还是有差别的。<br>毕业后也被分配到了一家国企炼油厂。注意这个时候的炼油厂也仅仅是比普通企业好一点点罢了，并没有中石油、中石化的油田公司那么躺的平。很多人在这个时候也一样会就此躺平，但我的岳父不一样，他在工作期间还是持续的学习，不停的寻找机会。后来遇到了一个更好的机遇，就来到了南方，才给自己和家人的未来带来了更多的可能性。</p><p>像我岳父这样天生就愿意持续学习人可能有不少，但如果能够后天养成持续学习这样的好习惯也是能够不断为你的人生带来好的可能性的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">任何时候都不要躺平，一定要持续学习、不断适应，不断改良。<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Concurrency Ability</title>
    <link href="/2023/2023-08-14-concurrency-ability/"/>
    <url>/2023/2023-08-14-concurrency-ability/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="concurrency-ability"><a href="#concurrency-ability" class="headerlink" title="concurrency ability"></a>concurrency ability</h1><h2 id="blockability"><a href="#blockability" class="headerlink" title="blockability"></a>blockability</h2><blockquote><p>Illustrate behavior of <code>single</code> thread.<br>Emphasis on whether this thread is <code>pause</code> on execution or not.  </p></blockquote><p>We consider current function is blocking function if any instruction of this function is blocking.<br>Otherwise we say this function is non-blocking function.  </p><h3 id="blocking"><a href="#blocking" class="headerlink" title="blocking"></a>blocking</h3><p>Current thread is paused on execution, usually due to waiting for resources.  </p><p>For instance:</p><ol><li><code>scanf</code> function in <code>C</code> will wait for user keyboard input.  </li><li><code>read</code> system call to load data from network.  </li><li><code>write</code> system call to flush data to persistence layer.  </li><li>current thread waiting for resource lock to release from another thread.</li></ol><p>All the examples illustrate the fact that, while executing blocking function, current thread must wait for other threads or operating system to finish the underlying task before executing next instruction.  </p><p><code>Blocking</code> has nothing to do with <code>user thread</code>. Just as example <code>1-3</code> above, current thread is waiting for OS to finish its job. But as a matter of fact, OS operation is done by system thread, hence it is still deemed as <code>thread</code>.<br>But <code>blocking</code> can wait on another user thread, as shown for case <code>4</code>.  </p><p>In all, <code>blocking</code> emphasis on pause behavior of <code>single</code> thread, but it must happen because of another thread, regardless of <code>system</code> or <code>user</code> thread.  </p><h3 id="non-blocking"><a href="#non-blocking" class="headerlink" title="non-blocking"></a>non-blocking</h3><p>Current thread does not wait. It keeps executing instruction without pause.  </p><h2 id="synchronization"><a href="#synchronization" class="headerlink" title="synchronization"></a>synchronization</h2><blockquote><p>Illustrate behavior between <code>multiple</code> threads.<br>Emphasis on whether thread should <code>coordinate</code> with other threads or not.  </p></blockquote><p>We consider a function that involves only single thread or does not need to coordinate with other threads at all as non-synchronized.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">nonSynchronized</span><span class="hljs-params">()</span></span>: String &#123;<br>  println(<span class="hljs-string">&quot;first&quot;</span>)<br>  <span class="hljs-keyword">val</span> a = <span class="hljs-string">&quot;Rugal&quot;</span>.also &#123;<br>    Thread.sleep(<span class="hljs-number">3000</span>)<br>    println(<span class="hljs-string">&quot;first end&quot;</span>)<br>  &#125;<br>  println(<span class="hljs-string">&quot;second&quot;</span>)<br>  <span class="hljs-keyword">val</span> b = <span class="hljs-string">&quot;Bernstein&quot;</span>.also &#123;<br>    Thread.sleep(<span class="hljs-number">1000</span>)<br>    println(<span class="hljs-string">&quot;second end&quot;</span>)<br>  &#125;<br>  println(<span class="hljs-string">&quot;result&quot;</span>)<br>  <span class="hljs-keyword">return</span> a + b<br>&#125;<br><span class="hljs-comment">// async start</span><br><span class="hljs-comment">// first</span><br><span class="hljs-comment">// first end</span><br><span class="hljs-comment">// second</span><br><span class="hljs-comment">// second end</span><br><span class="hljs-comment">// result</span><br><span class="hljs-comment">// RugalBernstein     &lt;- this follows code order</span><br></code></pre></td></tr></table></figure><p>One the other hand, a function is synchronized&#x2F;asynchronized if thread have to coordinate with others.<br>In detail:  </p><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><p>A function is synchronized if thread must process communication immediately after sent&#x2F;receipt. Like answering phone call.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">synchronized</span><span class="hljs-params">()</span></span>: String = runBlocking &#123;<br>  println(<span class="hljs-string">&quot;first&quot;</span>)<br>  <span class="hljs-keyword">val</span> a: Deferred&lt;String&gt; = async &#123;<br>    delay(<span class="hljs-number">3000</span>)<br>    println(<span class="hljs-string">&quot;first end&quot;</span>)<br>    <span class="hljs-string">&quot;Rugal&quot;</span><br>  &#125;<br>  a.await()<br>  println(<span class="hljs-string">&quot;second&quot;</span>)<br>  <span class="hljs-keyword">val</span> b: Deferred&lt;String&gt; = async &#123;<br>    delay(<span class="hljs-number">1000</span>)<br>    println(<span class="hljs-string">&quot;second end&quot;</span>)<br>    <span class="hljs-string">&quot;Bernstein&quot;</span><br>  &#125;<br>  b.await()<br>  println(<span class="hljs-string">&quot;result&quot;</span>)<br>  a.getCompleted() + b.getCompleted()<br>&#125;<br><span class="hljs-comment">// async start</span><br><span class="hljs-comment">// first</span><br><span class="hljs-comment">// first end</span><br><span class="hljs-comment">// second</span><br><span class="hljs-comment">// second end</span><br><span class="hljs-comment">// result</span><br><span class="hljs-comment">// RugalBernstein</span><br></code></pre></td></tr></table></figure><h3 id="asynchronized"><a href="#asynchronized" class="headerlink" title="asynchronized"></a>asynchronized</h3><p>A function is asynchronized if thread is able to process communication whenever comfortable. Like email communication.  </p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">asynchronized</span><span class="hljs-params">()</span></span>: String = runBlocking &#123;<br>  println(<span class="hljs-string">&quot;first&quot;</span>)<br>  <span class="hljs-keyword">val</span> a: Deferred&lt;String&gt; = async &#123; <br>    delay(<span class="hljs-number">3000</span>)<br>    println(<span class="hljs-string">&quot;first end&quot;</span>)<br>    <span class="hljs-string">&quot;Rugal&quot;</span><br>  &#125;<br>  println(<span class="hljs-string">&quot;second&quot;</span>)<br>  <span class="hljs-keyword">val</span> b: Deferred&lt;String&gt; = async &#123;<br>    delay(<span class="hljs-number">1000</span>)<br>    println(<span class="hljs-string">&quot;second end&quot;</span>)<br>    <span class="hljs-string">&quot;Bernstein&quot;</span><br>  &#125;<br>  println(<span class="hljs-string">&quot;result&quot;</span>)<br>  a.await() + b.await()<br>&#125;<br><span class="hljs-comment">// async start</span><br><span class="hljs-comment">// first</span><br><span class="hljs-comment">// second</span><br><span class="hljs-comment">// result</span><br><span class="hljs-comment">// second end</span><br><span class="hljs-comment">// first end</span><br><span class="hljs-comment">// RugalBernstein     &lt;- order is different than code order</span><br></code></pre></td></tr></table></figure><h2 id="multiplexing"><a href="#multiplexing" class="headerlink" title="multiplexing"></a>multiplexing</h2><p>This conception is regarding how a single thread should handle request.<br>A function is <code>not</code> multiplexing if the single thread is to solely handle the entire request from inbound to outbound. From connection acceptence to read&#x2F;write and eventually, disconnection etc.,<br>Upon completion, this thread is released or terminated.  It is more like a dedicate maid of a client.  </p><p>Otherwise, if the single thread will handle across multiple request. The thread will provide service separately.<br>For instance it will handle connection establishment of many client, also handle I&#x2F;O of many client as well. It does not dedicate to specific request.<br>This would drastically enhance the performance.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>nio</tag>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kotlin high order function</title>
    <link href="/2023/2023-02-24-kotlin-high-order-function/"/>
    <url>/2023/2023-02-24-kotlin-high-order-function/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Kotlin-high-order-function"><a href="#Kotlin-high-order-function" class="headerlink" title="Kotlin high order function"></a>Kotlin high order function</h1><table><thead><tr><th>name</th><th>reference</th><th>return</th><th>invocation</th><th>is extension</th></tr></thead><tbody><tr><td>with</td><td>this</td><td>lambda</td><td><code>kotlin.with &#123;&#125;</code></td><td>$\times$</td></tr><tr><td>run</td><td>-</td><td>lambda</td><td><code>kotlin.run &#123;&#125;</code></td><td>$\times$</td></tr><tr><td>run</td><td>this</td><td>lambda</td><td><code>input.run &#123;&#125;</code></td><td>$\checkmark$</td></tr><tr><td>let</td><td>it</td><td>lambda</td><td><code>input.let &#123;&#125;</code></td><td>$\checkmark$</td></tr><tr><td>also</td><td>it</td><td>this</td><td><code>input.also &#123;&#125;</code></td><td>$\checkmark$</td></tr><tr><td>apply</td><td>this</td><td>this</td><td><code>input.apply &#123;&#125;</code></td><td>$\checkmark$</td></tr></tbody></table><h2 id="with"><a href="#with" class="headerlink" title="with"></a>with</h2><p>Grouping function calls on an object: <code>with</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T, R&gt;</span> <span class="hljs-title">with</span><span class="hljs-params">(receiver: <span class="hljs-type">T</span>, block: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br>    contract &#123;<br>        callsInPlace(block, InvocationKind.EXACTLY_ONCE)<br>    &#125;<br>    <span class="hljs-keyword">return</span> receiver.block()<br>&#125;<br><br>with(input) &#123;<br>  <span class="hljs-keyword">this</span>...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="run"><a href="#run" class="headerlink" title="run"></a>run</h2><p>Object configuration and computing the result: run<br>Running statements where an expression is required: non-extension run</p><h3 id="extension-version"><a href="#extension-version" class="headerlink" title="extension version"></a>extension version</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T, R&gt;</span> T.<span class="hljs-title">run</span><span class="hljs-params">(block: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br>    contract &#123;<br>        callsInPlace(block, InvocationKind.EXACTLY_ONCE)<br>    &#125;<br>    <span class="hljs-keyword">return</span> block()<br>&#125;<br><br>input.run &#123;<br>  <span class="hljs-keyword">this</span>...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="function-version"><a href="#function-version" class="headerlink" title="function version"></a>function version</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R&gt;</span> <span class="hljs-title">run</span><span class="hljs-params">(block: () -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br>    contract &#123;<br>        callsInPlace(block, InvocationKind.EXACTLY_ONCE)<br>    &#125;<br>    <span class="hljs-keyword">return</span> block()<br>&#125;<br><br>kotlin.run &#123;<br>  <span class="hljs-comment">//</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>Executing a lambda on non-null objects: let<br>Introducing an expression as a variable in local scope: let</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T, R&gt;</span> T.<span class="hljs-title">let</span><span class="hljs-params">(block: (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">R</span>)</span></span>: R &#123;<br>    contract &#123;<br>        callsInPlace(block, InvocationKind.EXACTLY_ONCE)<br>    &#125;<br>    <span class="hljs-keyword">return</span> block(<span class="hljs-keyword">this</span>)<br>&#125;<br><br>input.let &#123;<br>  it...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="also"><a href="#also" class="headerlink" title="also"></a>also</h2><p>Additional effects: also</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> T.<span class="hljs-title">also</span><span class="hljs-params">(block: (<span class="hljs-type">T</span>) -&gt; <span class="hljs-type">Unit</span>)</span></span>: T &#123;<br>    contract &#123;<br>        callsInPlace(block, InvocationKind.EXACTLY_ONCE)<br>    &#125;<br>    block(<span class="hljs-keyword">this</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>&#125;<br><br>input.also &#123;<br>  it...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>Object configuration: apply</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> T.<span class="hljs-title">apply</span><span class="hljs-params">(block: <span class="hljs-type">T</span>.() -&gt; <span class="hljs-type">Unit</span>)</span></span>: T &#123;<br>    contract &#123;<br>        callsInPlace(block, InvocationKind.EXACTLY_ONCE)<br>    &#125;<br>    block()<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span><br>&#125;<br><br>input.apply &#123;<br>  <span class="hljs-keyword">this</span>...<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>kotlin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Monad comprehensive tutorial</title>
    <link href="/2023/2023-02-03-monad-comprehensive-tutorial/"/>
    <url>/2023/2023-02-03-monad-comprehensive-tutorial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><h1 id="what-is-monad"><a href="#what-is-monad" class="headerlink" title="what is monad"></a>what is monad</h1><h2 id="functor"><a href="#functor" class="headerlink" title="functor"></a>functor</h2><p><code>functor</code> can be interpreted as <code>A container that is mappable between categories</code>.<br><code>endofunctor</code> is a functor that mappable inside single category.<br>First of all, by saying container, it would definitely hold something inside, whether it is a single value or a set of value or nothing at all.<br>Another important property is mappable, which means the data inside the container can be transformed into another by a <code>map</code> function.  </p><p>This is how we do the work:  </p><ol><li>grab the data from inside the container</li><li>use a mapping logic to transform all the data</li><li>put the transformed them into a new container</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// we define a simplest class here</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Wrapper</span> &#123;<br>  <span class="hljs-comment">// it does nothing but just hold the value and no else</span><br>  <span class="hljs-title function_">constructor</span> (value) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>  &#125;<br>  <span class="hljs-comment">// it provisions a function named &quot;map&quot;, where the parameter f is a function</span><br>  map (f) &#123;<br>    <span class="hljs-comment">// f could transform the value to another one, before putting into another wrapper</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Wrapper</span>(<span class="hljs-title function_">f</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>))<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>The usage can be as follow:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-title class_">Wrapper</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">const</span> f = (x) -&gt; x + <span class="hljs-number">3</span>;<br><span class="hljs-keyword">const</span> b = a.<span class="hljs-title function_">map</span>(f)<br></code></pre></td></tr></table></figure><p>So we call <code>Wrapper</code> is a functor, we can place data into it and use <code>map</code> function to do data transformation.</p><h2 id="function"><a href="#function" class="headerlink" title="function"></a>function</h2><p>function is basically a map between 2 objects</p><p>Mathematically speaking<br>$$<br>f(x) &#x3D; y<br>$$</p><p>where $f, x, y$ is called <code>symbol</code><br>$f$ is the <code>mapping logic</code> between input and output.<br>$x$ is the input and $y$ is the output, we do not care about the type of these 2 symbols, they can be <code>concrete</code> value and can also be <code>mapping logic(function)</code></p><p>This formation can be written into another one  </p><p>$$<br>f: x \rightarrow y<br>$$</p><p>Because $x, y$ can be <code>function</code> themselves, then it is called <code>high-order function</code></p><h3 id="curry"><a href="#curry" class="headerlink" title="curry"></a>curry</h3><p>For function with multiple input, can use a technique named <code>partial apply</code> to reduct it into single input function, this is called <code>curry</code>, for instance:<br>Say we have an expression <code>(+ a b)</code> where both a and b are input, we can transform it into 2 partial function, and can be executed one by one in order to align with the original expression.</p><p>In clojure we can use <code>partial</code> function to currify the multi-input function</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-comment">; use partial function separately</span><br>(<span class="hljs-keyword">def</span> <span class="hljs-title">p</span> (<span class="hljs-name"><span class="hljs-built_in">partial</span></span> + a)) <span class="hljs-comment">;only use 1 input here to form a new function</span><br>(<span class="hljs-name">p</span> b)                 <span class="hljs-comment">;provide the rest input to complete the invocation</span><br><br><span class="hljs-comment">; or combine into single expression</span><br>((<span class="hljs-name"><span class="hljs-built_in">partial</span></span> + a) b)<br></code></pre></td></tr></table></figure><p><code>curry</code> is essentially the transformation of below:  </p><p>$$<br>(a, b) \rightarrow c \equiv a \rightarrow (b \rightarrow c)<br>$$<br>This transform multi-input function into a single input function, which returns another function that is single input as well.</p><p>By mathematical convention in <code>lambda calculus</code>,  the right arrow would associate first, so the formation above would become:</p><p>$$<br> a \rightarrow (b \rightarrow c) \equiv  a \rightarrow b \rightarrow c<br>$$</p><p>If we rewrite the formation above in <code>clojure</code>, in order to guarantee <code>associativity</code>:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">compose</span><br>  [a<span class="hljs-punctuation">,</span> b]<br>  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [p] (<span class="hljs-name">a</span> (<span class="hljs-name">b</span> p))))<br><br><span class="hljs-comment">; the expression below has associativity</span><br>(<span class="hljs-name"><span class="hljs-built_in">=</span></span><br>  (<span class="hljs-name">compose</span> (<span class="hljs-name">compose</span> a b) c)<br>  (<span class="hljs-name">compose</span> a (<span class="hljs-name">compose</span> b c)))<br></code></pre></td></tr></table></figure><p>Let’s see a concrete example:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-comment">; define basic function</span><br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">add</span> [x] (<span class="hljs-name"><span class="hljs-built_in">+</span></span> x <span class="hljs-number">1</span>))<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">minus</span> [x] (<span class="hljs-name"><span class="hljs-built_in">-</span></span> x <span class="hljs-number">2</span>))<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">multiply</span> [x] (<span class="hljs-name"><span class="hljs-built_in">*</span></span> x <span class="hljs-number">3</span>))<br><br><span class="hljs-comment">; define different association</span><br>(<span class="hljs-keyword">def</span> <span class="hljs-title">p</span> (<span class="hljs-name">compose</span> (<span class="hljs-name">compose</span> add minus) multiply))<br>(<span class="hljs-keyword">def</span> <span class="hljs-title">q</span> (<span class="hljs-name">compose</span> add (<span class="hljs-name">compose</span> minus multiply)))<br><br><span class="hljs-comment">; these 2 expressions should be exactly same</span><br>(<span class="hljs-name"><span class="hljs-built_in">=</span></span><br>  (<span class="hljs-name">p</span> <span class="hljs-number">1</span>)<br>  (<span class="hljs-name">q</span> <span class="hljs-number">1</span>))<br></code></pre></td></tr></table></figure><p>In Clojure or Javascript, <code>p</code> and <code>q</code> are different functions, but they mathematically are exactly the same.</p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>We will provide 2 examples to illustrate how and where <code>monad</code> comes from:  </p><h3 id="future"><a href="#future" class="headerlink" title="future"></a>future</h3><p>Given 2 functions as below that could do single work:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">get-user-by-id</span> [id] (<span class="hljs-name"><span class="hljs-built_in">future</span></span> ...id...))             <span class="hljs-comment">; str -&gt; future&lt;User&gt;</span><br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">get-department-by-user</span> [user] (<span class="hljs-name"><span class="hljs-built_in">future</span></span> ...user...)) <span class="hljs-comment">; User -&gt; future&lt;Department&gt;</span><br></code></pre></td></tr></table></figure><p>These 2 functions are in this form:  </p><p>$$<br>a \rightarrow \text{Future}\space b\quad \text{or} \quad a \rightarrow \text{C}\space b<br>$$</p><p>It is the container <code>Future</code> that hold the data.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">compose</span> [f g]<br>  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [x] (<span class="hljs-name"><span class="hljs-built_in">future</span></span> (<span class="hljs-name">f</span> @(<span class="hljs-name">g</span> x)))))<br><br>(<span class="hljs-keyword">def</span> <span class="hljs-title">get-department-by-user-id</span><br>  (<span class="hljs-name">compose</span> get-department-by-user get-user-by-id))<br><br>(<span class="hljs-name">get-department-by-user-id</span> <span class="hljs-number">123</span>)<br></code></pre></td></tr></table></figure><p>Now the <code>compose</code> function is of type:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">(User-&gt;Department)-&gt;(str-&gt;User)-&gt;(str-&gt;Department)<br></code></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Given 2 functions like below:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">duplicate</span> [x] [x x])<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">positive</span> [x] (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">pos?</span></span> x) [x] []))<br></code></pre></td></tr></table></figure><p>These 2 functions are in this form, $a \rightarrow [b]$.<br>If we rewrite the list symbol as another type, we have:  </p><p>$$<br>a \rightarrow \text{List}\space b\quad \text{or}\quad a \rightarrow \text{C}\space b<br>$$</p><p>where List is the <code>container</code> and <code>b</code> is the value inside.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">compose</span> [f g]<br>  <span class="hljs-comment">; notice we use mapcat function to flat &amp; map</span><br>  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [x] (<span class="hljs-name"><span class="hljs-built_in">-&gt;&gt;</span></span> x (<span class="hljs-name">g</span>) (<span class="hljs-name"><span class="hljs-built_in">mapcat</span></span> f)))) <span class="hljs-comment">; execute from right to left</span><br><br>(<span class="hljs-keyword">def</span> <span class="hljs-title">p</span> (<span class="hljs-name">compose</span> duplicate positive))<br><br>(<span class="hljs-name"><span class="hljs-built_in">-&gt;&gt;</span></span> [<span class="hljs-number">-1</span> <span class="hljs-number">1</span> <span class="hljs-number">3</span>] (<span class="hljs-name"><span class="hljs-built_in">mapcat</span></span> p))<br></code></pre></td></tr></table></figure><h2 id="monad"><a href="#monad" class="headerlink" title="monad"></a>monad</h2><p>We observe that not only <code>asynchronous future</code> but also <code>list</code> follow the same pattern:  </p><p>$$<br>a \rightarrow \text{C}\space b<br>$$</p><p>Where <code>C</code> is the mappable container, this is the <code>functor</code> that we mentioned above.<br>We can also try to use function composition, such as:  </p><p>$$<br>(a \rightarrow C\ b) \rightarrow (x \rightarrow C\ a) \rightarrow (x \rightarrow C\ b)<br>$$</p><p>When we replace <code>C</code> with <code>future</code> we get asynchronous invocation function; when replace with <code>list</code>, we get list transformation function. If we use <code>identity</code> as <code>C</code>, then it is the regular function.  </p><p>$$<br>\begin{aligned}<br>\because&amp;\ \text{Identity}\ a \equiv a\<br>\therefore&amp;\ (a \rightarrow \text{Identity}\ b) \equiv (a \rightarrow b)<br>\end{aligned}<br>$$</p><p>Then we want to define <code>identity unit</code>, because of associativity, the <code>identity</code> is as below:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">=</span></span><br>  (<span class="hljs-name">compose</span> f identity)<br>  (<span class="hljs-name">compose</span> identity f)<br>  (<span class="hljs-name">f</span>))<br><span class="hljs-comment">; compose(f, unit) == f</span><br></code></pre></td></tr></table></figure><p>We can see <code>compose</code> function is of type:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">(a -&gt; C b) -&gt; (a -&gt; C a) -&gt; (a -&gt; C b)<br></code></pre></td></tr></table></figure><p>We can determine the type of <code>identity</code>: <code>(a -&gt; C a)</code>  </p><p>For <code>future</code> the identity is:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">identity</span> [x] (<span class="hljs-name"><span class="hljs-built_in">future</span></span> x))<br></code></pre></td></tr></table></figure><p>For <code>list</code> the identity is:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">identity</span> [x] [x])<br></code></pre></td></tr></table></figure><p>We observe that both <code>future</code> and <code>list</code> has <code>identity unit</code>. Is this always the case?<br>The answer is true if we go with <code>monad</code>, as the definition of it is:  </p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">monad is a monoid in the category of endofunctors<br></code></pre></td></tr></table></figure><p>monoid would of course has <code>identity</code> according to its definition, and it maps objects in one category.<br>Now let’s define function <code>bind</code>:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-comment">; bind :: m a -&gt; (a -&gt; m b) -&gt; m b</span><br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">bind</span> [ma f]<br>  (<span class="hljs-name">compose</span> f (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [_] ma)))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Group Definition</title>
    <link href="/2023/2023-01-31-group-definition/"/>
    <url>/2023/2023-01-31-group-definition/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><p>If we have element <code>a</code> and operator <code>*</code> that conform the following property.</p><h3 id="group-property"><a href="#group-property" class="headerlink" title="group property"></a>group property</h3><ol><li>封闭性（Closure）</li></ol><p>$$<br>\text{if } a, b \in G \text{ then } a*b \in G<br>$$</p><ol start="2"><li>结合律（Associativity）</li></ol><p>$$<br>\text{if } a, b, c \in G \text{ then } (a<em>b)<em>c &#x3D; a</em>(b</em>c)<br>$$</p><ol start="3"><li>同一&#x2F;恒等&#x2F;单位元 （Identity）</li></ol><p>$$<br>\exists e \Rightarrow \forall a, e * a &#x3D; a * e &#x3D; a<br>$$</p><ol start="4"><li>逆元（Inverse）</li></ol><p>$$<br>\text{if } a \in G, \exists a^{-1}, \text{then } a * a^{-1} &#x3D; e<br>$$  </p><h3 id="different-group"><a href="#different-group" class="headerlink" title="different group"></a>different group</h3><ul><li>|C | A | ID | IN<br>–|–|–|–|–<br>semigroup| $\checkmark$ | $\checkmark$<br>monoid  | $\checkmark$ | $\checkmark$ | $\checkmark$<br>group | $\checkmark$ | $\checkmark$ | $\checkmark$ | $\checkmark$</li></ul>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Font Attribute</title>
    <link href="/2022/2022-11-03-font-attribute/"/>
    <url>/2022/2022-11-03-font-attribute/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="https://www.cnblogs.com/guanghe/p/9068814.html">https://www.cnblogs.com/guanghe/p/9068814.html</a><br><a href="https://www.jianshu.com/p/c6257701d682">https://www.jianshu.com/p/c6257701d682</a></p><p>Font usually has the following 2 attributes<br>字体一般有以下两种不同的属性，这两者是正交的。</p><h3 id="1-Sarif"><a href="#1-Sarif" class="headerlink" title="1. Sarif"></a>1. Sarif</h3><p>指字体是否具有衬线，无论英文还是中文都有可能有这种情况</p><p><img src="https://upload-images.jianshu.io/upload_images/1401034-de57b8d6189f0189.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/443/format/webp" alt="alt"></p><p>sans-sarif 是指没有衬线<br>sarif是指有衬线</p><h3 id="2-Monospace"><a href="#2-Monospace" class="headerlink" title="2. Monospace"></a>2. Monospace</h3><p>每个字符是否等宽</p><p><img src="https://upload-images.jianshu.io/upload_images/1401034-276ca70c998b49bb.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/format/webp" alt="alt"></p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>font</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux Symbolic Link vs Hard Link</title>
    <link href="/2022/2022-10-28-linux-symbolic-link/"/>
    <url>/2022/2022-10-28-linux-symbolic-link/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Behind the what we can see in shell, what actually stores the file <code>metadata</code> is what so called <code>inode</code> in each file system in Linux.  The file content is stored in <code>block</code> that is pointed and managed<br>Once the related <code>inode</code> is deleted, the data <code>block</code> remains the same, but since there is no pointer to these blocks, we won’t be able to read them then.<br>So what we call to create a file is done in 2 steps:</p><ol><li>create inode(s) that contains given data</li><li>create a <code>hard</code> link that points to the head of inode</li></ol><p>This way, when dealing with hard link, it actually looks up the pointed <code>inode</code> from file system.  So renaming, moving hard link has nothing to do with the file content at all. No matter when you put the hard link as or move the hard link to, it always points to the underlying <code>inode</code> via pointer.<br>You can create multiple hark link to single <code>inode</code>, all of them behave the same as the original file. Moving or renaming them will not affect the data underneath it.<br>When deleting hard link, Linux will check how many hard link are there left on the <code>inode</code>. It will only clean the <code>inode</code> if there is no hard link points to it anymore. That means, if you have many hard link to one file, you may avoid deleting the file content by mistake.  </p><p><code>Symbolic</code> link or <code>soft</code> link, on the other hand, does not point to <code>inode</code> anymore, instead, it is nothing but a <code>path</code> to the original file.<br>That means renaming or moving the original file does affect symbolic link as it is not able to find the original file by the same <code>path</code> anymore.<br>Also, deleting the symbolic link affects nothing to the <code>inode</code> as well.  </p><p><img src="https://i.postimg.cc/bwtPZ0wG/comparison-link-drawio.png" alt="alt"></p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Normal Function</title>
    <link href="/2022/2022-10-10-normal-function/"/>
    <url>/2022/2022-10-10-normal-function/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="definition"><a href="#definition" class="headerlink" title="definition"></a>definition</h1><h2 id="column"><a href="#column" class="headerlink" title="column"></a>column</h2><p>Simply a single vertical representation of data storage in database table</p><h2 id="functional-dependency"><a href="#functional-dependency" class="headerlink" title="functional dependency"></a>functional dependency</h2><p>Once providing some columns A, the other columns B are implied. This is said to be B functionally depends on A, or <code>A -&gt; B</code> </p><h2 id="key-column"><a href="#key-column" class="headerlink" title="key column"></a>key column</h2><p>The column that comprises key</p><h2 id="key"><a href="#key" class="headerlink" title="key"></a>key</h2><p>A set of columns that is minimum, and is able to determine the rest of columns in table</p><h2 id="partial-functional-dependency"><a href="#partial-functional-dependency" class="headerlink" title="partial functional dependency"></a>partial functional dependency</h2><p>Part of the key its own is able to determine some columns</p><h2 id="full-functional-dependency"><a href="#full-functional-dependency" class="headerlink" title="full functional dependency"></a>full functional dependency</h2><p>Only the key itself is able to determine some columns, no partial functional dependency available</p><h2 id="transitive-functional-dependency"><a href="#transitive-functional-dependency" class="headerlink" title="transitive functional dependency"></a>transitive functional dependency</h2><p>some columns <code>A</code> functionally depend on another columns <code>B</code>, which by its own depends on one another columns <code>C</code>.<br>All the columns mentioned here not necessarily be key or key column at all.</p><h1 id="normal-function"><a href="#normal-function" class="headerlink" title="normal function"></a>normal function</h1><h2 id="1NF"><a href="#1NF" class="headerlink" title="1NF"></a>1NF</h2><p>Ensure every column is atomic</p><h2 id="2NF"><a href="#2NF" class="headerlink" title="2NF"></a>2NF</h2><p>Ensure key columns have full functional dependency to non-key columns.<br>Note that partial dependency between non-key columns is fine </p><h2 id="3NF"><a href="#3NF" class="headerlink" title="3NF"></a>3NF</h2><p>Ensure no transitive functional dependency between non-key column.<br>This means transitive dependency between key column is fine</p><h2 id="BCNF"><a href="#BCNF" class="headerlink" title="BCNF"></a>BCNF</h2><p>Ensure no transitive functional dependency between key column</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>OpenSSL Usage</title>
    <link href="/2022/2022-09-06-openssl-usage/"/>
    <url>/2022/2022-09-06-openssl-usage/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="RSA-key-pair"><a href="#RSA-key-pair" class="headerlink" title="RSA key pair"></a>RSA key pair</h2><ol><li>create private key</li></ol><p>This will create RSA key in <code>PKCS#1</code> format.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl genrsa -out private.pem 1024<br><span class="hljs-meta prompt_"># </span><span class="language-bash">or use genpkey</span><br>openssl genpkey -algorithm RSA -quiet -aes-256-cbc -pass pass:1<br></code></pre></td></tr></table></figure><ol start="2"><li>get public key from private key</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl rsa -in keypair.pem -pubout -out public.pem<br></code></pre></td></tr></table></figure><h2 id="x-509-certificate"><a href="#x-509-certificate" class="headerlink" title="x.509 certificate"></a>x.509 certificate</h2><ol><li>create private key</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl genrsa -out private.pem 1024<br><br>-----BEGIN PRIVATE KEY-----<br>MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAKnkfrfPe4N/DWN7<br>7+gCBLfoIEYRB0AmPTfIoeD5yh+Dfsy5ozuX2/uHZnUaYEqs0ymT8DQknTGhVkAT<br>5lzbf+ptGle3fGYAm2YYVKK6+0Sl3RiCmNoudGBxJrbhCUEFa5PJj9dU3rQooK6N<br>wSJRfRympjMLpYjW0nO2WEGy8VGXAgMBAAECgYB+9BVRK8VjfPS3S6z5lVCLUPWV<br>BjKB2FFUtyNoZ6CHrg5505rL9G3ZZtPEXCJqivz8i+UqQdYJeUNnfLde2lOZ1Pt1<br>7iELNA2NgiDW9MyTC6ccswgYoPbOb3Apvnrcx21vaMbfvmtHXM/sWC+19/LH0fvU<br>rMeOdAZBidPBgtROUQJBAN5oAnIS6qC4z/JwJdBf7fBoXN/+r1lF19ONldij/Xme<br>bKRwkMg3nUSJEEBjSEC7oDAcPgIDJXc+lQpE2enMV/kCQQDDjeNpJCj4Q6Phyd1Q<br>9g4oLiVbpEi3oRGHlSO8uejIIRxNZceV5QI+DcY/y8sF2lKX0XLPaSGu5N7FY/Js<br>R/oPAkEA3K+MLbFDi7OW89QAUaG+slx8O++2AvlgzZSiadNfgzyGRS1FHMbCkO0I<br>aTuayFDlBJghl1GT7Zz1urjTGkEf0QJBAK0V7l4GknjDrc9QlCJv1zH7Pjex3mci<br>GljuSZZm2sIghGOBHbnv3B8+o+WdpNJGXmpgCYXJoPWjQAZoo47x2kMCQQCa3+4v<br>mS/EVetiVkIERE9NuVNkY9wOs9NYzfCDTs7Pz5x24a6TnSU1YbhTb3wK23hrQrHE<br>cVgKLxkUn63UqS/m<br>-----END PRIVATE KEY-----<br></code></pre></td></tr></table></figure><ol start="2"><li>create certificate request</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -new -key private.pem -out rugal.csr -subj &quot;/emailAddress=this@rug.al, CN=Rugal Bernstein, C=CA&quot;<br><br>-----BEGIN CERTIFICATE REQUEST-----<br>MIIBdTCB3wIBADA2MTQwMgYJKoZIhvcNAQkBFiV0aGlzQHJ1Zy5hbCwgQ049UnVn<br>YWwgQmVybnN0ZWluLCBDPUNBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCp<br>5H63z3uDfw1je+/oAgS36CBGEQdAJj03yKHg+cofg37MuaM7l9v7h2Z1GmBKrNMp<br>k/A0JJ0xoVZAE+Zc23/qbRpXt3xmAJtmGFSiuvtEpd0YgpjaLnRgcSa24QlBBWuT<br>yY/XVN60KKCujcEiUX0cpqYzC6WI1tJztlhBsvFRlwIDAQABoAAwDQYJKoZIhvcN<br>AQELBQADgYEAILgi47IjzF0rJMGfIRtZZ08jonUF6KX68o3B47+NmIDXoXEib+kc<br>dm4wEA5PQjMfN/fojvjJm9bA7BdzGlhQxFpVTr3u5PHzG7ZUJ9hVQeLz6kHj5m8D<br>4tfpRBNjlfWE3A/8B/Sn7CfWxRKkUlQO8cFJTHzw8LSZjbhCXftd1Dc=<br>-----END CERTIFICATE REQUEST-----<br></code></pre></td></tr></table></figure><ol start="3"><li>create certificate</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">openssl req -x509 -sha256 -days 365 -key private.pem -in rugal.csr -out certificate.pem<br><br>-----BEGIN CERTIFICATE-----<br>MIICSDCCAbGgAwIBAgIUD3s8d23TqRJjH2eKFuOvz9FdNAYwDQYJKoZIhvcNAQEL<br>BQAwNjE0MDIGCSqGSIb3DQEJARYldGhpc0BydWcuYWwsIENOPVJ1Z2FsIEJlcm5z<br>dGVpbiwgQz1DQTAeFw0yMzExMDcxNTE1MTFaFw0yNDExMDYxNTE1MTFaMDYxNDAy<br>BgkqhkiG9w0BCQEWJXRoaXNAcnVnLmFsLCBDTj1SdWdhbCBCZXJuc3RlaW4sIEM9<br>Q0EwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAKnkfrfPe4N/DWN77+gCBLfo<br>IEYRB0AmPTfIoeD5yh+Dfsy5ozuX2/uHZnUaYEqs0ymT8DQknTGhVkAT5lzbf+pt<br>Gle3fGYAm2YYVKK6+0Sl3RiCmNoudGBxJrbhCUEFa5PJj9dU3rQooK6NwSJRfRym<br>pjMLpYjW0nO2WEGy8VGXAgMBAAGjUzBRMB0GA1UdDgQWBBTtYn5CvpExxxMRnZgr<br>HDElpGWb8jAfBgNVHSMEGDAWgBTtYn5CvpExxxMRnZgrHDElpGWb8jAPBgNVHRMB<br>Af8EBTADAQH/MA0GCSqGSIb3DQEBCwUAA4GBAHczhk8XGhc1d66n3drbytNxgJwU<br>olsE5gjxjw4cNE/0XBy+BgMQLvCP3cQ9vpHHndT49SmYzT4QKDR1omoDp6SJJXlQ<br>pdFheVbFEMeFmZKpjjO8t+L19tUiAy2oFxFRuhxd0fw7ztjB/yHAbrurwH7uf/w8<br>JCVHKZaap6ta7DOK<br>-----END CERTIFICATE-----<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
      <tag>openssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSL Certificate</title>
    <link href="/2022/2022-09-06-ssl-certificate/"/>
    <url>/2022/2022-09-06-ssl-certificate/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><h2 id="x-509"><a href="#x-509" class="headerlink" title="x.509"></a>x.509</h2><p>Format of public key certificate standard. Contains public key along with other information depicting the issuer etc.,</p><h2 id="DER"><a href="#DER" class="headerlink" title="DER"></a>DER</h2><p>Binary encoding format to store data, not only <code>x.509</code> but also <code>PKCS8</code> in file.  The result can not be viewed in text editor as it is binary</p><h2 id="PKCS8-PKCS12"><a href="#PKCS8-PKCS12" class="headerlink" title="PKCS8, PKCS12"></a>PKCS8, PKCS12</h2><p>Standard syntax for persisting private key information.<br>It is typically exchanged by using <code>PEM</code> encoding format</p><h2 id="PEM"><a href="#PEM" class="headerlink" title="PEM"></a>PEM</h2><p>Base encoding of DER certificate, can also encode others like private and public key etc.,</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs text">-----BEGIN PUBLIC KEY-----<br>...Base64 encoding of the DER encoded certificate...<br>-----END PUBLIC KEY-----<br></code></pre></td></tr></table></figure><p>Usually begin with <code>-----BEGIN</code> and end with <code>-----END</code></p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Asynchronization Mode</title>
    <link href="/2021/2021-12-31-asynchronization-mode/"/>
    <url>/2021/2021-12-31-asynchronization-mode/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><code>异步模型</code> 引入了另一个线程,专门用来做等待的工作,这样就把主线程解放了出来.</p><p>而根据这个异步线程是否要处理主线程的逻辑,又可以将异步模型分为两种不同的模型<br>我讲这两个模型称为 <code>代理模型</code> 与 <code>非代理模型</code></p><h2 id="异步非代理模型"><a href="#异步非代理模型" class="headerlink" title="异步非代理模型"></a>异步非代理模型</h2><p><img src="non-delegate.svg" alt="alt"><br>在该模型中,主线程向异步线程提交任务后就可以继续做自己的事情去了,这个异步线程会返回一个引用到最终结果的对象,在Java中叫做<code>Future</code>,在Javascript中被称为<code>Promise</code>.<br>主线程可以通过查询这个引用对象来查看查询进度和返回结果.</p><p>该模型的一个明显的问题就是,主线程如果要对返回结果进行处理,仍然需要等待<code>Future</code>对象返回结果.<br>尽管在等待期间主线程可以去做其他事情,但主线程仍然需要不断地查询<code>Future</code>对象才能真正得到数据.</p><h2 id="异步代理模型"><a href="#异步代理模型" class="headerlink" title="异步代理模型"></a>异步代理模型</h2><p><img src="delegate.svg" alt="alt"><br>针对上一个异步模型存在的问题,我们可以将数据处理逻辑代理给异步线程.主线程在提交任务后可以完全忘掉这件事情,大大提高了任务吞吐率.<br>任务提交给异步线程后,异步线程会等待数据返回并将主线程委托给自己的处理逻辑施加在返回的数据上,因此完全不需要主线程的介入.<br>而且一般来说针对异步模型,大部分语言都会创建一个线程池,以此提高线程利用率,降低CPU负载.<br>在Java中,可以使用<code>CompletableFuture</code>或<code>ListenableFuture</code>来完成这个任务.</p><p><code>CompletableFuture</code>和<code>ListenableFuture</code>的用法不同.前者可以使用链式语法来编写处理逻辑链条,是一种 <code>反应式编程</code>,而后者需要使用所谓的 <code>回调函数</code> (callback function),在Java中使用的是匿名内部类或<code>Lambda</code>.</p><p>这两种方式中,后者很可能导致可读性极差的代码,因此前者是相对更推荐的方法</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>asynchronization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Synchronization Mode</title>
    <link href="/2021/2021-12-31-synchronization-mode/"/>
    <url>/2021/2021-12-31-synchronization-mode/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><code>同步模型</code> 是一种最基本的传统计算模型.<br>基本特征就是,主线程必须要停下来,等待外部调用返回,然后才能继续执行主线程的代码.</p><p><img src="sync.svg" alt="alt"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">externalService</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    Thread.sleep(<span class="hljs-number">5000</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Rugal&quot;</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;Do other work&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> externalService();<br>    System.out.println(value);<br>    System.out.println(<span class="hljs-string">&quot;Do other work&quot;</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然 <code>同步模型</code> 有很大的资源浪费的问题,因为主线程在这一期间只能等待,卡在调用点上无法动弹.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>asynchronization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Concurrent Mark Sweep algorithm</title>
    <link href="/2021/2021-09-26-concurrent-mark-sweep/"/>
    <url>/2021/2021-09-26-concurrent-mark-sweep/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>CMS是一个针对 #老生代 的  #并发 #分代收集器<br>从这一收集器开始,我们迈入了 #并发 时代,就是说,某些时刻用户线程和GC线程可以一起运行.<br>本收集器可以和 [[Parallel New]]一起使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -XX:+UseConcMarkSweepGC -jar Main.java<br></code></pre></td></tr></table></figure><p>收集器是以获取最少的 #STW ，它在垃圾收集时使得用户线程和 GC 线程并发执行，因此在垃圾收集过程中用户也不会感到明显的卡顿。</p><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><ol><li>初始标记: #STW, 仅使用一条初始标记线程对所有与 #gcroot 直接关联的对象进行标记。</li><li>并发标记: 使用<strong>多条</strong>标记线程，与用户线程并发执行。此过程进行可达性分析，标记出所有废弃对象。速度很慢。</li><li>重新标记: #STW, 使用多条标记线程并发执行，将刚才并发标记过程中新出现的废弃对象标记出来。</li><li>并发清除: 只使用一条 GC 线程，与用户线程并发执行，清除刚才标记的对象。这个过程非常耗时。</li></ol><p>并发标记与并发清除过程耗时最长，且可以与用户线程一起工作，因此，<strong>总体上说</strong>，CMS 收集器的内存回收过程是与用户线程<strong>一起并发执行</strong>的。</p><p><img src="https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/cms.png"></p><h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><ul><li>吞吐量低</li><li>无法处理浮动垃圾，导致频繁 Full GC</li><li>使用“标记-清除”算法产生碎片空间</li></ul>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Core Issue of GC</title>
    <link href="/2021/2021-09-26-core-issue-of-gc/"/>
    <url>/2021/2021-09-26-core-issue-of-gc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>垃圾回收的理念确实非常棒,但判断一个垃圾回收算法和垃圾回收器优劣应该有以下几个标准.</p><h2 id="应用程序暂停的时间"><a href="#应用程序暂停的时间" class="headerlink" title="应用程序暂停的时间"></a>应用程序暂停的时间</h2><p>#STW 砸瓦鲁多<br>是GC中的一个专有名词,特指为了使得内存状态稳定,需要将所有应用线程全部停下,这期间GC线程进行工作.<br>短暂的STW可能不会让用户察觉到,但长时间的STW会导致极差的用户体验,是一个GC算法和收集器应该极力避免的.</p><p>即一次GC所导致的 #STW 时间应该尽量少.<br>例如 #ZGC 收集器的最高 #STW 时间不超过10ms</p><h2 id="应用程序吞吐量"><a href="#应用程序吞吐量" class="headerlink" title="应用程序吞吐量"></a>应用程序吞吐量</h2><p>#throughput</p><p>在单位时间内, #STW 的总时间应该尽量少.<br>某种收集器可能单次GC时间特别短,但由于每次只是回收了非常少量的内存,导致需要非常频繁的进行GC,而总共消耗的时间可能反而非常大.<br>这样的话留给应用程序线程的时间可能还不如那种 #STW 大,而一次性把垃圾都回收干净的收集器了.</p><h2 id="内存利用率"><a href="#内存利用率" class="headerlink" title="内存利用率"></a>内存利用率</h2><p>#utility </p><p>某些收集器会对堆内存进行分区或者分代,而分割后的内存每次只能利用其中一部分,如果分割比例不够好或算法不优的话会导致内存的利用率不高.<br>我们尽量希望提高内存利用率.</p><p>另外,某些收集器会使用额外的内存来记录更多信息,以提高收集性能,这些额外的内存也会占用堆内存,使得我们真正在应用程序中能使用的内存量降低.这也是需要取舍的.</p><h2 id="正确回收"><a href="#正确回收" class="headerlink" title="正确回收"></a>正确回收</h2><p>#correctgc</p><p>字面意思就是,应该回收的东西就要进行回收,不该回收的东西就应该保留着.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Garbage First algorithm</title>
    <link href="/2021/2021-09-26-g1/"/>
    <url>/2021/2021-09-26-g1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>G1即垃圾优先收集器,理念是以不完全的GC来降低的 #STW<br>尽管G1收集器有分代的概念,但本质上是一个 #分区收集器 </p><p><img src="https://github.com/gaoxingliang/goodutils/raw/master/res/gcbook/g1-pool.png"></p><p>在整个堆中,以一个大小的单位分割成很多小的规则的块.<br>和其他例如[[Serial]], [[Parallel Scavenge]]等收集器不同,G1中的 #新生代 和 #老生代 并不是连续的,而是散落开的,一块一块散落在整个堆里</p><p><img src="https://github.com/gaoxingliang/goodutils/raw/master/res/gcbook/g1-collection-set.png"><br>因此每次回收不需要扫描整个堆,而只需要查看几个需要清理的块即可.除此之外,每个<code>块</code>里又分成很多个<code>区</code>,GC只需要对这些块里面需要清理的区进行处理即可.<br>G1是一个可以指定 #STW 时间上限的收集器,其原理就是,如果上限越低,为了降低收集时间G1会回收更少的块.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -XX:+UseG1GC Main.java<br></code></pre></td></tr></table></figure><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p><a href="https://www.oracle.com/technetwork/tutorials/tutorials-1876574.html">oracle</a></p><ol><li>初始标记<br> #STW, 和young GC一起进行<br> 对所有与 #gcroot  <code>直接关联</code>的对象进行标记,该过程很快<br> 标记指向老生代对象的整个幸存区块</li><li>幸存区扫描<br> 必须在young GC发生之前完成<br> 在前一个阶段标记的幸存区块中找到引用老生代的对象<br> 此过程进行可达性分析,速度很慢,但由于不存在 #STW 因此不影响用户线程</li><li>并发标记<br> #并发 可被young GC打断<br> 在整个堆中标记存活对象</li><li>重标记<br> #并发 #STW 使用snapshot-at-the-beginning #SATB 算法<br> 重新做一次标记,因为前一阶段的标记过程用户线程也在运行,因此可能存在漏标记的对象</li><li>清理<ol><li>汇总存活对象,释放内存 #STW </li><li>更新 Remember Set #STW </li><li>将整理完成后的空闲内存区加入到空闲列表里</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Garbage Collector Overview</title>
    <link href="/2021/2021-09-26-garbage-collector-overview/"/>
    <url>/2021/2021-09-26-garbage-collector-overview/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><img src="https://www.callibrity.com/hs-fs/hubfs/collectors.jpg?width=792&name=collectors.jpg"></p><p>上图展示了不同垃圾收集器之间的可组合关系.</p><ol><li><a href="!--swig%EF%BF%BC0--">G1</a></li><li><a href="!--swig%EF%BF%BC1--">ZGC</a></li><li><a href="!--swig%EF%BF%BC2--">Shenandoah</a></li><li><a href="!--swig%EF%BF%BC3--">Parallel Scavenge</a></li><li><a href="!--swig%EF%BF%BC4--">Parallel Old</a></li><li><a href="!--swig%EF%BF%BC5--">Parallel New</a></li><li><a href="!--swig%EF%BF%BC6--">Serial</a></li><li><a href="!--swig%EF%BF%BC7--">CMS</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Reference Type</title>
    <link href="/2021/2021-09-26-java-reference-type/"/>
    <url>/2021/2021-09-26-java-reference-type/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>从Java 1.2版本开始引入了<code>java.lang.ref</code>这个包,里面定义了总共三种引用类型</p><ol><li>虚引用</li><li>弱引用</li><li>软引用</li></ol><p>接下来我们把Java中所有的引用可能性都来讲解一遍.顺序是从最弱到最强.</p><h2 id="无引用"><a href="#无引用" class="headerlink" title="无引用"></a>无引用</h2><p>如字面意思,就是说这个对象,完全没有任何引用能访问到它,因此该对象可以被GC.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分配内存</span><br><span class="hljs-type">var</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-comment">// 从此开始该对象就不再有引用可以访问到它</span><br>o = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//在此后的某个时刻,GC应当能找到判断这个对象已经无法再访问,并释放它</span><br></code></pre></td></tr></table></figure><h2 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h2><p>所谓<code>虚引用</code>,是一个和<code>无引用</code>几乎一样的引用类型.它的主要作用是</p><ol><li>用来做GC调试,</li><li>提供更灵活的<code>finalize</code>处理机制</li></ol><p>为了方便起见,可以将虚引用直接理解成无引用,因为在虚引用之后,在调用<code>get</code>方法后永远会返回<code>null</code>.<br>虚引用的主要用法是要结合<code>ReferenceQueue</code>来检查GC机制.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span>&lt;Object&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br></code></pre></td></tr></table></figure><h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><p>弱引用是一个比虚引用略微强一点点的引用类型.<br>当一个对象只有弱引用的话,它一定会在下次GC的时候会清理掉.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;Object&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br></code></pre></td></tr></table></figure><h2 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h2><p>软引用是比弱引用更强一点点的引用类型.<br>当一个对象只有软引用的话,GC会视内存稀缺情况来进行下一步操作.<br>如果内存充沛,那么该对象还可以保留,反之该对象就会被回收.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">ref</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>&lt;Object&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>());<br></code></pre></td></tr></table></figure><h2 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h2><p>强引用是最实在的引用,我们正常创建出来的引用对象默认就是强引用类型.<br>只要一个对象还有 #gcroot 可达的强引用,这个对象就不会被回收</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">var</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mark Compact algorithm</title>
    <link href="/2021/2021-09-26-mark-compact/"/>
    <url>/2021/2021-09-26-mark-compact/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><ol><li>和 #mark-sweep 一样 首先需要 #STW 从 #gcroot 出发遍历所有对象,将不可达的对象标记上</li><li>然后将标记过的对象全都进行回收</li><li>#STW 将剩下的存活对象整理好并排布在内存的前端</li></ol><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/mark-sweep-compact.png?raw=true" alt="sc"></p><p>#mark-compact 的特点就是可以消除内存碎片问题,大幅提高内存完整度,但也正因为这个整理的操作,该算法需要更多 #STW 来整理内存,并将原来的引用指向新的对象地址</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mark Copy algorithm</title>
    <link href="/2021/2021-09-26-mark-copy/"/>
    <url>/2021/2021-09-26-mark-copy/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>某些文档里会称copy为 #scavenge</p><p>和 #mark-sweep #mark-compact 两个算法不太一样的是,在 #mark-copy 算法中,我们将内存我们需要操作的内存分成两个区域,分别称为from和to区域,但其实他们的意义和名字 并没有直接关系,因为他们两个是等价的,只使用名字做一个区分而已.  因此有的文档上也将这两个区域称为survivor 1和survivor 2,统称survivor区.</p><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/memory-pool.png?raw=true"></p><ol><li>和 #mark-sweep 不太一样的是,本算法一边标记存活的对象,一边直接将这些存活的对象从from区复制到to区的内存前端. 该过程需要 #STW</li></ol><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/mark-copy.png?raw=true" alt="mc"> </p><p>本算法的一个特点是,只需要一个阶段,一边寻找存活的对象,一边就直接把这些对象复制到另一个区域的前端即可,因此该方法的性能会比较好.复制完成后,原来的from区域不需要做清理操作,我们可以直接把整个区域都当做是已经清理完成了.<br>一次 #mark-copy 完成后,原来的from区变成了新的to区,原来的to区变成了新的from区.这就是为什么我们前面说这两个区域是等价的,每次操作完成后他们的相对意义就会交换一次.</p><p>尽管该算法性能比较好,也很好理解,但一个很大的问题该算法会导致我们的内存利用率不高,每次都只有50%的内存可以使用.</p><p>以上便是 #mark-copy 的基本思想.基于这个思想,很多垃圾收集器都会加上一些优化,使得内存使用率能够提高.<br>例如本文的第一个图片中,新生代里有一个Eden区,作为新生代区域中更加细化的分割.一般Eden和Survivor的大小比例为4:1.<br>由于Eden和Survivor的引入,新的策略为:   </p><ol><li>任何新的对象首先分配在新生代的 #eden 区中</li><li>一次GC后将Eden中的存活对象复制到survivor 1&#x2F;from区域中</li><li>下一次GC的时候,就会执行本身上述的复制操作,使得存活在 #survivor 区的对象在from和to之间来回切换轮转</li><li>如果来回切换轮转到一定次数,则判定这个对象应该被提升至老生代</li></ol><p>以上的这种优化算法可以提高 #utility ,利用率从50%提高到了90%.<br>再次强调一下,以上的假设基于一个基本的 [[分代假设]], 即新生代的对象大多数会很快失效,因此尽管80%内存都在 #eden 区,GC之后仅剩下少数的对象需要复制到 #survivor 区.</p><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/eden-to-survivor.png?raw=true" alt="promotion"></p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mark Sweep algorithm</title>
    <link href="/2021/2021-09-26-mark-sweep/"/>
    <url>/2021/2021-09-26-mark-sweep/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><ol><li>首先需要 #STW 从 #gcroot 出发遍历所有对象,将不可达的对象标记上</li><li>然后将标记过的对象全都进行回收</li></ol><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/free-list-sweep.png?raw=true" alt="ms"></p><p>#mark-sweep 法作为最最基础的算法是非常符合直觉的,也非常容易实现.但非常明显的一个问题就是,容易造成内存碎片化,到最后明明内存有的是,但由于每个内存之间不连续,无法一次性分配出足量的连续内存,导致系统崩溃</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object Generational Assumption</title>
    <link href="/2021/2021-09-26-object-generational-assumption/"/>
    <url>/2021/2021-09-26-object-generational-assumption/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>根据统计显示,绝大部分创建出来的对象都符合如下图般的规律.<br> 大部分对象的存活时间都非常短,刚创建出来一会儿就不再有引用了.例如在做计算的过程中所创建出来的对象,在一个计算公式结束后计算过程中所有的中间临时变量都不再有用了.<br> 而另外,有一小半对象的存活时间会非常长,甚至是一直存在于进程之中的.例如系统配置变量等需要全局引用的对象等.<br> 剩下的那些存活时间不长也不短的对象,则仅仅占据了非常小的比例.</p><p> 根据这个统计,我们很自然的想到按照对象存活的时间进行分开管理.</p><ol><li>将寿命非常短的那一类对象归为新生代,young</li><li>将永久存在的部分称为永久代permanent,Java8之后称为元空间.注意该区域主要存放的是类信息以及字符串<code>intern</code>的信息,并且该空间也是可以被GC的</li><li>剩下的中间部分我们称为老生代old&#x2F;tenure</li></ol><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/objects-age.png?raw=false" alt="generational"></p><p>值得注意的是,新创建出来的对象我们一般的都会放在新生代中.而如果一个对象在新生代中存活了一定时间,超过一个阈值,我们则会把它移动到老生代中去.这是我们对对象存活时间延长的一个操作.</p><p>此外,一般的垃圾收集器还会在新生代中继续分区,一般分为 #eden 和 #survivor 区</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Object Liveness</title>
    <link href="/2021/2021-09-26-object-liveness/"/>
    <url>/2021/2021-09-26-object-liveness/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>为了确定一个对象是否可以进行内存回收,我们有以下几种判定方法</p><h2 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h2><p>引用计数法是非常经典也非常简单容易实现的判定方法.<br>基本原理就是每当有一个引用挂在对象上,这个对象上的引用计数器就<code>+1</code>.<br>若对象上的引用计数器归0了则判定这个对象可以被回收.<br>这个算法非常好理解,也非常好实现,很多语言例如Python都是用这种方式.</p><p>但这个方法有一个严重的问题,就是如果两个对象互相引用对方,而没有其他引用指向这两个对象的话,我们可以认为这两个对象形成了一个孤岛,而外部没有任何方法能访问到这两个对象.<br>这种情况下这两个对象的引用计数器不为0,而显然这两个对象应该被遗弃清理掉.<br>因此引用计数法虽然简单易懂,但存在这个漏洞会导致内存泄漏. #correctgc </p><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/reference-cyclic.png?raw=false" alt="counter"></p><h2 id="GC-Root可达"><a href="#GC-Root可达" class="headerlink" title="GC Root可达"></a>GC Root可达</h2><p>另外一种更靠谱的方法就是去计算一个对象的可达性.<br>我们可以将对象之间的引用关系理解成一个图,如果从一个节点出发,以某个路径抵达目标对象,我们就说这两个对象是联通的.<br>在我们的 #gcroot 可达性分析中,会有一个概念叫做 GC Root,从这个Root出发,如果能以某种路径访问到目标对象,则我们认为这个目标对象是可达的,因此该对象应该被保留下来.</p><p><img src="https://github.com/gaoxingliang/goodutils/blob/master/res/gcbook/reference-count-1.png?raw=true" alt="gcroot"></p><p>那么如何定义GC Root呢? JVM Specification中定义了以下的几种变量:</p><ul><li>局部变量</li><li>静态变量</li><li>常量</li><li>由Java Native Interface所引用的</li></ul>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Parallel New algorithm</title>
    <link href="/2021/2021-09-26-parallel-new/"/>
    <url>/2021/2021-09-26-parallel-new/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本收集器是一种新型的 #并行 的针对 #新生代 的 #分代收集器 . 和[[Parallel Scavenge]]类似,但性能更好一点, 并且可以和[[CMS]]协同使用.<br>收集过程中需要 #STW </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -XX:+UseParNewGC -jar Main.java<br></code></pre></td></tr></table></figure><p>使用的是多线程 #并行   #mark-copy 算法.<br>对老生代来说,可以使用[[CMS]]收集器.</p><p><img src="https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/parnew.png"></p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Parallel Old algorithm</title>
    <link href="/2021/2021-09-26-parallel-old/"/>
    <url>/2021/2021-09-26-parallel-old/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>本收集器是针对 #老生代 的 #并行 #分代收集器.<br>在收集的过程中,会启动多个线程进行并行收集,每个线程都会使用 #mark-compact </p><p>由于本收集器只针对老生代,新生代会使用[[Parallel Scavenge]]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">java -XX:+UseParallelGC -jar Main.java<br></code></pre></td></tr></table></figure><p>一旦启用了<code>UseParallelGC</code>参数,两种收集器就会同时使用起来.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Parallel Scavenge algorithm</title>
    <link href="/2021/2021-09-26-parallel-scavenge/"/>
    <url>/2021/2021-09-26-parallel-scavenge/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>#scavenge </p><p>本收集器主要是针对 #新生代 的 #分代收集器,运行的算法主要是 #mark-copy ,只不过是由多个线程 #并行 (parallel)的进行垃圾收集,而每个线程所执行的算法也只是简简单单的 [[Serial]],因此该过程需要 #STW .由于本身使用了多线程进行并行处理,整个垃圾清除过程会比[[Serial]]快一些.<br>当然也由于并行的存在,使得线程调度和实现过程变得略微复杂一些.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -XX:+UseParallelGC -jar Main.java<br></code></pre></td></tr></table></figure><p>由于本收集器只针对新生代,老生代会使用[[Parallel Old]]<br>本收集器无法和[[CMS]]一起使用, 一旦启用了<code>UseParallelGC</code>参数,[[Parallel Scavenge]]和[[Parallel Old]]就会同时使用起来.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Serial algorithm</title>
    <link href="/2021/2021-09-26-serial/"/>
    <url>/2021/2021-09-26-serial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>#分代收集器</p><p>使用单线程 #串行 地进行垃圾清理.<br>尽管新生代和老生代的垃圾处理逻辑有一些不同(由于新生代有 #eden 和 #survivor 的分隔),但总体逻辑没有什么差别.</p><ul><li>对于 #新生代 来说,本收集器的做法是 #STW 并使用 #mark-copy</li><li>对于 #老生代 来说,会使用 #STW 并进行 #mark-compact ,一般这个收集器称为 #serial-old</li></ul><p>本收集器的性能算是比较差的,但也非常容易理解和实现,对于客户端小应用来说,是比较容易实现的方案.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -XX:+UseSerialGC -jar Main.java<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/doocs/jvm@main/images/serial.png"></p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shenandoah algorithm</title>
    <link href="/2021/2021-09-26-shenandoah/"/>
    <url>/2021/2021-09-26-shenandoah/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>#分区收集器<br>#并行</p><p> <a href="https://hg.openjdk.java.net/shenandoah">source code</a></p><p><img src="http://cr.openjdk.java.net/~shade/shenandoah/shenandoah-gc-cycle.svg" alt="alt"></p><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><ol><li>初始标记<br> 做下一阶段的准备活动<br> 扫描 #gcroot 并 #STW </li><li>#并发 标记<br> 检查整个堆以分析对象可达性</li><li>最终标记<br> 完结并发标记阶段,等待所有更新队列中未完成的标记任务结束,然后重新扫描一遍 #gcroot<br> 根据扫描所得的结果集启动copy流程,对某些 #gcroot 进行初步复制,并准备进入下一阶段<br> 触发 #STW </li><li>#并发 清理<br> 分析结果集,将并发标记后找到的垃圾区域(指没有任何存活对象的区)进行回收</li><li>#并发 复制<br> 将结果集中的对象并发复制到其他区中</li><li>初始化更新引用<br> #STW<br> 本阶段用来检查保证所有线程都已经完成复制工作,以确保下一阶段的工作能正常进行</li><li>#并发 更新引用<br> 遍历整个堆,更新那些在并发复制过程中被移动过的老引用<br> 扫描过程是线性的,而不是扫描对象关系树</li><li>最终更新引用<br> #STW<br> 完结引用更新阶段,并重新更新 #gcroot<br> 回收结果集中的区,因为清理过后结果集中的对象已经没有引用指向它们了</li><li>#并发 清理<br> 回收结果集区</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Why GC</title>
    <link href="/2021/2021-09-26-why-gc/"/>
    <url>/2021/2021-09-26-why-gc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="GC还未出现的时代"><a href="#GC还未出现的时代" class="headerlink" title="GC还未出现的时代"></a>GC还未出现的时代</h2><p>在自动垃圾回收概念出来之前的那个时代,大部分程序都是用诸如C语言这样的程序语言来编写的,而在C或者CPP语言中,所有的内存分配和回收都必须要开发人员手动处理,以C为例:</p><h3 id="申请空间"><a href="#申请空间" class="headerlink" title="申请空间"></a>申请空间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>  <span class="hljs-type">int</span> id;<br>  <span class="hljs-type">char</span> *name;<br>  <span class="hljs-type">int</span> age;<br>&#125; RugalType;<br><br>RugalType* p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RugalType));<br><br><span class="hljs-built_in">memset</span>(p, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(RugalType));<br>p.id = <span class="hljs-number">18</span>;<br>p.name = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>) * <span class="hljs-number">10</span>);<br><span class="hljs-built_in">strncpy</span>(p.name, <span class="hljs-string">&quot;Rugal&quot;</span>, <span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><p>以上代码列举了如何申请一片内存空间并赋值给<code>p</code>指针, 然后又分配了10个字节的空间用来给<code>p.name</code>指针.</p><h3 id="释放空间"><a href="#释放空间" class="headerlink" title="释放空间"></a>释放空间</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != p) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">NULL</span> != p.name) &#123;<br>    <span class="hljs-built_in">free</span>(p.name);<br>  &#125;<br>  <span class="hljs-built_in">free</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上C代码就是正常的释放&#x2F;返回空间的例子.<br>正常情况下,所有申请的内存,都需要有序地被释放回去,否则就会发生内存泄漏.</p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-comment">// 给p指针分配内存</span><br><span class="hljs-type">int</span> *p = <span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br><span class="hljs-comment">// 将p指向的内存的值赋值为1</span><br>*p = <span class="hljs-number">1</span>;<br><span class="hljs-comment">// p指针不指向任何内存</span><br>p = <span class="hljs-literal">NULL</span>;<br><span class="hljs-comment">// 从此开始,p指针不再指向原来的内存,而原来的内存空间已经没有任何指针能够访问到了</span><br><span class="hljs-comment">// 这样的情况我们称为内存泄漏</span><br></code></pre></td></tr></table></figure><p>以上就是经典的内存泄漏的代码样例.<br>在这种情况下,这段内存就无法被任何方式方式到,而这块内存又已经被分配出去,因此系统不会自动将其回收回来.因此对于本程序来说,可用的内存空间就永远减少了4个字节.<br>长此以往的话,程序的可用内存就会越来越少,最终程序的内存耗竭,发生崩溃.<br>这是我们不希望看到的.</p><h2 id="自动内存回收GC"><a href="#自动内存回收GC" class="headerlink" title="自动内存回收GC"></a>自动内存回收GC</h2><p>对于开发人员来说,如果能随心所欲的创建对象,而不需要花精力去考虑内存的回收问题,那该有多好呀.基于这个初衷,自动内存回收的理念逐渐浮现出来.<br>自动内存回收&#x2F;垃圾回收(GC)其实存在于很多语言中,包括但不限于,Java, JavaScript,Python,Ruby等等.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 分配内存</span><br><span class="hljs-type">var</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><span class="hljs-comment">// 从此开始该对象就不再有引用可以访问到它</span><br>o = <span class="hljs-literal">null</span>;<br><span class="hljs-comment">//在此后的某个时刻,GC应当能找到判断这个对象已经无法再访问,并释放它</span><br></code></pre></td></tr></table></figure><p>本系列会以Java作为基础,讨论GC的概念,算法等.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZGC algorithm</title>
    <link href="/2021/2021-09-26-zgc/"/>
    <url>/2021/2021-09-26-zgc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>ZGC是一个由<code>Azul System</code>公司研发的商用 #分区收集器, 可以使用在  #NUMA 架构上<br>#STW 时间基本稳定,和堆大小无关<br>适合TB级别堆</p><p><a href="https://hg.openjdk.java.net/zgc/zgc">source code</a></p><h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><ol><li>标记启动<br> 超短 #STW<br> 标记 #gcroot 指向的对象</li><li>#并发 标记<br> 与G1相同,遍历对象做可达性分析<br> ZGC的标记实在指针上而不再对象上,将指针更新Marked 0, Marked 1标志位</li><li>标记结束<br> 超短 #STW</li><li>#并发 准备<br> 根据查询条件得出本次收集过程要清理哪些区,将这些区组成重分配集合<br> 每次回收都会查看所有区域</li><li>重分配开始<br> 超短 #STW</li><li>#并发 重分配<br> 为重分配集合中的每个区更新维护Forward Table, 记录就对象到新对象的方向关系<br> 若用户线程访问了重分配集合中的对象,该访问会触发 load barrier,并根据所在区上的Forward table讲此次访问重定向到复制好的对象上去,同时修正更新该引用的值,使其指向新对象<br> 这种指针在ZGC中叫做自纠指针</li><li>#并发 重映射<br> 修正整个堆中重分配集合里旧对象的所有引用<br> 所有指针都修正完后,原来记录新旧对象关系的Forward table就可以清空了</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
      <tag>gc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM runtime data area</title>
    <link href="/2021/2021-09-11-jvm-runtime-data-area/"/>
    <url>/2021/2021-09-11-jvm-runtime-data-area/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Runtime data is living in execution of application.<br>Some of data area are JVM-wise, means they create upon JVM startup and destroy when JVM shutdown.<br>Other data are thread specific, means their lifecycle is binded with thread lifecyclej</p><p><img src="https://www.programcreek.com/wp-content/uploads/2013/04/JVM-runtime-data-area.jpg" alt="runtime-data-area"></p><h1 id="PC-register-thread"><a href="#PC-register-thread" class="headerlink" title="PC register(thread)"></a>PC register(thread)</h1><p>Each JVM thread has its own <code>pc</code>.</p><ol><li>The value will be the <code>address of JVM instruction</code> + <code>return address</code> of currently thread</li><li><code>undefined</code> if the current method is <code>native</code></li></ol><h1 id="JVM-stack-thread"><a href="#JVM-stack-thread" class="headerlink" title="JVM stack(thread)"></a>JVM stack(thread)</h1><p>Each thread has its own stack.<br>Similar to the stack in <code>C</code>.<br>Does not have to be contiguous.</p><ol><li><code>StackOverflowError</code> if wants to have larger stack than permitted, larger in turns of the number frame</li><li><code>OutOfMemoryError</code> if wants to have more memory space than permitted</li></ol><h1 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h1><p>Heap is shared amongst all JVM threads.<br>Heap storage is managed by GC.<br>Heap can be fixed, expandable and shrinkable.<br>The memory does not need to be contiguous.</p><ol><li><code>OutOfMemoryError</code> if wants to have more memory space than permitted</li></ol><h1 id="Method-area"><a href="#Method-area" class="headerlink" title="Method area"></a>Method area</h1><p>Shared amongst all JVM threads<br>It is the <code>text</code> segement in ASM.<br>Can be fixed, expandable and shrinkable.<br>The memory does not need to be contiguous.<br>This area does not have to GC</p><ul><li><code>OutOfMemoryError</code> if wants to have more memory space than permitted</li></ul><p>Contains class structure:</p><ol><li>runtime constant pool</li><li>field data</li><li>method data</li><li>method code &amp; constructor</li><li>static block&#x2F;method</li></ol><h1 id="native-method-stack-thread"><a href="#native-method-stack-thread" class="headerlink" title="native method stack(thread)"></a>native method stack(thread)</h1><p>A <code>C stack</code> will be created for all <code>native</code> method<br>Allocated per thread.<br>Can be fixed, expandable and shrinkable.</p><ol><li><code>StackOverflowError</code> if wants to have larger stack than permitted, larger in turns of the number frame</li><li><code>OutOfMemoryError</code> if wants to have more memory space than permitted</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>STOMP tutorial</title>
    <link href="/2021/2021-06-05-stomp-tutorial/"/>
    <url>/2021/2021-06-05-stomp-tutorial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="connection-explanation"><a href="#connection-explanation" class="headerlink" title="connection explanation"></a>connection explanation</h1><h2 id="upgrade-HTTP-to-Websocket"><a href="#upgrade-HTTP-to-Websocket" class="headerlink" title="upgrade HTTP to Websocket"></a>upgrade HTTP to Websocket</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br>ws:<span class="hljs-regexp">//</span>localhost:port<span class="hljs-regexp">/&#123;stomp endpoint&#125;/</span>&#123;serverid&#125;<span class="hljs-regexp">/&#123;sessionid&#125;/</span>websocket<br><br></code></pre></td></tr></table></figure><h3 id="stomp-endpoint"><a href="#stomp-endpoint" class="headerlink" title="stomp endpoint"></a>stomp endpoint</h3><p>To define the path prefix to upgrade websocket. This can be done in following spring configuration.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">registerStompEndpoints</span><span class="hljs-params">(<span class="hljs-keyword">final</span>  StompEndpointRegistry registry)</span> &#123;<br>  registry.addEndpoint(<span class="hljs-string">&quot;/chat&quot;</span>);<br>  registry.addEndpoint(<span class="hljs-string">&quot;/chat&quot;</span>).withSockJS();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="serverid"><a href="#serverid" class="headerlink" title="serverid"></a>serverid</h3><p>A required but useless id in spring-websocket</p><h3 id="sessionid"><a href="#sessionid" class="headerlink" title="sessionid"></a>sessionid</h3><p>Probably the most important <code>id</code> in this protocol, used to communicate back to current user.</p><h2 id="subscribe"><a href="#subscribe" class="headerlink" title="subscribe"></a>subscribe</h2><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs wren"><br><span class="hljs-string">&quot;SUBSCRIBE<span class="hljs-char escape_">\n</span>id:&#123;subscriptionid&#125;<span class="hljs-char escape_">\n</span>destination:&#123;path&#125;<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\u0000</span>&quot;</span><br><br></code></pre></td></tr></table></figure><h3 id="subscriptionid"><a href="#subscriptionid" class="headerlink" title="subscriptionid"></a>subscriptionid</h3><p>A unique id to indicate single subscription. Mostly useless.</p><h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><p>Extremely important for usage of listening backward communication.</p><p>In spring-websocket, it is by default prefix as <code>/user</code>. In order to allow this prefix to pass the path validation, we should configure the simple broker path in spring configuration as following.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">configureMessageBroker</span><span class="hljs-params">(<span class="hljs-keyword">final</span>  MessageBrokerRegistry config)</span> &#123;<br>  config.enableSimpleBroker(<span class="hljs-string">&quot;/user&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>So by using the following code, the entire path will be <code>/user/to-userid/queue</code>.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-built_in">this</span>.template.convertAndSendToUser(<span class="hljs-string">&quot;to-userid&quot;</span>, <span class="hljs-string">&quot;/queue&quot;</span>, <span class="hljs-string">&quot;message content&quot;</span>);<br></code></pre></td></tr></table></figure><p>This is why it is so important, that by listening to this path, this single user would get message that is specific to it</p><h2 id="send"><a href="#send" class="headerlink" title="send"></a>send</h2><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-string">&quot;SEND<span class="hljs-char escape_">\n</span>from:&#123;from-userid&#125;<span class="hljs-char escape_">\n</span>destination:/&#123;prefix&#125;/&#123;destination&#125;/&#123;to-userid&#125;<span class="hljs-char escape_">\n</span>content-length:29<span class="hljs-char escape_">\n</span><span class="hljs-char escape_">\n</span>&#123;<span class="hljs-char escape_">\&quot;</span>message<span class="hljs-char escape_">\&quot;</span>:<span class="hljs-char escape_">\&quot;</span>message content<span class="hljs-char escape_">\&quot;</span>&#125;<span class="hljs-char escape_">\u0000</span>&quot;</span><br></code></pre></td></tr></table></figure><h3 id="from-userid"><a href="#from-userid" class="headerlink" title="from-userid"></a>from-userid</h3><p>to indicate send message from whom. We may have better to do it in future, but for now, just put it here.</p><h3 id="prefix"><a href="#prefix" class="headerlink" title="prefix"></a>prefix</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title function_">configureMessageBroker</span><span class="hljs-params">(<span class="hljs-keyword">final</span>  MessageBrokerRegistry config)</span> &#123;<br>  config.setApplicationDestinationPrefixes(<span class="hljs-string">&quot;/websocket&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="destination"><a href="#destination" class="headerlink" title="destination"></a>destination</h3><p>This destination can be configured using the following annotation, this annotation is important to indicate the method below is a handler to deal with message that matches the path format in <code>ant</code> syntax.</p><p>The following example defines the destination as <code>user</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@MessageMapping(&quot;/user/&#123;to-userid&#125;&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="to-userid"><a href="#to-userid" class="headerlink" title="to-userid"></a>to-userid</h3><p>Extremely important to indicate whom to receive this message.</p><p>By using the same annotation.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-meta">@MessageMapping(&quot;/user/&#123;to-userid&#125;&quot;)</span><br><br></code></pre></td></tr></table></figure><h1 id="command"><a href="#command" class="headerlink" title="command"></a>command</h1><p>Some useful log to indicate different command.</p><h2 id="disconnect"><a href="#disconnect" class="headerlink" title="disconnect"></a>disconnect</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>2021-06-04 15:45:49.465 <span class="hljs-built_in">DEBUG</span> 15378 --- [boundChannel-26] org.springframework.web.SimpLogging : Processing DISCONNECT <span class="hljs-attribute">session</span>=58oec3gc<br><br>2021-06-04 15:45:49.465 <span class="hljs-built_in">DEBUG</span> 15378 --- [nio-8080-exec-5] s.w.s.h.LoggingWebSocketHandlerDecorator : WebSocketServerSockJsSession[<span class="hljs-attribute">id</span>=58oec3gc] closed with CloseStatus[<span class="hljs-attribute">code</span>=1000, <span class="hljs-attribute">reason</span>=<span class="hljs-literal">null</span>]<br><br>2021-06-04 15:45:49.465 <span class="hljs-built_in">DEBUG</span> 15378 --- [nio-8080-exec-5] o.s.w.s.m.SubProtocolWebSocketHandler : Clearing session 58oec3gc<br><br>2021-06-04 15:45:49.465 <span class="hljs-built_in">DEBUG</span> 15378 --- [tboundChannel-8] o.s.w.s.m.SubProtocolWebSocketHandler : <span class="hljs-literal">No</span> session <span class="hljs-keyword">for</span> GenericMessage [<span class="hljs-attribute">payload</span>=byte[0], headers=&#123;<span class="hljs-attribute">simpMessageType</span>=DISCONNECT_ACK, <span class="hljs-attribute">simpDisconnectMessage</span>=GenericMessage [<span class="hljs-attribute">payload</span>=byte[0], headers=&#123;<span class="hljs-attribute">simpMessageType</span>=DISCONNECT, <span class="hljs-attribute">stompCommand</span>=DISCONNECT, simpSessionAttributes=&#123;&#125;, simpHeartbeat=[J@1e9284c7, <span class="hljs-attribute">simpSessionId</span>=58oec3gc&#125;], <span class="hljs-attribute">simpSessionId</span>=58oec3gc&#125;]<br><br>2021-06-04 15:45:49.466 <span class="hljs-built_in">DEBUG</span> 15378 --- [boundChannel-29] org.springframework.web.SimpLogging : Processing DISCONNECT <span class="hljs-attribute">session</span>=58oec3gc<br><br>2021-06-04 15:45:49.467 <span class="hljs-built_in">DEBUG</span> 15378 --- [tboundChannel-9] o.s.w.s.m.SubProtocolWebSocketHandler : <span class="hljs-literal">No</span> session <span class="hljs-keyword">for</span> GenericMessage [<span class="hljs-attribute">payload</span>=byte[0], headers=&#123;<span class="hljs-attribute">simpMessageType</span>=DISCONNECT_ACK, <span class="hljs-attribute">simpDisconnectMessage</span>=GenericMessage [<span class="hljs-attribute">payload</span>=byte[0], headers=&#123;<span class="hljs-attribute">simpMessageType</span>=DISCONNECT, <span class="hljs-attribute">stompCommand</span>=DISCONNECT, simpSessionAttributes=&#123;org.springframework.messaging.simp.SimpAttributes.<span class="hljs-attribute">COMPLETED</span>=<span class="hljs-literal">true</span>&#125;, <span class="hljs-attribute">simpSessionId</span>=58oec3gc&#125;], <span class="hljs-attribute">simpSessionId</span>=58oec3gc&#125;]<br><br>2021-06-04 15:45:56.194 <span class="hljs-built_in">DEBUG</span> 15378 --- [MessageBroker-8] o.s.w.s.s.t.h.DefaultSockJsService : Closed 1 sessions: [58oec3gc]<br><br></code></pre></td></tr></table></figure><h2 id="subscribe-1"><a href="#subscribe-1" class="headerlink" title="subscribe"></a>subscribe</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.714</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-6]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span> : GET <span class="hljs-string">&quot;/chat/info&quot;</span>, parameters=&#123;&#125;<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.714</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-6]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.WebSocketHandlerMapping</span> : Mapped to org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.socket</span><span class="hljs-selector-class">.sockjs</span><span class="hljs-selector-class">.support</span>.SockJsHttpRequestHandler@<span class="hljs-number">625</span>d9132<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.714</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-6]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.t</span><span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.DefaultSockJsService</span> : Processing transport request: GET http:<span class="hljs-comment">//localhost:8080/chat/info</span><br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.714</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-6]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span> : Completed <span class="hljs-number">200</span> OK<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.791</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-7]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span> : GET <span class="hljs-string">&quot;/chat/080/bw6hxi0f/websocket&quot;</span>, parameters=&#123;&#125;<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.791</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-7]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.WebSocketHandlerMapping</span> : Mapped to org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.socket</span><span class="hljs-selector-class">.sockjs</span><span class="hljs-selector-class">.support</span>.SockJsHttpRequestHandler@<span class="hljs-number">625</span>d9132<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.791</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-7]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.t</span><span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.DefaultSockJsService</span> : Processing transport request: GET http:<span class="hljs-comment">//localhost:8080/chat/080/bw6hxi0f/websocket</span><br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.793</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-7]</span> o<span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.servlet</span><span class="hljs-selector-class">.DispatcherServlet</span> : Completed <span class="hljs-number">101</span> SWITCHING_PROTOCOLS<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.794</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[nio-8080-exec-7]</span> s<span class="hljs-selector-class">.w</span><span class="hljs-selector-class">.s</span><span class="hljs-selector-class">.h</span><span class="hljs-selector-class">.LoggingWebSocketHandlerDecorator</span> : New WebSocketServerSockJsSession<span class="hljs-selector-attr">[id=bw6hxi0f]</span><br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.797</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[boundChannel-32]</span> org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.SimpLogging</span> : Processing CONNECT session=bw6hxi0f<br><br><span class="hljs-number">2021</span>-<span class="hljs-number">06</span>-<span class="hljs-number">04</span> <span class="hljs-number">15</span>:<span class="hljs-number">46</span>:<span class="hljs-number">48.800</span> DEBUG <span class="hljs-number">15378</span> --- <span class="hljs-selector-attr">[boundChannel-35]</span> org<span class="hljs-selector-class">.springframework</span><span class="hljs-selector-class">.web</span><span class="hljs-selector-class">.SimpLogging</span> : Processing SUBSCRIBE /topic/messages id=sub-<span class="hljs-number">0</span> session=bw6hxi0f<br><br></code></pre></td></tr></table></figure><h2 id="send-1"><a href="#send-1" class="headerlink" title="send"></a>send</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>2021-06-04 15:47:57.442 <span class="hljs-built_in">DEBUG</span> 15378 --- [boundChannel-37] .WebSocketAnnotationMethodMessageHandler : Searching methods <span class="hljs-keyword">to</span> handle SEND /app/chat <span class="hljs-attribute">session</span>=bw6hxi0f, <span class="hljs-attribute">lookupDestination</span>=<span class="hljs-string">&#x27;/chat&#x27;</span><br><br>2021-06-04 15:47:57.444 <span class="hljs-built_in">DEBUG</span> 15378 --- [boundChannel-37] .WebSocketAnnotationMethodMessageHandler : Invoking ChatController#send[2 args]<br><br>simpMessageType : MESSAGE<br><br>stompCommand : SEND<br><br>nativeHeaders : &#123;destination=[/app/chat], content-length=[26]&#125;<br><br>simpSessionAttributes : &#123;&#125;<br><br>simpHeartbeat : [J@5b8852c9<br><br>lookupDestination : /chat<br><br>simpSessionId : bw6hxi0f<br><br>simpDestination : /app/chat<br><br><span class="hljs-keyword">From</span>: [a] Content: [aaaa]<br><br>  <br><br>2021-06-04 16:14:07.627 <span class="hljs-built_in">DEBUG</span> 16527 --- [boundChannel-13] org.springframework.web.SimpLogging : Processing MESSAGE <span class="hljs-attribute">destination</span>=/queue/messages-usertest <span class="hljs-attribute">session</span>=test payload=&#123;<span class="hljs-string">&quot;from&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;aaaaa&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;16:14&quot;</span>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="message"><a href="#message" class="headerlink" title="message"></a>message</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><br>2021-06-04 15:47:57.491 <span class="hljs-built_in">DEBUG</span> 15378 --- [boundChannel-37] org.springframework.web.SimpLogging : Processing MESSAGE <span class="hljs-attribute">destination</span>=/topic/messages <span class="hljs-attribute">session</span>=bw6hxi0f payload=&#123;<span class="hljs-string">&quot;from&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>:<span class="hljs-string">&quot;aaaa&quot;</span>,<span class="hljs-string">&quot;time&quot;</span>:<span class="hljs-string">&quot;15:47&quot;</span>&#125;<br><br>2021-06-04 15:47:57.492 <span class="hljs-built_in">DEBUG</span> 15378 --- [boundChannel-37] org.springframework.web.SimpLogging : Broadcasting <span class="hljs-keyword">to</span> 1 sessions.<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>network</tag>
      
      <tag>spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cryptographical Cheatsheet</title>
    <link href="/2021/2021-03-06-cryptographical-cheatsheet/"/>
    <url>/2021/2021-03-06-cryptographical-cheatsheet/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="https://www.cryptosys.net/pki/rsakeyformats.html">reference</a><br><a href="https://serverfault.com/questions/9708/what-is-a-pem-file-and-how-does-it-differ-from-other-openssl-generated-key-file">SOF</a></p><h2 id="ASN-1"><a href="#ASN-1" class="headerlink" title="ASN.1"></a>ASN.1</h2><p>An abstract notion language that can be used to describe protocols. For instance, the code below is simplest sample to define a protocol called Foo<br>We use ASN.1 language to do protocol definition as it provide enough abstraction over different protocols. </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">FooProtocol DEFINITIONS ::= <span class="hljs-keyword">BEGIN</span><br><br>    FooQuestion ::= <span class="hljs-keyword">SEQUENCE</span> &#123;<br>        trackingNumber <span class="hljs-type">INTEGER</span>,<br>        question       IA5String<br>    &#125;<br><br>    FooAnswer ::= <span class="hljs-keyword">SEQUENCE</span> &#123;<br>        questionNumber <span class="hljs-type">INTEGER</span>,<br>        answer         <span class="hljs-type">BOOLEAN</span><br>    &#125;<br><br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><h2 id="encoding-rule"><a href="#encoding-rule" class="headerlink" title="encoding rule"></a>encoding rule</h2><p>Nothing but just to define how the actual data is encoded. It is super easy to understand when refer to JSON or XML format in the context of HTTP.<br>Similar to that, BER is the binary way of encoding, but it extract the field name into octlet, very similar to <code>gRPC</code> .</p><ol><li>Binary  <ol><li>BER  </li><li>DER  </li><li>CER</li></ol></li><li>Text  <ol><li>XER  </li><li>ASCII  </li><li>JSON</li><li>PEM</li></ol></li></ol><h3 id="Public-key-formats-supported"><a href="#Public-key-formats-supported" class="headerlink" title="Public key formats supported"></a>Public key formats supported</h3><ul><li>PKCS#1 RSAPublicKey* (PEM header:  <code>BEGIN RSA PUBLIC KEY</code>)</li><li>X.509 SubjectPublicKeyInfo** (PEM header:  <code>BEGIN PUBLIC KEY</code>)</li><li>XML  <code>&lt;RSAKeyValue&gt;</code></li></ul><h3 id="Encrypted-private-key-formats-supported"><a href="#Encrypted-private-key-formats-supported" class="headerlink" title="Encrypted private key formats supported"></a>Encrypted private key formats supported</h3><ul><li>PKCS#8 EncryptedPrivateKeyInfo** (PEM header:  <code>BEGIN ENCRYPTED PRIVATE KEY</code>)</li><li>PKCS#12 (PFX) with PKCS-8ShroudedKeyBag</li></ul><h3 id="Private-key-formats-supported-unencrypted"><a href="#Private-key-formats-supported-unencrypted" class="headerlink" title="Private key formats supported (unencrypted)"></a>Private key formats supported (unencrypted)</h3><ul><li>PKCS#1 RSAPrivateKey** (PEM header:  <code>BEGIN RSA PRIVATE KEY</code>)</li><li>PKCS#8 PrivateKeyInfo* (PEM header:  <code>BEGIN PRIVATE KEY</code>)</li><li>XML  <code>&lt;RSAKeyPair&gt;</code>  and  <code>&lt;RSAKeyValue&gt;</code></li><li>JSON Web Key (JWK) Plaintext RSA Private Key  <code>&quot;kty&quot;:&quot;RSA&quot;</code></li></ul><h2 id="PKCS"><a href="#PKCS" class="headerlink" title="PKCS"></a>PKCS</h2><p>Is a group of public key cryptography standard by RSA Security LLC. Its full name is <code>public key cryptography standards</code>  </p><table><thead><tr><th>document</th><th>explain</th><th>note</th></tr></thead><tbody><tr><td>1</td><td>1Define mathematical property and format of RSA key pair in ASN.1text. Basic algorithm and encoding methods for RSA encryption&#x2F;decryption.</td><td></td></tr><tr><td>2</td><td>RSA encryption for message digest</td><td>merge to #1</td></tr><tr><td>3</td><td>Protocol for 2 sides to establish shared secret key over insecured channel without knowing each other ahead of time</td><td>Diffie–Hellman Key Agreement Standard</td></tr><tr><td>4</td><td>RSA key syntax</td><td>merge to #1</td></tr><tr><td>5</td><td>password based encryption standard</td><td></td></tr><tr><td>6</td><td>obsolete</td><td></td></tr><tr><td>7</td><td>sign &amp; encrypt message through PKI. Also to spread certificate</td><td></td></tr><tr><td>8</td><td>private certificate key pair, both encrypt or unencrypt</td><td></td></tr><tr><td>9</td><td>define selected attribute types in 6, 7, 8, 10</td><td></td></tr><tr><td>10</td><td>request certificate for a public key from CA</td><td></td></tr><tr><td>11</td><td>cryptographic token interface</td><td></td></tr><tr><td>12</td><td>private key with pubic key certificate, protected by password encrypted by symmetric key</td><td></td></tr><tr><td>13</td><td>Elliptic-curve cryptography Standard</td><td></td></tr><tr><td>14</td><td>Pseudo-random Number Generation</td><td></td></tr><tr><td>15</td><td>allow bearer of cryptographic token to identify themselves</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>security</tag>
      
      <tag>openssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Italiano Possessives</title>
    <link href="/2021/2021-01-08-italiano-possessives/"/>
    <url>/2021/2021-01-08-italiano-possessives/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><table><thead><tr><th>possession</th><th>MS</th><th>FS</th><th>MP</th><th>FP</th></tr></thead><tbody><tr><td>My&#x2F;Mine</td><td>il mio</td><td>la mia</td><td>i miei</td><td>le mie</td></tr><tr><td>Your&#x2F;Yours</td><td>il tuo</td><td>la tua</td><td>i tuoi</td><td>le tue</td></tr><tr><td>His&#x2F;Hers&#x2F;Its</td><td>il suo</td><td>la sua</td><td>i suoi</td><td>le sue</td></tr><tr><td>Our&#x2F;Ours</td><td>il nostro</td><td>la nostra</td><td>i nostri</td><td>le nostre</td></tr><tr><td>Your&#x2F;Yours all</td><td>il vostro</td><td>la vostra</td><td>i vostri</td><td>le vostre</td></tr><tr><td>Their&#x2F;Theirs</td><td>il loro</td><td>la loro</td><td>i loro</td><td>le loro</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Italiano Question</title>
    <link href="/2021/2021-01-08-italiano-question/"/>
    <url>/2021/2021-01-08-italiano-question/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="https://www.theitalianexperiment.com/learn-italian/question-words">origin</a></p><table><thead><tr><th>english</th><th>italiano</th></tr></thead><tbody><tr><td>where</td><td>dove</td></tr><tr><td>when</td><td>quando</td></tr><tr><td>how</td><td>come</td></tr><tr><td>which</td><td>quale</td></tr><tr><td>what</td><td>cosa</td></tr><tr><td>who</td><td>chi</td></tr><tr><td>why</td><td>perchè</td></tr></tbody></table><hr><table><thead><tr><th>english</th><th>italiano</th></tr></thead><tbody><tr><td>how tall</td><td>quanto</td></tr><tr><td>how much</td><td>quanta</td></tr><tr><td>how many (count noun)</td><td>quanti</td></tr><tr><td>how many (mass noun)</td><td>quante</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
      <tag>italian</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Computational Complexity Analysis</title>
    <link href="/2020/2020-08-16-computational-complexity-analysis/"/>
    <url>/2020/2020-08-16-computational-complexity-analysis/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script><script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script><h2 id="problem"><a href="#problem" class="headerlink" title="problem"></a>problem</h2><p>大千世界,问题千万.<br>世间的一切都可以是我们的问题:</p><ol><li>天上有没有神仙</li><li>地下有没有地府</li><li>明天会不会下雨</li><li>考试会不会及格</li><li>那个妹子会不会接受我</li><li>这个数组的最大值是不是42</li><li>那个数组的从小到大的排序结果是不是1,2,3,4,5</li></ol><p>诸如此类的问题我们都可以称之为问题.<br>可以看出我们的问题都是有一个特定的问法</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">就是指某个事件<span class="hljs-regexp">/事物是否符合/</span>满足一个特定的预期?<br></code></pre></td></tr></table></figure><p>像这样的问题我们称之为<code>决定性问题/是非问题</code>(<code>decisive problem</code>),答案只有两种可能性,要么是<code>真/是/true</code>的,要么是<code>假/非/false</code>的</p><h2 id="多项式时间"><a href="#多项式时间" class="headerlink" title="多项式时间"></a>多项式时间</h2><p>指时间复杂度用函数表示形如以下公式所表示:</p><p>$$an^x + bn^{x-1} + cn ^{x-2}… + z n + C$$</p><p>在这里定义</p><ol><li>$a,b,c,…,z,C, x$都是常数, $x$是指数</li><li>$n$是自变量,是数据的规模</li></ol><p>对于以上定义,如果一个算法的时间复杂度明确到具体的参数 $a,b,c,…,z,C,x$, 只要以这个形式表达出来,那么就可以说这个算法的时间复杂度取最高次项,可以写作<br>$$O(n^x)$$</p><p>对于任意一个算法,只要某个算法A的时间复杂度小于等于这个值,就可以称这个算法A的时间复杂度在<code>多项式时间之内</code><br>例如快排$O(nlogn)$, 顶堆取极值$O(1)$, 遍历一个数组$O(n)$,统统都属于<code>多项式时间之内</code>这个定义.</p><p>最后我们认为,如果一个<code>操作</code>可以在<code>多项式时间</code>之内完成,我们将认定这个<code>操作</code>是<code>简单</code>的操作.在这里,这个<code>操作</code>可以是任何定义.</p><h2 id="complexity-class"><a href="#complexity-class" class="headerlink" title="complexity class"></a>complexity class</h2><p>复杂度分类是特指算法复杂度的分类,大体上分为两大类,一个是$x$,另一个$Nx$. 这里的x代表的是不同的复杂度,N代表的是非确定性, 例如P 和 NP,   exp和Nexp, 甚至 fac和Nfac等等</p><p>在算法教学中,我们一般都是用P和NP作为举例,其他复杂度其实也是类似,只不过教学过程中不太用得到,因为复杂度实在是太高,人类比较难以想象,很难举出例子.甚至NP的例子在NPC的情况下就已经非常难以理解了,具体NPC是什么我们下面也会讲解.</p><ol><li>$x$是指在$x$的时间复杂度内存在一个算法能够<code>解决</code>这个问题,具体我们会在下面用P来举例</li><li>$Nx$是指在$x$的时间复杂度内存在一个算法能够<code>验证</code>这个问题,具体我们也会在下面用NP来举例</li></ol><p>下面我们以P作为例子来进行具体的讲解.</p><h3 id="P-class"><a href="#P-class" class="headerlink" title="P class"></a>P class</h3><p><code>polynomial time</code>, 指存在一个算法能在<code>多项式时间</code>之内解决<br>所谓的<code>解决</code>是指,对于一个问题的任何<code>设置</code>,总能在规定的时间范围内找到答案,在P问题的定义下当然就变成了在<code>多项式时间</code>内找到问题的解.</p><h4 id="例题-1"><a href="#例题-1" class="headerlink" title="例题 1"></a>例题 1</h4><p>对于一个数组<code>[3,1,2,5]</code>, 请问这个数组的最大值是否是$5$?</p><p>注意我们的题目全都是<code>是非/决定性问题</code>.<br>对于这个问题,我们只需要把数组进行遍历,每次记录当前已知的最大值$max$,如果遍历过程中发现当前元素比目前已知的最大值要大则更新当前最大值$max$.<br>非常容易看出,只需要$O(4)$(4为问题中数组的元素个数)的时间我们就能找到问题的解.对于这个问题,我们发现数组的最大值是$5$,正好符合题目中的预期,因此问题的结果为<code>真/true</code></p><p>我们也可以延伸扩展这个问题到更加通用的一个问题,即: 给定一个长度为n数组A, 请问其中的最大值是否为$x$?<br>我们可以用同样的算法,对这个通用的问题进行解答,从而获得问题的<code>真假性</code>. 我们发现对于任意一个符合条件的这样的问题,我们都可以在$O(n)$时间内找到问题的解.<br>因此我们说,这样的问题可以在<code>多项式时间</code>内得到解决,因此这样的问题是属于P类问题.</p><p>事实上我们可以直接把这个问题归结为”在数组中找最大值”的问题这样更好理解,但由于要符合问题的通用性,我在这里并没有直接这么说.</p><h4 id="例题-2"><a href="#例题-2" class="headerlink" title="例题 2"></a>例题 2</h4><p>对于一个连通图$G$,请问他的最小生成树(MST)的总权值是否小于等于$x$?</p><p>与上一个不同,这个例题我直接把问题的抽象形式写了出来,这样一是鼓励大家进行抽象思考,第二是图论问题要用文字简洁的写出来还是有点麻烦的,所以就偷了点懒.</p><p>对于这个问题来说,我们只需要找到这个$G$的MST, 无论是使用prim还是kruskal算法,然后将MST的权值加起来,和$x$进行比较即可.得到的答案就是我们的最终<code>是非</code>结果.</p><p>例如按照prim算法的性能最差为:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">O</span><span class="hljs-params">(VlogV + ElogV)</span></span> = <span class="hljs-built_in">O</span>(ElogV)<br></code></pre></td></tr></table></figure><p>可以近似的看成 $n(log n)$, 因此这个问题的求解时间也是在<code>多项式时间</code>之内.故而我们称,求解G内MST权值和的问题也是属于P类的.</p><p>有一点要注意,对于P类问题来说,我们的最终解可以是真也可以是假,一切都要根据具体的题目和问题来进行回答.即使在规定时间内只能回答出假,由于这个是题目的条件约束导致的,并不会影响我们对于这个题目时间复杂度的判定标准.</p><h3 id="NP-class"><a href="#NP-class" class="headerlink" title="NP class"></a>NP class</h3><p>全称为<code>nondeterministic polynomial time</code>. 具体是指,对于某一个问题,我不知道这个问题能不能在多少时间内<code>解决</code>, 但我知道,如果给我一个答案(<code>certificate/proof</code>),我可以在<code>多项式时间</code>内去<code>验证</code>这个答案的<code>真伪性</code>(<code>true/false</code>).可以注意这个答案的真假性和决定性问题(<code>decisive problem</code>)的真假性并不是完全一致. </p><ul><li><code>决定性问题</code>的真假性是指决定性问题本身的假设和设问的结果是否为真</li><li>验证NP<code>答案</code>的真假性是指将给定的答案(<code>certificate/proof</code>)代入源问题中,如果用源问题的假设我们发现给定的答案可以满足源问题的设问,则认为该答案是<code>真</code>的,否则是<code>假</code>的. 具体我们会在后面给出举例.</li></ul><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h4><p>给定一个图G,求图中<code>是否</code>存在一个path,能够形成一个<code>TSP</code>.</p><p>为了能找到一个NP问题,我们直接用经典的TSP作为例子.简单说一下什么是TSP.<br>TSP是指在一个图中(我们不知道它的连通性,回环性等等),从某一个点出发,是否存在一条通路p,能够<code>不重复</code>,<code>不遗漏</code>地走过每一个节点,并且最后能够回到一开始的起点.</p><p>从这个问题的面书上我们就可以感觉问题的复杂度,这个问题乍一看就让人感觉不是很简单,似乎找不到一个<code>简单的</code>算法能够<code>快速地</code>计算出问题的解.我的意思是指,如果我们遍历所有可能的路径,应该总能找到问题一个结果:</p><ol><li>如果遍历所有路径之后依然没有找到符合条件的路径,我们则认为这个图G不存在这样的TSP</li><li>如果遍历的过程中我们找到了一条路径,只要有一条路径,我们就判定这个图G存在一个TSP的解</li></ol><p>实际上遍历一个<code>无向连通图</code>的时间复杂度为$O(V + E) \leq O(2V)$, ,而这仅仅是最最简单的图的时间复杂度,那么对于有向图,非连通图来说,遍历的时间复杂度则更加诡异. 更不用提这个时间复杂度仅仅是简简单单的的遍历而已,要说组成一个<code>不重复</code>,<code>不遗漏</code>的路径则需要更加高的时间复杂度. 目前科学界对这个问题的时间复杂度定义还没有一个准确的定论,因此解决这个问题似乎成了一个非常复杂的事情</p><p>因此,我们很难下定论说可以在多少时间内解决这个问题,更不用提<code>多项式时间</code>了,那么我们可以说这个问题有可能不是P问题.<br>但是,如果有一个算法之神从天而降,告诉我们某个具体的图G的TSP是这样这样那样那样的,给我们一个答案路径$p$,写在草稿纸上,然后拂袖离去.我们当然可以惊异于这个神奇的天神下凡,也可以把他给我们的答案去验证一下(难道只有理工男才有这样神奇的思维吗?).</p><p>我们如获至宝的拿着这个草稿纸,尝试去验证一下天神给我们的答案. 事实上验证这个答案的正确性似乎不是很难, 我们只需要:</p><ol><li>确定这个答案$p$的所有点V和边E和我们原题的设定是完全符合的,没有作弊和更改题目的存在</li><li>验证这个答案是否是不重复,不遗漏地走过每一个点</li><li>最后这个路径会会到起点,形成一个闭合的路径</li></ol><p>验证了以上步骤以后如果所有步骤都是真实无疑的,我们可以感谢一下算法之神天神下凡之举,感叹一下大佬果然是大佬.</p><p>那么有没有可能大佬给的答案是错误的呢?或者这个大佬根本就是一个装模作样的大佬,他可能是一个平时神神叨叨的脑瘫,看到我们每天琢磨算法心里非常鄙视,因此随便给我们一个答案来恶心我们一下.这个情况当然也是可能的,因此无论是天神下凡还是脑瘫秀智商,我们都要以严谨的态度以符合题目逻辑的方式去验证问题.<br>如果问题可以在<code>多项式时间</code>完成验证,并证明这个答案是真的,则我们认为这个问题是NP的<br>另一方面,如果问题尽管在<code>多项式时间</code>可以跑完验证的流程,如果验证出来结果是错的,则我们无法判定该问题是否是NP的,我们需要继续用其他的答案进行同样的验证,直到我们找到一个能验证为真的答案为止.<br>那么是否存在一些问题,这种问题无论你用什么答案去验证,都无法得到<code>真</code>的回答呢?  当然有可能,我们称这种问题为Yes instance,更数学的定义如下:</p><p>定义一个问题 $\phi$是一个题目逻辑,包含了问题的逻辑和设问, 对于这个问题我们有问题的假设$x$和问题的正确解$y$</p><ol><li>$(\exists y \rightarrow \phi(x, y) &#x3D; 1)\Rightarrow$ x是问题的$\phi$的一个yes instance</li><li>$(\forall y \rightarrow \phi(x, y) &#x3D; 0)\Rightarrow$ x是问题的$\phi$的一个no instance</li></ol><h4 id="例题2"><a href="#例题2" class="headerlink" title="例题2"></a>例题2</h4><p>给定一个布尔表达式, $x \cap y \cup z$, 当$x,y,z$取什么值的时候使得该布尔表达式为真</p><p>可以非常直观的看出, 以上的具体题目非常简单,只需要让z取true的时候,x和y任意取值都能使整个表达式为真.<br>但事实上如果将表达式泛化后则会得到一个极其复杂的问题:</p><blockquote><p>定义语句, 为若干布尔自变量$X_i$通过$\cup$,$\neg$和<code>()</code>这几个操作符进行计算.<br>定义表达式,将若干语句通过$\cap$进行合并<br>给定一个布尔表达式,以及一系列自变量输入参数$X_i$, 如何设置这些布尔自变量才能使得该表达式为真?</p></blockquote><p>事实上我们并没有一个简单的算法来计算出这些输入值,值得该表达式为真.唯一的办法就是遍历所有可能性来尝试所有布尔表达式的组合.因此该计算的算法复杂度为$O(2^n)$</p><p>但是,如果有人能给我们一个答案,写明所有的布尔值排布.我们就可以把这些输入值代入到表达式中,能够非常简单的遍历整个表达式并计算出最终结果.整个过程大概就是$O(n)$的复杂度</p><p>总结来说,NP类问题就是,在P时间内可以根据给定的答案来验证源问题是否为真的 那一类问题.<br>需要强调的是NP问题和P问题并不是互斥的,一个问题需要P时间来验证也可以在P时间内得到解决.如果满足后者条件则我们直接称该问题为P问题而不会在说它是NP问题,因此对P问题的优先级会比NP问题更高一点.<br>同时我们也可以感觉到,如果一个问题是P问题,那么似乎这个问题比那些NP问题是要难一点的,更复杂一点,好像一般都要难解一点.然而我们也并没有证据证明NP问题一定要比P问题难或者一样难,这就引出了一个世纪大难题<br>$$<br>P &#x3D; NP ?<br>$$<br>关于这个问题的具体讨论本文不会多说,有兴趣可以查看其它网上资源</p><h2 id="Reduction"><a href="#Reduction" class="headerlink" title="Reduction"></a>Reduction</h2><p>说完了P和NP那么我们要研究的问题主体就已经讨论完毕了,接下来讨论一个衍生的问题.<br>在说明具体的定义之前让我们来一起看看一个具体的例子:</p><ol><li>在数组<code>[1,3,5,2,4]</code>中最小是为1</li><li>在数组<code>[1,3,5,2,4]</code>中,升序排序的结果为<code>[1,2,3,4,5]</code></li></ol><p>第一个问题是在一个数组中找到最小值,第二个问题是对数组排序.显而易见的是,第二个问题要比第一个问题更复杂一点点,因为第一个问题复杂度为$O(n)$而第二个问题是$O(nlogn)$.<br>而事实上,我们可以通过解决第二个问题来间接解决第一个问题,我们只需要对数组进行排序,自然就能找到数组中的最小值.尽管通过这种方式我们花费了更多时间去解决了一个原本可以更轻松解决的问题,看似是非常愚蠢的行为,但值得一提的是,我们不需要再为第一个问题写一个专用的算法.只需要利用第二个问题的算法,将该算法包装为一个黑盒,通过将对应的输入喂给这个黑盒,并从黑盒中取出对应的结果,并抽取数组的第一个元素就能得到我们第一个问题的答案了.</p><p>这就是所谓的泛用化,或者也有翻译称为归约.主要方法为:</p><ol><li>有一个目标问题A,这个问题是你想要解决的问题,这个问题的算法&#x2F;解法未知</li><li>已知一个问题B以及这个问题的算法.需要强调的是这个问题比A更加复杂</li><li>存在一个<code>简单的</code>方法可以把问题A的输入和输出转化为问题B的输入和输出</li><li>通过将问题A的输入转化为问题B的输入,利用问题B的算法得出B的解,最后将这个解转化为问题A的解</li></ol><p>通过以上这些方法我们可以合理利用一个已知的,更复杂的问题的算法&#x2F;解法,通过输入输出的对应映射,和对算法解法的调用,成功解出目标问题的答案.<br>可以想象目标问题应该是更简单的,而已知的问题往往是更复杂的.<br>利用这种特性我们就可以通过利用复杂问题B的解法来解答所有的简单问题A.这些简单问题A们需要符合一个条件</p><blockquote><p>这些A们和B的输入输出之间存在<code>简单的</code>映射方式,</p></blockquote><p>$$<br>B_i &#x3D; f(A_i), B_o &#x3D; g(A_o)<br>$$</p><p>再次强调一遍,这个映射方式必须是<code>简单的</code>,换言之,必须要在<code>多项式时间</code>之内完成这一转换</p><p>值得一提的是,在讨论这一过程的时候我们往往不会在乎复杂问题更消耗时间这一事情,因为我们往往会认为通过优化算法,使得算法更贴近问题的现实才是学习算法分析的意义所在.而在讨论归约这个题目时,我们要暂时将这一执念抛在脑后.我们要解决的是一个更加宏伟的问题,即<del>心安理得的偷懒</del> 将问题的解法泛用化,找到一切问题的根本所在. 听起来有点哲♂学,有点抽象,但还是很有意思的.</p><p>说了这么多关于归约&#x2F;泛化的例子和概念,让我们一起复习一下它的基本需求</p><ol><li>存在一个更复杂的问题B的解法</li><li>想要解出一个更简单的问题A</li><li>简单问题A和复杂问题B之间存在某种输入和输出的的映射关系,这个映射操作可以在<code>多项式时间</code>内完成</li></ol><p>只要符合以上三个条件我们就说, A可以归约化为B,B的复杂度至少和A一样高,也有可能比A复杂得多得多<br>$$A \preccurlyeq_p B$$</p><p>那么我们就会开始想象,有没有这样一种问题B,所有的问题(特指P和NP类的问题),都能归约到这个牛逼的究极问题B. 只要我们解出了这个究极问题,我们就能解决世界上的所有<code>decisive problem</code>. </p><h3 id="NPC-complete-class"><a href="#NPC-complete-class" class="headerlink" title="NPC(complete) class"></a>NPC(complete) class</h3><p>由此我们引出了一个新的复杂度类别<code>NP完全</code>.一个问题要被称为NPC问题需要符合以下几个条件</p><ol><li>必须是一个NP问题</li><li>必须必所有NP问题都要复杂,难</li><li>所以其他问题都能归约成这个问题</li></ol><p>NPC问题和NP并没有太大的差别,他依然可以在<code>多项式时间</code>内得到验证,并且很有可能没有一个简单的算法能的他的解.<br>但这个NPC是如此的泛用,以至于我们可以用这些的问题的算法来通用的解决所有其他的NP问题.<br>你可能会非常好奇,还有这种好事?那这种问题应该不存在的吧,如果存在的话那这个世界上应该就没有问题了吧?</p><p>由于归约的过程是难度增高的过程,因此想要得到一个NPC问题,我们只有两个途径:</p><ol><li>将世界上<code>所有</code>的问题都进行归约,到一个终极问题上去</li><li>已知一个NPC问题,我们只需要将这个NPC问题归约到另一个问题,那么我们就能找到另一个NPC问题</li></ol><p>非常显然的是如果已经有了一个NPC的情况下,再产生一个新的NPC是简单不少的,那么如果没有第一个NPC问题,我们这个逻辑就不可能形成闭环,那么第一个NPC到底存在吗?<br>其实NPC问题早就已经被证明存在并有了好几个具体的例子.要感谢<code>Levin-cook theorem</code>,使他们两个人的努力让数学和计算机的世界有了第一个NPC问题,从此其他问题都能归约化成这个第一个NPC问题,而这个NPC问题甚至还能继续归约成其他更加复杂的问题.</p><p>第一个NPC问题就是著名的<code>Circuit Satisfiability</code> 问题,称为电路问题, 简称CSAT问题或者C问题.总体来说就是给定很多电路门有<code>与</code>,<code>或</code>,<code>非</code>等等.每个电路门有1个或2个输入电线和一个输出电线,通过各种拼贴和组合,组成一个庞大的电路.这个电路必然会有最外面的两排电线,一个是输入线口,我们可以在这里输入电平;一个是输出线口,我们可以在这里接收到整个电路最终的输出电平.<br>较为具体的定义如下:</p><blockquote><p>定义组件, 为若干<code>或</code>门和<code>非</code>门进行组合.他们的输入线作为输出,他们的输出线作为输出<br>定义电路板,位若干组件通过<code>与</code>门进行组合.所有的组件通过拼贴搭线组合在一起,最终会形成一个输出电线<br>给定一个电路板,以及一系列输入电线头, 如何设置电线头的电平可以使得整个电路板最终的那一根输出电线可以输出高电平,或者说输出1</p></blockquote><p>具体的证明过程由于过于复杂在此不会给出,但我们可以大致想象一下,我们的电脑就是用电路组成的,所以能用电路表示出来的问题也一定会被电路解决,而电路逻辑的本质就是与或非门之间的组合.</p><p>另外我们也可以发现,这个定义和上面NP问题中的<code>布尔表达式</code>问题几乎一模一样,只是有些语言上的不同.<br>事实上你的观察确实没错,布尔表达式是一种更高更复杂的电路问题,被称为<code>Satisfiability</code>问题,简称<code>SAT</code>问题或者S问题.<br>毕竟电路的本质就是与或非逻辑,而布尔逻辑是一种比电门逻辑更纯粹更抽象的存在,更复杂更高级.</p><p>最后值得一提的是,所有的NPC问题由于比其他NP问题都要复杂,我们也可以称这些问题属于NPH(hard)问题,毕竟他们是更难的嘛</p><h4 id="NPH-hard-class"><a href="#NPH-hard-class" class="headerlink" title="NPH(hard) class"></a>NPH(hard) class</h4><p>说到最后一种复杂度分类,就是大名鼎鼎的<code>NP难</code>问题了,NPH问题要符合以下条件</p><blockquote><ol><li>比所有NP其他问题都难</li></ol></blockquote><p>对就这一条就已经足够了, 我们知道NPC问题也算是NPH问题,而NPH却不用必须是NP问题,因此那个著名的复杂度分类图中可以看到NPH问题有一部分在NP的圆圈中,而其他大部分都是在NP问题之外的,在此我们也不再详谈, 因为上面提到过的 exp, Nexp, fac, Nfac问题也在这一问题之列.</p><p>我们只需要知道,这个问题 非常难就是了</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>写这篇总结的原因在于,我妹子在学习计算原理相关的知识.这方面的知识其实我在本科只是听过,并没有深入好好的学过,导致现在居然没有办法帮助到她.故而深入查了点资料总结一下,也算是对自己算法分析知识的一个总结.<br>在花了点时间总结以后发现,其实这些复杂度分类也没有那么复杂,有些概念比较抽象,但其实也不难理解.<br>几年前在知乎也查过类似的信息,但很多都是片段式的,举一个不太恰当的例子就回答完毕了,个人感觉还是有点片面,故而总结了一下,在这里分享给大家.</p><p>如果有不够准确的地方也欢迎提出指正.</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GPG fail to sign</title>
    <link href="/2020/2020-06-09-gpg-fail-to-sign/"/>
    <url>/2020/2020-06-09-gpg-fail-to-sign/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>On Mac, if you use gpg for git signature generation, you will be getting <code>fail to sign</code> if you need passphrase.<br>This is because git shell does not prompt you to type passphrase, but since gpg needs passphrase, it fails there.  </p><p>The solution will be installing <code>pinentry-mac</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># Instnall pinentry-mac</span><br>brew install pinentry-mac<br><span class="hljs-comment"># Configure git global gpg program</span><br>git config --global gpg.program gpg<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;pinentry-program /usr/local/bin/pinentry-mac&quot;</span> &gt;&gt; ~/.gnupg/gpg-agent.conf<br><span class="hljs-comment"># Must restart gpg-agent</span><br>gpgconf --<span class="hljs-built_in">kill</span> gpg-agent<br>gpg-agent --daemon<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
      <tag>gpg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>File Descriptor VS Socket</title>
    <link href="/2020/2020-04-29-file-descriptor-vs-socket/"/>
    <url>/2020/2020-04-29-file-descriptor-vs-socket/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="file-descriptor"><a href="#file-descriptor" class="headerlink" title="file descriptor"></a>file descriptor</h2><p>FD is the ultimate abstraction of any sort of resources in Linux system.<br>This is to generalize all operations to all kinds device&#x2F;file etc.,</p><p>With it, regular device, file, socket, pipe etc., can all be treated equally. So that we don’t have to have type specific interface to deal each type respectively.</p><p>Process can interact with fd, read&#x2F;write to fd. So we can think of FD is a tray, or a book to contain data.</p><h2 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h2><p>Socket is interface to communicate with another process, either locally or remotely. socket is like a telephone or pipe, through which both process can talk to each other.  </p><p>The network communication has to go through socket and a binded port.<br>A binded port is required for remote process to locate on network.<br>The actual read and write still have to go through FD, this means we need to bind FD with socket as well. That is why socket has to be created with FD by <code>socket</code> system call.</p><p>So in all, the actual data still go through fd, but this fd is binded with socket, and socket is binded with port, so that the data can transmitted to network through read&#x2F;write to fd.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mainboard Communication Protocal</title>
    <link href="/2020/2020-04-08-mainboard-communication-protocal/"/>
    <url>/2020/2020-04-08-mainboard-communication-protocal/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Interface-Slot"><a href="#Interface-Slot" class="headerlink" title="Interface&#x2F;Slot"></a>Interface&#x2F;Slot</h1><h3 id="PATA"><a href="#PATA" class="headerlink" title="PATA"></a>PATA</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d1/IDE_Connectors_in_PCChips_M925LR_Pentium_4.jpg/800px-IDE_Connectors_in_PCChips_M925LR_Pentium_4.jpg" alt="pata slot"></p><h3 id="SATA-mSATA"><a href="#SATA-mSATA" class="headerlink" title="SATA, mSATA"></a>SATA, mSATA</h3><p><img src="https://i.stack.imgur.com/nXAha.jpg" alt="sata"></p><p><img src="https://4.bp.blogspot.com/-cmuw0ohRNZI/VuFlzzzrM8I/AAAAAAAAb6Q/x-hxGd9ujE8/s1600/sata-slot-motherboard.jpg" alt="SATA"><br><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/MSATA_SSD_vs._2.5%22_SATA_drive.JPG/1024px-MSATA_SSD_vs._2.5%22_SATA_drive.JPG" alt="mSATA"></p><h3 id="M-2"><a href="#M-2" class="headerlink" title="M.2"></a>M.2</h3><p><img src="https://www.silverstonetek.com/images/products/sdp12/sdp12-6.jpg" alt="M.2"></p><h3 id="PCI-E"><a href="#PCI-E" class="headerlink" title="PCI-E"></a>PCI-E</h3><p><img src="https://adexel.verio.com/pexp-sx-la.jpg" alt="pcie"></p><h1 id="Bus-Line"><a href="#Bus-Line" class="headerlink" title="Bus&#x2F;Line"></a>Bus&#x2F;Line</h1><h3 id="PATA-1"><a href="#PATA-1" class="headerlink" title="PATA"></a>PATA</h3><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c4/Ata_20070127_002.jpg/1200px-Ata_20070127_002.jpg" alt="pata"></p><h3 id="SATA3"><a href="#SATA3" class="headerlink" title="SATA3"></a>SATA3</h3><p><img src="https://c1.neweggimages.com/ProductImage/12-119-229-S01.jpg" alt="sata3"></p><h3 id="PCI-E-1"><a href="#PCI-E-1" class="headerlink" title="PCI-E"></a>PCI-E</h3><p><img src="https://c1.neweggimages.com/ProductImage/12-423-259-Z01.jpg" alt="pcie"></p><h1 id="Driver-software"><a href="#Driver-software" class="headerlink" title="Driver software"></a>Driver software</h1><h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><p>The very old one, supports mostly PATA</p><h3 id="AHCI"><a href="#AHCI" class="headerlink" title="AHCI"></a>AHCI</h3><p>Technology after <code>IDE</code> supports mostly <code>HD</code> and <code>SSD</code>, but it is designed to fit <code>HD</code> better, with only 1 queue available, each queue with 32 commands</p><h3 id="NVMe"><a href="#NVMe" class="headerlink" title="NVMe"></a>NVMe</h3><p>Technology after <code>AHCI</code>, not many devices are supported. Mostly <code>SSD</code>. With 64K queue available, each queue with 64K commands</p><h3 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h3><p>Technology designed for Redundency and Fault Tolerance requirement.</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hardware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Italiano Ingredient</title>
    <link href="/2020/2020-03-15-italiano-ingredient/"/>
    <url>/2020/2020-03-15-italiano-ingredient/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Italian has three ways to express the presence of an ingredient in the name of a dish:</p><h2 id="Dish-di-ingredient"><a href="#Dish-di-ingredient" class="headerlink" title="Dish  di  ingredient"></a>Dish  <code>di</code>  ingredient</h2><p>the ingredient is the <code>main or only</code> component of the dish.<br>e.g. “succo di limone” (lemon juice).<br>In this case the article is never used before the ingredient.</p><h2 id="Dish-con-ingredient"><a href="#Dish-con-ingredient" class="headerlink" title="Dish  con  ingredient"></a>Dish  <code>con</code>  ingredient</h2><p>the ingredient is a <code>visible component</code> of the dish or used as garnish<br>e.g. “fragole con panna” (strawberries with cream).<br>In this case a definite article can be used before the ingredient.</p><h2 id="Dish-a-ingredient"><a href="#Dish-a-ingredient" class="headerlink" title="Dish  a ingredient"></a>Dish  <code>a</code> ingredient</h2><p>the dish has been <code>flavored</code> with the ingredient, or tastes like the ingredient<br>e.g. “gelato al cioccolato” (chocolate ice cream).<br>In this case the definite article is mandatory before the ingredient, forming an articulated preposition with  <em>a</em>.</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java NIO Asynchronous</title>
    <link href="/2020/2020-03-08-java-nio-asynchronous/"/>
    <url>/2020/2020-03-08-java-nio-asynchronous/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>NIO also provisions asynchronous channel as well.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Path</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> Paths.get(<span class="hljs-string">&quot;README.md&quot;</span>);<br><span class="hljs-comment">// this will create asynchronous enabled channel</span><br><span class="hljs-comment">// other channel like Socket also has this feature</span><br><span class="hljs-type">AsynchronousFileChannel</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> AsynchronousFileChannel.open(path, StandardOpenOption.READ);<br></code></pre></td></tr></table></figure><h2 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// we read and write data like this, but they return Future object instead</span><br>Future&lt;Integer&gt; operation = fileChannel.read(buffer, <span class="hljs-number">0</span>);<br>Future&lt;Integer&gt; operation = fileChannel.write(buffer, position);<br><span class="hljs-comment">// then we poke around to see if this operation is completed</span><br><span class="hljs-keyword">while</span>(!operation.isDone());<br></code></pre></td></tr></table></figure><h2 id="CompletionHandler"><a href="#CompletionHandler" class="headerlink" title="CompletionHandler"></a>CompletionHandler</h2><p>Same usage as <code>comparator</code>, simply use <code>CompletionHandler</code> to deal with read and write operation.<br>Upon read&#x2F;write completion, the <code>completed</code> method will be invoked.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//</span><br><span class="hljs-comment">// read</span><br><span class="hljs-comment">//</span><br>c.read(buffer, position, buffer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, ByteBuffer attachment)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<br>     attachment.flip();<br>     <span class="hljs-type">byte</span>[] data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[attachment.limit()];<br>     attachment.get(data);<br>     System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(data));<br>     attachment.clear();<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, ByteBuffer attachment)</span> &#123;&#125;<br>&#125;);<br><span class="hljs-comment">//</span><br><span class="hljs-comment">// write</span><br><span class="hljs-comment">//</span><br>c.write(buffer, position, buffer, <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompletionHandler</span>&lt;Integer, ByteBuffer&gt;() &#123;<br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">completed</span><span class="hljs-params">(Integer result, ByteBuffer attachment)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;bytes written: &quot;</span> + result);<br>  &#125;<br><br>  <span class="hljs-meta">@Override</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">failed</span><span class="hljs-params">(Throwable exc, ByteBuffer attachment)</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;Write failed&quot;</span>);<br>    exc.printStackTrace();<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java NIO Byte Buffer</title>
    <link href="/2020/2020-03-08-java-nio-byte-buffer/"/>
    <url>/2020/2020-03-08-java-nio-byte-buffer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Buffer is an encapsulation for array of bytes. This class provisions some useful methods to read&#x2F;write data, and switch between read and write.</p><h2 id="indicators"><a href="#indicators" class="headerlink" title="indicators"></a>indicators</h2><p>The Buffer class has a <code>byte[]</code> inside to store actual data in byte format. There are several indices used to indicate possible read&#x2F;write position. In all there are 4 variables, <code>mark</code>, <code>position</code>, <code>limit</code> and <code>capacity</code><br>The relative relationship between them are:</p><blockquote><p>0 &lt;&#x3D; mark &lt;&#x3D; position &lt;&#x3D; limit &lt;&#x3D; capacity</p></blockquote><h3 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a>capacity</h3><p>It is the length of byte array, unchangeable at all.</p><h3 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h3><p>It is soft length of byte array. Meaning it is the length of byte that can read&#x2F;write. Any data that beyond this limit is not readable&#x2F;writeable.</p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>It is the current location of data to read&#x2F;write</p><h3 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h3><p>Just an interesting point where you may want to revisit after.</p><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><p>The basic usage is to instantiate a buffer by</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">64</span>);<br></code></pre></td></tr></table></figure><h3 id="write-into-buffer"><a href="#write-into-buffer" class="headerlink" title="write into buffer"></a>write into buffer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// this will reset `position` to 0 and limit to capacity</span><br><span class="hljs-comment">// so as to allow write as many as the capacity is</span><br>b.clear();<br><span class="hljs-comment">// this will write so many byte array into the buffer b</span><br>b.put(<span class="hljs-string">&quot;Rugal Bernstein&quot;</span>.getBytes());<br></code></pre></td></tr></table></figure><h3 id="read-from-buffer"><a href="#read-from-buffer" class="headerlink" title="read from buffer"></a>read from buffer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// once done writing, we have to switch into read mode</span><br><span class="hljs-comment">// by simply using `flip` method</span><br><span class="hljs-comment">// it will reset the `position` as 0</span><br>b.flip();<br><span class="hljs-comment">// ask how many byte we still have between `position` and `limit`</span><br><span class="hljs-keyword">while</span>(b.hasRemaining())&#123;<br>  <span class="hljs-comment">// the `position` increment every time we use `get`</span><br>  System.out.print((<span class="hljs-type">char</span>) b.get());<br>  <span class="hljs-comment">// the loop exits when last byte is `got` from </span><br>&#125;<br><span class="hljs-comment">//&gt; Rugal Bernstein</span><br></code></pre></td></tr></table></figure><p>That is the usage of buffer, remember you must switch between <code>read</code> and <code>write</code> mode by using <code>flip</code> method, otherwise you will not be able to get what you want. </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java NIO Channel</title>
    <link href="/2020/2020-03-08-java-nio-channel/"/>
    <url>/2020/2020-03-08-java-nio-channel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><code>Channel</code> is a <code>stream</code> kind of representation in <code>NIO</code>. It is a representation of hardware, file, network device or other program.</p><p>There are several different channel that loads data differently.</p><ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul><p>Unlike stream object, which can only input or output one at a time.   A single Channel object can do both read and write simutanously.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span> (<span class="hljs-type">RandomAccessFile</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomAccessFile</span>(<span class="hljs-string">&quot;data.md&quot;</span>, <span class="hljs-string">&quot;rw&quot;</span>);<br>     <span class="hljs-type">FileChannel</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> file.getChannel()) &#123;<br>  <span class="hljs-keyword">final</span> <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">64</span>);<br>  b.clear();<br>  System.out.println(<span class="hljs-string">&quot;Read &quot;</span> + c.read(b));<br>  b.flip();<br>  System.out.println(<span class="hljs-string">&quot;Write &quot;</span> + c.write(b));<br>&#125;<br></code></pre></td></tr></table></figure><p>From the snippet above, we can tell that a single channel object can do both read and write.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java NIO Pipe</title>
    <link href="/2020/2020-03-08-java-nio-pipe/"/>
    <url>/2020/2020-03-08-java-nio-pipe/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Pipe is another channel used for communicate between threads.<br>It has 2 ends, <code>source</code> for read only, and <code>sink</code> for write only.</p><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><p>Simply use <code>open</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Pipe</span> <span class="hljs-variable">pipe</span> <span class="hljs-operator">=</span> Pipe.open();<br></code></pre></td></tr></table></figure><h2 id="Write"><a href="#Write" class="headerlink" title="Write"></a>Write</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get the sink/write end of pipe</span><br>Pipe.<span class="hljs-type">SinkChannel</span> <span class="hljs-variable">sink</span> <span class="hljs-operator">=</span> pipe.sink();<br><span class="hljs-type">String</span> <span class="hljs-variable">newData</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Rugal Bernstein:&quot;</span> + System.currentTimeMillis();<br><br><span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">buf</span> <span class="hljs-operator">=</span> ByteBuffer.allocate(<span class="hljs-number">48</span>);<br>buf.clear();<br>buf.put(newData.getBytes());<br>buf.flip();<br><br><span class="hljs-keyword">while</span> (buf.hasRemaining()) &#123;<br>  <span class="hljs-comment">// same as other channel, just write to it</span><br>  sink.write(buf);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// get source/read end of pipe</span><br>Pipe.<span class="hljs-type">SourceChannel</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> pipe.source();<br>buf.clear();<br><span class="hljs-comment">// same as other channel, simply read it into byte buffer</span><br>source.read(buf);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf.array()));<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java NIO Selector</title>
    <link href="/2020/2020-03-08-java-nio-selector/"/>
    <url>/2020/2020-03-08-java-nio-selector/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Selector is a mutiplexer.<br>Basically aggregate multiple channel into one bundle so we don’t have to switch between different thread. By doing so, we can use one thread to handle multiple channel.</p><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p>Seems like there is only one way to create selector.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">final</span> <span class="hljs-type">Selector</span> <span class="hljs-variable">selector</span> <span class="hljs-operator">=</span> Selector.open();<br></code></pre></td></tr></table></figure><h2 id="register-channel"><a href="#register-channel" class="headerlink" title="register channel"></a>register channel</h2><p>Each channel must register to selector is order to subscribe to coming event.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// channel must be configured as unblocking</span><br><span class="hljs-comment">// thus FileChannel can not be registered is selector</span><br>channel.configureBlocking(<span class="hljs-literal">false</span>);<br>channel.register(selector, SelectionKey.OP_ACCEPT);<br></code></pre></td></tr></table></figure><p>The second parameter is <code>interest operations</code>, which is a list of operations that this channel is interested in.</p><ol><li><code>SelectionKey.OP_CONNECT</code><br>As a client, waiting for server to accept my connection request</li><li><code>SelectionKey.OP_ACCEPT</code><br>As a server, waiting for client connection request</li><li><code>SelectionKey.OP_READ</code><br>Waiting for data reading</li><li><code>SelectionKey.OP_WRITE</code><br>Waiting for data writing</li></ol><p>These <code>interest operations</code> are just integer number, so they can be combined using bitwise operator like <code>A|B</code>, to indicate multiple interests for single channel.</p><h2 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h2><p>Now that we have channel registered, let us waiting for incoming request.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// this will block current thread until at least one channel is ready</span><br><span class="hljs-comment">// it return an integer to indicate the number of channel that is ready</span><br><span class="hljs-comment">// `select` will only return those that are ready between last and this `select` call</span><br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> selector.select();<br></code></pre></td></tr></table></figure><h2 id="get-inbound"><a href="#get-inbound" class="headerlink" title="get inbound"></a>get inbound</h2><p>Then we need to know which exact channel get ready.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// `selectedKeys` to get a list of ready channel, we call it `selectedKey`</span><br><span class="hljs-keyword">for</span> (SelectionKey key : selector.selectedKeys()) &#123;<br><span class="hljs-comment">// `selectedKey` contains a lot of objects inside.</span><br><span class="hljs-comment">// including, the corresponding channel, selector and its interest operations</span><br>  <span class="hljs-keyword">if</span> (key.isAcceptable()) &#123;<br>    <span class="hljs-comment">// process channel that listen to SelectionKey.OP_ACCEPT</span><br>    <span class="hljs-comment">// which is incoming client connection request</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (key.isReadable()) &#123;<br>    <span class="hljs-comment">// process channel that listen to SelectionKey.OP_READ</span><br>    <span class="hljs-comment">// which is incoming request to read</span><br>  &#125;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="close-channel"><a href="#close-channel" class="headerlink" title="close channel"></a>close channel</h2><p>When want to close channel connection, we may use <code>cancel</code> or <code>close</code><br>This will deregister itself from channel as well.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">key.cancel();<br><span class="hljs-comment">//or</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">SocketChannel</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> (SocketChannel) key.channel();<br>client.close();<br></code></pre></td></tr></table></figure><h2 id="close-selector"><a href="#close-selector" class="headerlink" title="close selector"></a>close selector</h2><p>Shutdown entire selector by closing it.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">selector.close();<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>nio</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Synchronization Method Summary</title>
    <link href="/2020/2020-02-04-synchronization-method-summary/"/>
    <url>/2020/2020-02-04-synchronization-method-summary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I would like to write this document to sort and clarify some misunderstanding of synchronization method of me.<br>Throughout the development of computer science and engineering, synchronization is an extremely important way to control the behavior for multi-thread or multi-process program.<br>But there are too many confusing exist:</p><ol><li>different blog use slightly different terminology to describe the same object</li><li>different terminology used also in various of environment in order to depict some object as well</li></ol><p>From all the different definition, here I pick 4 names in for clarification purpose. </p><h2 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h2><p><code>mutex</code> is short name for <code>mutual exclusive</code>.<br>From the name, mutex prevents more than one access(process&#x2F;thread) to a resource at the same time.<br>One must obtain the mutex in order to enter the critical section, and free the mutex after exiting the critical section. Any other access to the mutex will be blocked right before the critical section and keep waiting there until mutex is freed from the owner.<br>Once the mutex is freed, it will be allocated to a random access which is queued right defore critical section.</p><p>The classic usage for <code>mutex</code> is to limit access to a counter variable so that, amongst all accesses, only one access can update the value of this counter.</p><h2 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h2><p>semaphore stands for <code>signal</code>, similar to <code>mutex</code>, semaphore also used to control the access to a shared resource.<br>But semaphore allows N access to enter critical section simutanously. You may think of semaphore as N <code>mutex</code> as a whole.<br>While accessing resource, we use operation <code>p</code> to try to get 1 semaphore, we may get the access right away if there is enough signal, otherwise we will be blocked just like <code>mutex</code>. Once we got the access and enter critical section, the number of N will decrease by 1. All subsequence accesses will be blocked if N is less than 1.<br>When done with the resource, we need to use operation <code>v</code> to release&#x2F;free it, and the number of N will increase by 1.</p><p>A classic scenario of <code>semaphore</code> is <code>philosopher chopsticks problem</code>, while multiple accesses consume fixed number of shared resources. This may cause deadlock problem if we do not design the solution properly even if we use <code>semaphore</code>. Some good strategies do exist with <code>semaphore</code> are there to prevent deadlock with the sacrifice of performance.</p><h2 id="monitor"><a href="#monitor" class="headerlink" title="monitor"></a>monitor</h2><p><code>monitor</code> is quite different from the 2 methods above, sometimes also called <code>condition variable</code>.<br>monitor method usually has 2 operations, <code>wait</code> and <code>signal</code>.<br><code>wait</code> operation blocks current access.<br><code>signal</code> operation wakes up one access in the waiting queue to enter critical section.</p><p>monitor is suitable for collaberative scenario, like consumer and producer, where some producer create resources for consumers if there is not enough resource, and consumer destroy the resources if there is enough.</p><h2 id="lock"><a href="#lock" class="headerlink" title="lock"></a>lock</h2><p>Amongst all synchronization methods here, the above 3 methods are pretty low leveled, mostly in system programing in C&#x2F;C++ with process or thread level operations.  I did not mention anything like operating system and language because I do not want to be stucked in particular environment and scenario. But still, I need to emphasis that <code>lock</code> is relatively high level operation.</p><p>When you see <code>lock</code> it sometimes represents <code>synchronization method</code> in general, including <code>mutex</code> <code>semaphore</code> and <code>monitor</code>.<br>But here I use <code>lock</code> to represent a specific conception, which is mostly used to limit the access to resource as well. Sounds very similar to the <code>mutex</code> right? But <code>lock</code> is used mostly in database for instance, like read&#x2F;write lock, so that only a limited number of access will get read&#x2F;write database table.  </p><p>Various databases have different implementation and granularity for <code>lock</code>, but overall, most databases have read and write lock for table respectively.<br>Read lock does not prevent other read only access, but stop write operation. So with read lock, multiple access can read only same table&#x2F;resource at the same time.<br>Write lock will block any other read and write operation to the table&#x2F;resource until it is done, very much like a <code>mutex</code>.  </p><p>These locks are to ensure the integrity of table data.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Learning Kubernetes</title>
    <link href="/2019/2019-09-11-learning-kubernetes/"/>
    <url>/2019/2019-09-11-learning-kubernetes/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h1><h2 id="master"><a href="#master" class="headerlink" title="master"></a>master</h2><p>Control panel of the entire cluster.</p><h3 id="kube-apiserver"><a href="#kube-apiserver" class="headerlink" title="kube-apiserver"></a>kube-apiserver</h3><p>Expose API for control panel.</p><h3 id="etcd"><a href="#etcd" class="headerlink" title="etcd"></a>etcd</h3><p>Key-Value store for all cluster data.</p><h3 id="kube-scheduler"><a href="#kube-scheduler" class="headerlink" title="kube-scheduler"></a>kube-scheduler</h3><p>Watch newly created pods and assign node to run.</p><h3 id="kube-controller-manager"><a href="#kube-controller-manager" class="headerlink" title="kube-controller-manager"></a>kube-controller-manager</h3><p>Each controller is logically separated into different process but they are actually combined into single process from single binary.</p><ol><li>Node controller: Detect node status</li><li>Replication Controller: Maintain correct number of pods based on replication</li><li>Endpoint Controller: Provide endpoint object: Services, Pods</li><li>Account &amp; Token Controller: create default account &amp; access token for new namespace</li></ol><h3 id="cloud-controller-manager"><a href="#cloud-controller-manager" class="headerlink" title="cloud-controller-manager"></a>cloud-controller-manager</h3><p>Interact with underlying cloud providers.</p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>Maintain running pods and provide Kubernetes runtime environment.</p><h3 id="kubelet"><a href="#kubelet" class="headerlink" title="kubelet"></a>kubelet</h3><p>Run on each node in cluster.<br>Make sure containers are running in a pod. It takes a set of PodSpecs, then ensure the containers are aligned with it.<br>It doesnot bmanage containers which were not created by Kubernetes.</p><h3 id="kube-proxy"><a href="#kube-proxy" class="headerlink" title="kube-proxy"></a>kube-proxy</h3><p>It is a network proxy that runs on each node.<br>Maintain network rules on nodes, allow network communication to your Pods IN&#x2F;OUT of your cluster.<br>It uses either operating system packet filtering layer or forward the traffic itself.</p><h3 id="Container-Runtime"><a href="#Container-Runtime" class="headerlink" title="Container Runtime"></a>Container Runtime</h3><p>Kubernetes support several containers:</p><ol><li>Docker</li><li>Containerd</li><li>cri-o</li><li>rktlet</li></ol><h1 id="Kubernetes-Objects"><a href="#Kubernetes-Objects" class="headerlink" title="Kubernetes Objects"></a>Kubernetes Objects</h1><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>The basic building block and deployable object in Kubernetes object model.<br>Pod encapsulates an application container, storage, unique network IP, configuration that define the way container runs.<br>Pod represents a unit of <code>deployment</code>.</p><p>Pod can be run in both single and multiple container.</p><h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>An abstract way to expose application as network service. Application runs on top of a set of pods.<br>With it, application can use the native discovery mechanism, with their own IP and single DNS name, also with load balance across a set of pods.</p><h3 id="Volumn"><a href="#Volumn" class="headerlink" title="Volumn"></a>Volumn</h3><p>Disk files in container are not persistant, which means files will lose once kubelet restarts container. Container also might want to share file with others.<br>Volume solves these requirements.</p><h3 id="Namespace"><a href="#Namespace" class="headerlink" title="Namespace"></a>Namespace</h3><p>Term used for grouping multiple virtual cluster based on same physical cluster.</p><h3 id="ReplicaSet"><a href="#ReplicaSet" class="headerlink" title="ReplicaSet"></a>ReplicaSet</h3><p>Maintain a set of replica pods running at any give time. Often used to guarantee the availability of identical pods.</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>Provides declarative configuration for <code>Pod</code> and <code>ReplicaSet</code>, so that you don’t have to manually update the number. Simply set the desired state and <code>deployment</code> do control over change for you.</p><h3 id="StatefulSet"><a href="#StatefulSet" class="headerlink" title="StatefulSet"></a>StatefulSet</h3><p>Manage the deployment and scaling of pods. Guarantee the order and uniqueness of these pods, with declarative configuration.<br>This suites will for:</p><ol><li>stable unique network identifier</li><li>stable persistent storage</li><li>ordered graceful deployment and scaling</li><li>ordered, automated rolling updates</li></ol><h3 id="DaemonSet"><a href="#DaemonSet" class="headerlink" title="DaemonSet"></a>DaemonSet</h3><p>Ensure nodes run a copy of a Pod, so as to guarantee pod exists in configured nodes.</p><h3 id="Job"><a href="#Job" class="headerlink" title="Job"></a>Job</h3><p>It creates some pods, finishs their commands and guarantees they successfully terminate.<br>This is useful when you want to run some on-fly tasks.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
      <tag>kubernetes</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Machine Learning Notation</title>
    <link href="/2019/2019-08-15-machine-learning-notation/"/>
    <url>/2019/2019-08-15-machine-learning-notation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script><script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script><table><thead><tr><th>Notation</th><th>Note</th></tr></thead><tbody><tr><td>$X^{(i)}$</td><td>No. i training set</td></tr><tr><td>$X^{[i]}$</td><td>No. i layer of neuron</td></tr><tr><td>$X^{ \{ i \}   }$</td><td>No. i mini batch</td></tr><tr><td>$X_{i}$</td><td>No. i feature</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A Hundred Ways to Forget You</title>
    <link href="/2019/2019-08-12-a-hundred-ways-to-forget-you/"/>
    <url>/2019/2019-08-12-a-hundred-ways-to-forget-you/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>认真计算你出现轨迹 只为不相遇<br>关掉一切消息去远行 就算是逃避<br>精心编织每一种滤镜 让我讨厌你<br>我怕未来憧憬装满你 也怕没有你   </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs">一百个不喜欢你的方法   <br>我不知如何表达   <br>可是在天平那边   <br>只要一种   <br>最简单的喜欢   <br>就能轻易独占宇宙   <br>我要怎么 才能放下   <br>一百个方法 不喜欢的方法   <br>如果偷走 我的喜欢   <br>就请你保留 在我想你的时候   <br></code></pre></td></tr></table></figure><p>如果幸福仅是我幻境 该不该暂停<br>潜入梦境删掉了回忆 偏又太清醒   </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs">一百个不喜欢你的方法 我不知如何表达   <br>可是在天平那边 只要一种   <br>最简单的喜欢 就能轻易独占宇宙   <br>我要怎么 才能放下   <br>一百个方法 不喜欢的方法   <br>如果偷走 我的喜欢   <br>就请你保留 在我想你的时候   <br>一百个不喜欢你的方法 我不知如何表达   <br>可是在天平那边 只要一种   <br>最简单的喜欢 就能轻易独占宇宙   <br>我要怎么 才能放下   <br>一百个方法 不喜欢的方法   <br>如果偷走 我的喜欢   <br>就请你保留 在我想你的时候   <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>music</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Create VPN in GCP</title>
    <link href="/2019/2019-06-2-create-vpn-in-gcp/"/>
    <url>/2019/2019-06-2-create-vpn-in-gcp/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Given that we have a GCP account, now let’s start creating VPN in GCP.  </p><h2 id="Create-Project"><a href="#Create-Project" class="headerlink" title="Create Project"></a>Create Project</h2><p><img src="https://i.postimg.cc/SssS4KQ4/create-project.png" alt="create-project"></p><h2 id="Create-VM-in-Compute-Engine"><a href="#Create-VM-in-Compute-Engine" class="headerlink" title="Create VM in Compute Engine"></a>Create VM in Compute Engine</h2><p><img src="https://i.postimg.cc/FFwLTMGz/create-vm.png" alt="create-vm"><br><img src="https://i.postimg.cc/SKtsJ9vR/vm-specification.png" alt="vm-specification">  </p><p>Because VPN doesn’t require too much hardware, the machine should just use the very basic one. So as to make it cheaper.      </p><h2 id="Create-ShadowSocksR-Server"><a href="#Create-ShadowSocksR-Server" class="headerlink" title="Create ShadowSocksR Server"></a>Create ShadowSocksR Server</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># run this command</span><br>curl -O https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh | sudo bash<br></code></pre></td></tr></table></figure><p>Then you should have parameters for configuring the shadow socks R.<br>Eventually you will get: </p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Congratulations, ShadowsocksR server install completed!<br>Your Server IP        :  xx.xxx.xxx.xx <br>Your Server Port      :  <span class="hljs-number">12180</span> <br>Your Password         :  PASSWORD <br>Your Protocol         :  auth_chain_a <br>Your obfs             :  plain <br>Your Encryption <span class="hljs-keyword">Method</span>:  aes-<span class="hljs-number">256</span>-cfb <br><br>Your QR Code: (<span class="hljs-keyword">For</span> ShadowsocksR Windows, Android clients only)<br> ssr:<span class="hljs-comment">//MzUuMjI5LjMxLjE0OjEyMTgwOmF1dGhfY2hhaWabcTphZXMtMjU2LWNmYjpwbGFpbjpVblZuWVd4emMzSXJNWE0vP29iZnNwYXJhbT0= </span><br>Your QR Code <span class="hljs-keyword">has</span> been saved <span class="hljs-keyword">as</span> a PNG file path:<br> /home/gcp/shadowsocks_r_qr.png <br></code></pre></td></tr></table></figure><h2 id="Create-firewall-rule"><a href="#Create-firewall-rule" class="headerlink" title="Create firewall rule"></a>Create firewall rule</h2><p><img src="https://i.postimg.cc/c4M5ZBvR/firewall-rule.png" alt="firewall-rule"></p><p>To allow traffic to shadow socks server, we should open the firewall for the server port.<br>Here,  you should have the port comes from shadow socks configuration to TCP protocol.  </p><p><img src="https://i.postimg.cc/s21nYFwm/allowall.png" alt="allowall">  </p><h1 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h1><p>Then import the server configuration by copying the ssr URL, you should be able to use that now!  </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
      <tag>docker</tag>
      
      <tag>gcp</tag>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL vs NoSQL</title>
    <link href="/2019/2019-05-06-sql-vs-nosql/"/>
    <url>/2019/2019-05-06-sql-vs-nosql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="https://www.sitepoint.com/sql-vs-nosql-differences/">origin</a></p><h2 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h2><h3 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a>SQL</h3><p>Has to define schema before using it.</p><ol><li>Primary Key</li><li>Relation</li><li>Index</li><li>Trigger</li><li>Store Procedure</li><li>Constrain</li></ol><p>This makes the SQL very stable but not easy to change. Whenever you change, you need to incorporate with other data.</p><h3 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>There is no specific schema has to define before hand. You can change it at any time.<br>This make NoSQL very flexible but the structure might vary. Don’t expect all object are the same.</p><h2 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h2><h3 id="SQL-1"><a href="#SQL-1" class="headerlink" title="SQL"></a>SQL</h3><p>Always normalize the table so as to avoid redundancy and inconsistency.</p><h3 id="NoSQL-1"><a href="#NoSQL-1" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>You can do normalization as well, but this is not very practical. Most time just store the entire complete object into NoSQL.</p><h2 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h2><h3 id="SQL-2"><a href="#SQL-2" class="headerlink" title="SQL"></a>SQL</h3><p>Very powerful and flexible join clause to enable complex query against many tables</p><h3 id="NoSQL-2"><a href="#NoSQL-2" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>There is no such thing as join. Developer needs to get all data of one collection, and search for their specific predicate to get another collection.</p><h2 id="Data-Integrity"><a href="#Data-Integrity" class="headerlink" title="Data Integrity"></a>Data Integrity</h2><h3 id="SQL-3"><a href="#SQL-3" class="headerlink" title="SQL"></a>SQL</h3><p>Can control or refrain developer from mistakenly operating the data by imposing constrains &amp; checks.</p><h3 id="NoSQL-3"><a href="#NoSQL-3" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>Not available</p><h2 id="Transaction"><a href="#Transaction" class="headerlink" title="Transaction"></a>Transaction</h2><h3 id="SQL-4"><a href="#SQL-4" class="headerlink" title="SQL"></a>SQL</h3><p>Use <code>transaction</code> to ensure many SQL statements to be executed or failed as one entity to ensure consistency.</p><h3 id="NoSQL-4"><a href="#NoSQL-4" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>Generally not available, but some can provide transaction-like operation, but still not as good as SQL, must be done by ourselves.</p><h2 id="Syntax"><a href="#Syntax" class="headerlink" title="Syntax"></a>Syntax</h2><h3 id="SQL-5"><a href="#SQL-5" class="headerlink" title="SQL"></a>SQL</h3><p>T-SQL standardized</p><h3 id="NoSQL-5"><a href="#NoSQL-5" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>No standardization yet. Different NoSQL has different syntax, but most of them are very intuitive.</p><h2 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h2><h3 id="SQL-6"><a href="#SQL-6" class="headerlink" title="SQL"></a>SQL</h3><p>Has to consider constrains and relationships, usually not good enough, but not always the case. Depending on the schema design.</p><h3 id="NoSQL-6"><a href="#NoSQL-6" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>Does not have to consider so many rules, just process the data by object. Usually performant</p><h2 id="Scalability"><a href="#Scalability" class="headerlink" title="Scalability"></a>Scalability</h2><h3 id="SQL-7"><a href="#SQL-7" class="headerlink" title="SQL"></a>SQL</h3><p>Not easy, because of the distribution of related data. Many databases are not designed that way at the first place. But recent evolution makes it possible to do clustering, even this is not easy.</p><h3 id="NoSQL-7"><a href="#NoSQL-7" class="headerlink" title="NoSQL"></a>NoSQL</h3><p>Most of NoSQL can do scalability in easy way as they are design in this way at the first place.</p><h1 id="Ideality"><a href="#Ideality" class="headerlink" title="Ideality"></a>Ideality</h1><h3 id="SQL-8"><a href="#SQL-8" class="headerlink" title="SQL"></a>SQL</h3><ul><li>logical related discrete data requirements which can be identified up-front</li><li>data integrity is essential</li><li>standards-based proven technology with good developer experience and support.</li></ul><h3 id="NoSQL-8"><a href="#NoSQL-8" class="headerlink" title="NoSQL"></a>NoSQL</h3><ul><li>unrelated, indeterminate or evolving data requirements</li><li>simpler or looser project objectives, able to start coding immediately</li><li>speed and scalability is imperative.</li></ul>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cut command tutorial</title>
    <link href="/2019/2019-05-05-cut-command-tutorial/"/>
    <url>/2019/2019-05-05-cut-command-tutorial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cut</span> OPTION... [FILE]...<br></code></pre></td></tr></table></figure><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pf">$ cat <span class="hljs-keyword">state</span>.txt<br>Andhra Pradesh<br>Arunachal Pradesh<br>Assam<br>Bihar<br>Chhattisgarh<br></code></pre></td></tr></table></figure><h2 id="b"><a href="#b" class="headerlink" title="-b"></a>-b</h2><p>extract single character</p><h3 id="one-character"><a href="#one-character" class="headerlink" title="one character"></a>one character</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cut</span> -b 1,2,3 state.txt<br>And<br>Aru<br>Ass<br>Bih<br>Chh<br></code></pre></td></tr></table></figure><h3 id="consecutive-string"><a href="#consecutive-string" class="headerlink" title="consecutive string"></a>consecutive string</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cut</span> -b 1-3,5-7 state.txt<br>Andra<br>Aruach<br>Assm<br>Bihr<br>Chhtti<br></code></pre></td></tr></table></figure><h2 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h2><p>cut by column</p><h3 id="cut-by-one-column"><a href="#cut-by-one-column" class="headerlink" title="cut by one column"></a>cut by one column</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cut</span> -c 2,5,7 state.txt<br>nr<br>rah<br>sm<br>ir<br>hti<br></code></pre></td></tr></table></figure><h3 id="by-consecutive-column"><a href="#by-consecutive-column" class="headerlink" title="by consecutive column"></a>by consecutive column</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cut</span> -c 1-7 state.txt<br>Andhra<br>Arunach<br>Assam<br>Bihar<br>Chhatti<br></code></pre></td></tr></table></figure><h2 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h2><p>cut by delimiter</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot; &quot;</span> -f 1 state.txt<br>Andhra<br>Arunachal<br>Assam<br>Bihar<br>Chhattisgarh<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cut</span> -d <span class="hljs-string">&quot; &quot;</span> -f 1,2 state.txt --output-delimiter=<span class="hljs-string">&#x27;%&#x27;</span><br>Andhra%Pradesh<br>Arunachal%Pradesh<br>Assam<br>Bihar<br>Chhattisgarh<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>RDBMS Join Comparison</title>
    <link href="/2019/2019-05-02-rdbms-join-comparison/"/>
    <url>/2019/2019-05-02-rdbms-join-comparison/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Inner-Join"><a href="#Inner-Join" class="headerlink" title="Inner Join"></a>Inner Join</h1><h2 id="Natural-Join"><a href="#Natural-Join" class="headerlink" title="Natural Join"></a><code>Natural</code> Join</h2><p>Automatically join tables by their column name.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> registration <br><span class="hljs-keyword">natural</span> <span class="hljs-keyword">join</span> course<br></code></pre></td></tr></table></figure><h2 id="Normal-Join"><a href="#Normal-Join" class="headerlink" title="Normal Join"></a>Normal Join</h2><p>manually specify the column name to join</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> registration r<br>[<span class="hljs-keyword">inner</span>] <span class="hljs-keyword">join</span> course c<br><span class="hljs-keyword">on</span>  (r.cid <span class="hljs-operator">=</span> c.cid);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> registration r, course c<br><span class="hljs-keyword">where</span>  r.cid <span class="hljs-operator">=</span> c.cid;<br></code></pre></td></tr></table></figure><h1 id="Outer-Join"><a href="#Outer-Join" class="headerlink" title="Outer Join"></a>Outer Join</h1><h2 id="Left-out-join"><a href="#Left-out-join" class="headerlink" title="Left out join"></a>Left out join</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student s<br><span class="hljs-keyword">left</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> registration r<br><span class="hljs-keyword">on</span>  (r.sid <span class="hljs-operator">=</span> s.sid);<br></code></pre></td></tr></table></figure><h2 id="Right-out-join"><a href="#Right-out-join" class="headerlink" title="Right out join"></a>Right out join</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student s<br><span class="hljs-keyword">right</span> [<span class="hljs-keyword">outer</span>] <span class="hljs-keyword">join</span> registration r<br><span class="hljs-keyword">on</span>  (r.sid <span class="hljs-operator">=</span> s.sid);<br></code></pre></td></tr></table></figure><h2 id="Full-outer-join"><a href="#Full-outer-join" class="headerlink" title="Full outer join"></a>Full outer join</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> student s <br><span class="hljs-keyword">full</span> <span class="hljs-keyword">outer</span> <span class="hljs-keyword">join</span> registration r<br><span class="hljs-keyword">on</span>  r.sid <span class="hljs-operator">=</span> s.sid;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Scalable System</title>
    <link href="/2019/2019-05-01-scalable-system/"/>
    <url>/2019/2019-05-01-scalable-system/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Clone"><a href="#Clone" class="headerlink" title="Clone"></a><a href="https://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones">Clone</a></h2><p>Use load balance to distribute user request.</p><p>Every server contains exactly the same codebase and does not store any user-related data, like sessions or profile pictures, on local disc or memory.</p><p>Sessions need to be stored in a centralized data store which is accessible to all your application servers, like Redis.</p><p>Also requires a great way to clone the deployment to different server. Nowadays we can use Openshift <code>deployment</code>.</p><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a><a href="https://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database">Database</a></h2><h3 id="Centralize-and-Normalize-Data-with-RDBMS"><a href="#Centralize-and-Normalize-Data-with-RDBMS" class="headerlink" title="Centralize and Normalize Data with RDBMS"></a>Centralize and Normalize Data with RDBMS</h3><p>Use Master-Slaver to separate the read and write operations. keep adding more memory into server. Unscalable, </p><h3 id="Decentralize-Denormalize-and-Sharding-with-NoSQL-RDBMS"><a href="#Decentralize-Denormalize-and-Sharding-with-NoSQL-RDBMS" class="headerlink" title="Decentralize, Denormalize and Sharding with NoSQL&#x2F;RDBMS"></a>Decentralize, Denormalize and Sharding with NoSQL&#x2F;RDBMS</h3><p>Scalable because of asking your app do the dataset-joins.<br>But database requests will again be slower and slower.</p><h2 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a><a href="https://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache">Cache</a></h2><p>With “cache” I always mean in-memory caches like Memcached or Redis.<br>Please never do file-based caching, it makes cloning and auto-scaling of your servers just a pain. </p><h3 id="Cache-Database-Query-Result"><a href="#Cache-Database-Query-Result" class="headerlink" title="Cache Database Query Result"></a>Cache Database Query Result</h3><p>Basically store the query result into cache with hashed SQL text as key. </p><p>It is hard to delete a cached result when you cache a complex query (who has not?).<br>When one piece of data changes (for example a table cell) you need to delete all cached queries who may include that table cell.</p><h3 id="Cache-Object"><a href="#Cache-Object" class="headerlink" title="Cache Object"></a>Cache Object</h3><p>Let your class assemble a dataset from your database and then store the complete instance of the class or the assembled dataset in the cache.</p><p>It makes asynchronous processing possible.</p><h2 id="Asynchronism"><a href="#Asynchronism" class="headerlink" title="Asynchronism"></a><a href="https://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism">Asynchronism</a></h2><h3 id="Proactive"><a href="#Proactive" class="headerlink" title="Proactive"></a>Proactive</h3><p>Prepare the content and cache them ahead of time so that the service is more performant. Handle them over to cloud would make them even super responsive.</p><h3 id="Process-Notify"><a href="#Process-Notify" class="headerlink" title="Process &amp; Notify"></a>Process &amp; Notify</h3><p>Request be processed at backend when not keeping customer waiting. Service will notify customer once the process is done.<br>Incorporating queuing and messaging technology benefit this process more smoothly. Basically all jobs&#x2F;tasks are put in the queue waiting for the processor to pick them up. Once the process is done, the result will be placed into messaging queue and notify customer about it.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>system</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sort command tutorial</title>
    <link href="/2019/2019-04-24-sort-command-tutorial/"/>
    <url>/2019/2019-04-24-sort-command-tutorial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> [_OPTION_]... [_FILE_]...  <br><span class="hljs-built_in">sort</span> [_OPTION_]... _--files0-from=F_<br></code></pre></td></tr></table></figure><h2 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h2><table><thead><tr><th>option</th><th>description</th></tr></thead><tbody><tr><td>-k</td><td>sort by particular column</td></tr><tr><td>-b</td><td>Ignores leading blanks.</td></tr><tr><td>-d</td><td>Considers only blanks and alphanumeric characters.</td></tr><tr><td>-f</td><td>Fold lower case to upper case characters.</td></tr><tr><td>-g</td><td>Compares according to general numerical value.</td></tr><tr><td>-i</td><td>Considers only printable characters.</td></tr><tr><td>-M</td><td>Compares (unknown) &lt; ‘JAN’ &lt; … &lt; ‘DEC’.</td></tr><tr><td>-h</td><td>Compare human readable numbers (e.g., 2K 1G).</td></tr><tr><td>-n</td><td>Compares according to string numerical value.</td></tr><tr><td>-R</td><td>Shuffles, but groups identical keys. See also: <a href="https://en.wikipedia.org/wiki/Shuf">shuf</a></td></tr><tr><td>-r</td><td>Reverses the result of comparisons.</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tr command tutorial</title>
    <link href="/2019/2019-04-07-tr-command-tutorial/"/>
    <url>/2019/2019-04-07-tr-command-tutorial/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tr</span> [OPTION] SET1 [SET2]<br></code></pre></td></tr></table></figure><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> content | <span class="hljs-built_in">tr</span> “[:lower:]” “[:upper:]”<br></code></pre></td></tr></table></figure><h2 id="c"><a href="#c" class="headerlink" title="-c"></a>-c</h2><p>complements the set of characters in string.i.e., operations apply to characters not in the given set  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;my ID is 73535&quot;</span> | <span class="hljs-built_in">tr</span> -<span class="hljs-built_in">cd</span> [:digit:]<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">73535<br></code></pre></td></tr></table></figure><h2 id="d"><a href="#d" class="headerlink" title="-d"></a>-d</h2><p>delete characters in the first set from the output.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Welcome To GeeksforGeeks&quot;</span> | <span class="hljs-built_in">tr</span> -d <span class="hljs-string">&#x27;w&#x27;</span><br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">elcome <span class="hljs-keyword">To</span> GeeksforGeeks<br></code></pre></td></tr></table></figure><h2 id="s"><a href="#s" class="headerlink" title="-s"></a>-s</h2><p>replaces repeated characters listed in the set1 with single occurrence  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;Welcome    To    GeeksforGeeks&quot;</span> | <span class="hljs-built_in">tr</span> -s [:space:] <span class="hljs-string">&#x27; &#x27;</span><br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">Welcome <span class="hljs-keyword">To</span> GeeksforGeeks<br></code></pre></td></tr></table></figure><h2 id="t"><a href="#t" class="headerlink" title="-t"></a>-t</h2><p>first truncates set1 to the length of set2, then do replacement</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;the cellar is the safest place&#x27;</span> | <span class="hljs-built_in">tr</span> -t abcdefghijklmn 123<br></code></pre></td></tr></table></figure><p>output</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">the</span> <span class="hljs-number">3</span>ell1r is <span class="hljs-keyword">the</span> s1fest pl13e<br></code></pre></td></tr></table></figure><p>without <code>-t</code>, character in <code>set1</code> that is after set2 will repeat the last character in <code>set1</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">t33</span> <span class="hljs-number">33331</span>r <span class="hljs-number">3</span>s t33 s133st p3133<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Subset &amp; Permutation</title>
    <link href="/2019/2019-03-13-subset-permutation/"/>
    <url>/2019/2019-03-13-subset-permutation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Subset-without-duplication"><a href="#Subset-without-duplication" class="headerlink" title="Subset without duplication"></a>Subset without duplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/subsets/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsets</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Arrays.sort(nums);<br>    backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; list , List&lt;Integer&gt; tempList, <span class="hljs-type">int</span> [] nums, <span class="hljs-type">int</span> start)</span>&#123;<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; nums.length; i++)&#123;<br>        tempList.add(nums[i]);<br>        backtrack(list, tempList, nums, i + <span class="hljs-number">1</span>);<br>        tempList.remove(tempList.size() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Subset-with-duplication"><a href="#Subset-with-duplication" class="headerlink" title="Subset with duplication"></a>Subset with duplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/subsets-ii/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">subsetsWithDup</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Arrays.sort(nums);<br>    backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="hljs-type">int</span> [] nums, <span class="hljs-type">int</span> start)</span>&#123;<br>    list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; nums.length; i++)&#123;<br>        <span class="hljs-keyword">if</span>(i &gt; start &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// skip duplicates</span><br>        tempList.add(nums[i]);<br>        backtrack(list, tempList, nums, i + <span class="hljs-number">1</span>);<br>        tempList.remove(tempList.size() - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="Permutation-without-duplication"><a href="#Permutation-without-duplication" class="headerlink" title="Permutation without duplication"></a>Permutation without duplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/permutations/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">permute</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>   List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   <span class="hljs-comment">// Arrays.sort(nums); // not necessary</span><br>   backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums);<br>   <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="hljs-type">int</span> [] nums)</span>&#123;<br>   <span class="hljs-keyword">if</span>(tempList.size() == nums.length)&#123;<br>      list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>   &#125; <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123; <br>         <span class="hljs-keyword">if</span>(tempList.contains(nums[i])) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// element already exists, skip</span><br>         tempList.add(nums[i]);<br>         backtrack(list, tempList, nums);<br>         tempList.remove(tempList.size() - <span class="hljs-number">1</span>);<br>      &#125;<br>   &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="Permutation-with-duplication"><a href="#Permutation-with-duplication" class="headerlink" title="Permutation with duplication"></a>Permutation with duplication</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/permutations-ii/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">permuteUnique</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Arrays.sort(nums);<br>    backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums, <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[nums.length]);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="hljs-type">int</span> [] nums, <span class="hljs-type">boolean</span> [] used)</span>&#123;<br>    <span class="hljs-keyword">if</span>(tempList.size() == nums.length)&#123;<br>        list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(used[i] || i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>] &amp;&amp; !used[i - <span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>;<br>            used[i] = <span class="hljs-literal">true</span>; <br>            tempList.add(nums[i]);<br>            backtrack(list, tempList, nums, used);<br>            used[i] = <span class="hljs-literal">false</span>; <br>            tempList.remove(tempList.size() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Combination-reusable"><a href="#Combination-reusable" class="headerlink" title="Combination reusable"></a>Combination reusable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/combination-sum/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combinationSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Arrays.sort(nums);<br>    backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums, target, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="hljs-type">int</span> [] nums, <span class="hljs-type">int</span> remain, <span class="hljs-type">int</span> start)</span>&#123;<br>    <span class="hljs-keyword">if</span>(remain &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(remain == <span class="hljs-number">0</span>) list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>    <span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; nums.length; i++)&#123;<br>            tempList.add(nums[i]);<br>            backtrack(list, tempList, nums, remain - nums[i], i); <span class="hljs-comment">// not i + 1 because we can reuse same elements</span><br>            tempList.remove(tempList.size() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Combination-non-reusable"><a href="#Combination-non-reusable" class="headerlink" title="Combination non-reusable"></a>Combination non-reusable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/combination-sum-ii/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">combinationSum2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> &#123;<br>    List&lt;List&lt;Integer&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    Arrays.sort(nums);<br>    backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums, target, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> list;<br>    <br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; list, List&lt;Integer&gt; tempList, <span class="hljs-type">int</span> [] nums, <span class="hljs-type">int</span> remain, <span class="hljs-type">int</span> start)</span>&#123;<br>    <span class="hljs-keyword">if</span>(remain &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(remain == <span class="hljs-number">0</span>) list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; nums.length; i++)&#123;<br>            <span class="hljs-keyword">if</span>(i &gt; start &amp;&amp; nums[i] == nums[i-<span class="hljs-number">1</span>]) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// skip duplicates</span><br>            tempList.add(nums[i]);<br>            backtrack(list, tempList, nums, remain - nums[i], i + <span class="hljs-number">1</span>);<br>            tempList.remove(tempList.size() - <span class="hljs-number">1</span>); <br>        &#125;<br>    &#125;<br>&#125; <br></code></pre></td></tr></table></figure><h2 id="Palindrome-Partitioning"><a href="#Palindrome-Partitioning" class="headerlink" title="Palindrome Partitioning"></a>Palindrome Partitioning</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// https://leetcode.com/problems/palindrome-partitioning/</span><br><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">partition</span><span class="hljs-params">(String s)</span> &#123;<br>   List&lt;List&lt;String&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>   backtrack(list, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), s, <span class="hljs-number">0</span>);<br>   <span class="hljs-keyword">return</span> list;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtrack</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; list, List&lt;String&gt; tempList, String s, <span class="hljs-type">int</span> start)</span>&#123;<br>   <span class="hljs-keyword">if</span>(start == s.length())<br>      list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tempList));<br>   <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt; s.length(); i++)&#123;<br>         <span class="hljs-keyword">if</span>(isPalindrome(s, start, i))&#123;<br>            tempList.add(s.substring(start, i + <span class="hljs-number">1</span>));<br>            backtrack(list, tempList, s, i + <span class="hljs-number">1</span>);<br>            tempList.remove(tempList.size() - <span class="hljs-number">1</span>);<br>         &#125;<br>      &#125;<br>   &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPalindrome</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> low, <span class="hljs-type">int</span> high)</span>&#123;<br>   <span class="hljs-keyword">while</span>(low &lt; high)<br>      <span class="hljs-keyword">if</span>(s.charAt(low++) != s.charAt(high--)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>   <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p>Credit to <a href="https://leetcode.com/problems/subsets/discuss/27281/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)">this</a></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maven Release To Sonatype Repository</title>
    <link href="/2019/2019-02-25-maven-release-to-sonatype-repository/"/>
    <url>/2019/2019-02-25-maven-release-to-sonatype-repository/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="nexus-staging-plugin"><a href="#nexus-staging-plugin" class="headerlink" title="nexus staging plugin"></a>nexus staging plugin</h1><p><code>nexus-staging-maven-plugin</code> is a plugin just for nexus related repositories.<br>In order to release into maven central repository, you need to pass all checks that acquired by central repository.<br>Here, I will show you how to release an artifact by using <code>nexus-staging</code> plugin.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># this will deploy to staging repository</span><br>mvn deploy <span class="hljs-comment"># in return, it will get a stagingRepositoryId</span><br><br><span class="hljs-comment"># this will display all the release candidate, usually the last one will be yours</span><br><span class="hljs-comment"># copy the staging repository id</span><br>mvn nexus-staging:rc-list<br><br><span class="hljs-comment"># use this command to close the release candidate</span><br><span class="hljs-comment"># while closing, repository will impose many checks</span><br><span class="hljs-comment"># only if you pass all the tests can you run into next phase</span><br>mvn nexus-staging:rc-close -DstagingRepositoryId=YOUR_STAGING_REPOSITORY_ID<br><br><span class="hljs-comment"># use this command to actually release the release candidate if you pass all the checks</span><br><span class="hljs-comment"># once it&#x27;s done, the staging repository will be closed</span><br>mvn nexus-staging:release -DstagingRepositoryId=YOUR_STAGING_REPOSITORY_ID<br></code></pre></td></tr></table></figure><h1 id="maven-release-plugin"><a href="#maven-release-plugin" class="headerlink" title="maven release plugin"></a>maven release plugin</h1><p>Another way to do release is by using <code>maven-release-plugin</code>.<br>Release plugin will automatically flip the artifact version for you, and push the changes to your scm.<br>This procedure is totally automatic.  That’s how we don’t need to manually open the <code>pom.xml</code> to change the version.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># we start from a SNAPSHOT version, and deploy it to snapshot repository</span><br>mvn clean deploy<br><br><span class="hljs-comment"># then we prepare to do release</span><br><span class="hljs-comment"># this will remove the SNAPSHOT and update git tag for you before automatically commiting those change</span><br><span class="hljs-comment"># then it will automatically upgrade to the next SNAPSHOT version before commitng the change again</span><br><span class="hljs-comment"># now your scm should have 2 more commits in theory</span><br>mvn release:prepare<br><br><span class="hljs-comment"># by doing this, release plugin will deploy the formal version(the one without SNAPSHOT) into release repository directly</span><br><span class="hljs-comment"># without having to manually checkout the old version and do the manual deploy</span><br>mvn release:perform<br></code></pre></td></tr></table></figure><h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><p>So usually, if a repository doesn’t require many checks like maven central repository, you just need to use <code>release</code> plugin for simplicity.<br>But for maven central repository, you need to go through their requirement, which makes a lot of senses.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>The Era</title>
    <link href="/2019/2019-01-04-the-era/"/>
    <url>/2019/2019-01-04-the-era/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>很多人都说高中是他们记忆最深刻的时光，因为在一个高压的状态下，一群人努力奋斗，而目标又是如此明确；也有说大学是他们最怀念的岁月，因为青春可以随意的挥霍，从高压状态下解放出来，不少人选择做一些疯狂的事情，那些疯狂的记忆让他们非常留恋。</p><p>是让我记忆最深刻，感觉最开心，有时候又最心酸的时光，是属于13岁到15岁的初中时代。</p><p>在那个十分懵懂的岁月里，被迫从一个完全不懂为什么要这样那样做的人，变为一个必须要去做点什么的人。其实我原以为这一切都会像小学一样，什么都不用懂，什么都不需要懂，浑浑噩噩的，但又开开心心的过上那么几年，认识几个一起聊游戏的朋友，去别人家里做做客，吃点东西，就过去了。但学习的压力不会对你客气，从各个角度出发而到来的压力都会告诉你，你为什么做不到这个和那个，为什么没有他们好。所以虽然我必须要去做，但直到最后我也不知道为什么，因为我到最后也没有悟出一些关于人生的核心道理。这个失败让我失去了非常重要的时机，以至于很多时候想起来真是感觉自己就是个渣渣，这个事情以后详谈。</p><p>谁知道呢，进初中居然还要有个分班考试，一直在小学里混日子的我哪里知道有这种事情。考试的情况吧，我知道肯定尽不如人意，准确的说，肯定不怎么样，因为我什么都不会。开学当天，看了看分班名单，4班，还是23号，这是有多差？我是真的不清楚，因为当时的我并不觉得成绩好不好有什么重要的，这有什么意义嘛。23号，挺好的，4班，这是随机分配吧？嘿嘿，我是无所谓的。等找到自己的班级，班主任是个胖胖的男老师，刘老师，这个和我们共度了3年初中时光的班主任，憨厚和蔼的形象让我这种没有上进心，有点小调皮但也不会闯大祸的人感觉还是很安心的。随便找个位子坐下来，谁也不认识，废话，要是认识了还有什么意思？班里前面坐着很多女生，后面坐着很多男生。你得知道那个年代和女生聊天是一个非常害羞的事情好吗，我不太记得有多少人敢和女生主动聊天的，可能只有因为学习原因问几个问题这种事情才胆敢说几句吧，反正开学肯定不会多的。后排的男生一群人在聊天，有几个人再聊红色警戒，嗯，这个游戏我可是无敌了，至少我自己是这么认为的，像我这么性格开朗的人，当然喜欢跟别人聊聊天了。聊着聊着，跟他们也熟悉了，有个叫施春华的，有个叫林振川的，还有个戴晨亮。我们随便聊聊游戏，从红色警戒2到星际争霸1，从光棱坦克到飞龙进化，从红色警戒2尤里复仇到高达版星际争霸。从这天开始我迷迷糊糊的初中就开始。</p><p>很多事情你当时真的是不知道的，以为大家都是和你一样的想法，但人和人的差距是如此的大，以至于你完全没法理解这些事情的。从分配座位开始，这一切的玄学就开始了。</p><h2 id="柴偲晔"><a href="#柴偲晔" class="headerlink" title="柴偲晔"></a>柴偲晔</h2><p>我的第一个同桌是柴偲晔。</p><p>我自己写了很多东西描写我对柴偲晔的情感，发表出来的寥寥无几。柴偲晔倒是在一篇文章里写了对于我的一些想法，作为一次总结我也差不多写一下吧。</p><p>柴偲晔是个很复杂的女生。说实话，我跟她真的不熟，至今为止，算上我高考前鼓起勇气和大学后厚着脸皮主动联系的那几次，我们说话的次数，应该不会多于30次吧。我说的次数是指，聊天开始张嘴说话，到拜拜，下次再聊这样。再给个例子让我们有点感觉的话，比如说，我和春花说话的次数，我猜，应该大于1万次没问题的，毕竟我们每节课都可能会聊十几次，回家打电话也要聊很多很多。。。说回柴，因为跟她聊的少，真的实在太少，我对她也没什么了解。我所了解的柴偲晔，是个成绩绝对好，孤傲，冷漠，凶狠甚至有点孤僻的人，我把我对她的印象讲给我爸听，我爸说这人是不是有心理问题哈哈。但后来据很多朋友们描述说她是个外向开朗又很热情的妹子，只是内心有傲骨而已，可怜我连这个都不知道。也许是因为我过于幼稚吧，那时候在她面前我真的只是个身高1米7的小男孩罢了。所以在我眼里，她一直都是神，注意不是女神，是神因为神是没有性别的，加上一个女字甚至是对神的侮辱。她的神，在于她冠绝全雄的优异成绩，在于她学习和思考时心无旁骛的专注力，在于她出尘绝世的高傲姿态和在那个时候看来睥睨众生的成熟度。关于成绩，初一上学期有一次考试，是考数学吧，现在看来哪有什么难的，只是当时真的没有开窍哇！所以感觉真的做不来，我看着柴偲晔几下就写完了，还把附加题都做了，记得很清楚答案是要写出<code>...-3, -2, -1, 0, 1, 2, 3...</code>，中间这个<code>0</code>是必须要写出来的。我虽说当时不是什么上进心很强的人，但廉耻还是有的，我明确知道考试抄答案，那是作弊，那是不对的，但抱歉，臣妾真的做不出来啊，只能让她给我抄一下答案，她一脸嫌弃的看了我一眼，表示不是很愿意让我看，但我也只能偷偷抄一点了。分数出来，柴偲晔97，我74。这个差距已经不是一点点了吧。还有一次化学考试，高中以后化学成绩很好的我怎么也想不通，当时我的化学怎么会这么差，浓硫酸滴在PH试纸上，除了黑色，怎么可能还有别的颜色，试纸不烂掉就已经不错了好吗？所以当时肯定也只能抄她的考卷了，结果出来，她96我46，简直太刺激了。初一的时候老师问大家你们将来想做什么，我忘了我说什么了，但我记得她说，她想从政，当时就当吸一口凉气，第一个意思是，从政是什么意思？思想幼稚的我并不太懂，第二是，他怎么会想的这么超前，这么和其他人不一样。其他人一般都会说，我想当科学家，我想当医生，这种十分符合当时年龄的回答，而她，是那样的不同。<br>其实当时真的觉得没什么，成绩有什么意思呢？为什么要这么努力的学习呢，我是真的不知道，实在是太幼稚了，在那个年纪，男生普遍比女生晚熟的情况下，而我又比一般人更天真一点的那种，怎么可能理解这些。每天能做的事情就是混日子，唱唱周杰伦的歌，和柴偲晔吵吵架，骂他垃圾，还用一些网上学的简写，比如<code>LJ</code>  <code>SB</code> <code>BC</code>之类的。一般人可能就会跟我打打闹闹起来，但柴偲晔不是一般人，他如果不忙就稍微回骂几句，忙的时候就直接翻脸走人了。想来也是十分果断的。<br>由于我的幼稚，不上进，甚至当时周杰伦的《叶惠美》专辑发售，我把正版专辑外壳放在桌子上留作纪念作为我失去CD的念想（我爸觉得我成绩差又天天听周杰伦，认为是周杰伦祸害了我，就把CD折断了，非常粗暴），刘胖过来把我的专辑外壳没收了。种种过分的不上进的行为让班主任太失望了吧，我终于离开了这个宝贵的同桌座位。</p><p>离开这个位子之前，我从来没有想到过，有一天我会这样去怀念这个人。这个让我接下来十几年里不断在梦里相遇的人，在我脑海里留下了刻骨铭心的记忆。也许是情窦初开了吧，我开始知道喜欢一个人是什么感觉，是一种很怕，但又很想的感觉，是一种柠檬的酸酸的感觉，是一种水蜜桃的粉粉的颜色。我是一个藏不住秘密的人，一切都写在脸上，这也是我幼稚的一种明显表现，以至于，我还以为没人知道这个事情，但好像所有人都知道了，连刘胖都知道了。但其实吧，我是真的挺享受大家议论这些绯闻的感觉的，和一般人很不一样，也许还是因为幼稚，听到有人说起，你和柴偲晔怎么怎么样了，我不会反感，还有一点小兴奋。每天和春花聊天都会说到柴，说她是什么样的人，我不了解，春花也不了解，谁都不了解啊，大家都是那个年纪的小男生，春花比我还羞涩，谁敢和女生主动说话呢？当时估计除了费凡，没人脸皮能这么厚吧，哈哈或者说，没人有这样的觉悟。</p><p>之后由于成绩的差异，也由于主观上的羞涩，我们之间的接触就变得越来越少了。这是很自然的事情，毕竟你有什么理由和神产生交集？偶尔有几次很奇异的事情，产生了我和她之间的一些偶然都会让我兴奋异常，因为实在太少了，也因为我是在太喜欢她了，或者太崇拜她了。印象深刻的是初二时期，每两周会进行一次座位调整，我们班52个学生，差不多有4列座位比如ABCD4列，每列是有两人同桌的6-7排组成的，而由于班级空间不够大，BC两列的中间是靠在一起的，AB两列之间有一个小走廊，CD之间也是。而有一段时间座位调整的方法是AB互换，CD互换，而我正好在某次调换后可能和柴偲晔一起坐在中间，形成了伪同桌的感觉。虽然只是两个星期的同学，但实在是太让人开心了，开心到难以抑制内心的喜悦简直每天上课都要蹦起来。可有时候你又不能表现的那么明显是不是，跟柴偲晔也不要多多聊天，毕竟我也不了解她，我也没什么资格跟他说话，我说的那些东西她也不屑于了解，只是浪费她时间罢了，所以我虽然坐在她旁边，可说话的次数依然没有增加几次。偶尔有可能几次机会都因为我的愚蠢被浪费了，但我还是很享受这段时光，不断推算大概再过几个星期就能和她坐在一起了，兴奋的和春花分享我的想法。有一次我们上手工劳动课，我整节课都睡着了，口水淌了出来，下课的时候老师要求我们交手工作品，我当然没法做了。我就求柴偲晔帮我做了，毕竟她坐我旁边嘛，她居然一点都不反抗，还立马帮我做完了，这个事情看出来她还是挺热心的。还有一次我记得的是，初三陈爱花的课上，柴偲晔因为跟同桌聊天被抓了，于是被叫起来罚站。而我也不知道为什么原因，也被叫起来罚站，虽然是有点模糊的记忆了，一想到教室里只有我们两个人被罚站，当着这么多同学的面，站在那边，柴偲晔面红耳赤的样子，奇葩的我竟然产生了一点幸福的感觉。 记得还有一次是有一个科学实验比赛，内容是<code>水倒流</code>，就是说只要你用科学的方法使得水能够朝上移动就可以了，好像我们几个人是抱柴偲晔大腿的，她父亲是当时的湖州中学化学实验室主任，想出来用氨气推动水流倒流的点子。想法倒是很好（反正当时我又不懂什么化学）就是味道有点重，而且搞的柴偲晔手上一片紫色和橙色（好像是要用高锰酸钾制氧气什么东西的），看着特别心疼，可是也不能表现太多，实在是幼稚。比赛结束以后，好像已经13点半了，柴偲晔还没有吃饭，并且身上还没有钱，她跑来我们班门口跟刘胖借点钱，正好刘胖也没有先进，于是我就赶紧开始掏钱，要知道那个时候我们谁有钱啊，我身上就5块钱，但也是拼命掏钱啊，可是口袋里有个什么东西卡住了，怎么也拿不出来，沈寓韬出手特别快，一下下掏出了5块钱。柴偲晔拿了这个钱买了点黑米糕就吃了。<br>之后剩下的日子里只剩下学习和学习了。在这些枯燥而单调的日子里，居然有一天在黄昏下自行车库里碰到了柴偲晔，她的自行车锁好像有点坏了，问我能不能帮她把锁拉出来。其实谁不想在这种时候英雄救美一下，展示一下自己的能力，但是吧，那把锁好像是真的不好，我也不好当着她的面对这把锁打打敲敲的，是不是不够温柔，只能用力拉了几下，当然是没用，心里挺难受的，这么好的一个机会，太可惜了。为了这个事情我还写了篇文章纪念一下这么些年来难得的几次相遇。想来想去，这么多事情之后，我没有一件事情能真正做到的，也是命运的安排吧，让我在柴偲晔面前形成了一事无成的形象吧。之后就是16岁成人宴了，湖州16岁的孩子会有一个宴会，算是比较正规的一个饭局了，还要给红包，上台讲讲话之类的。自然就要邀请点朋友，春花带鱼苍蝇蛤蟆狒狒一个都不会少，好像我还叫了朱琳猪蹄，但那天猪蹄没法来，因为柴偲晔是跟我同一天摆宴席，宴会地点和我也不是很远。每次想到这些其实没什么意思但好像还有点巧合的事情，总会有一股温暖涌上心头。</p><p>之后中考之前，柴偲晔和张乐章已经保送湖州中学了，湖州中学是湖州最好的中学，每个人都希望自己能有机会去学习。这个时候的我依然是没有觉醒，还是不知道为什么要努力学习，看着大家每天努力地忙碌地学习，我也只能假装很努力的多做点题目。中考后的一天，成绩还没有出，我大概是脑子进水了吧，向柴偲晔表白了。我好像已经说过了，我是很喜欢暧昧、绯闻和因为青春时爱恋的羞涩而产生的尴尬。我不清楚柴是不是跟我有点类似的人，反正表白之后我是激动得不行，开心地一遍遍的看我们的聊天记录，哦对了我是在QQ上表白的，这样是不是起码有点文字记录可以让自己回味一下？柴偲晔停顿了一下，说很感谢我喜欢她，她也不知道怎么回复，但是学习为重，不能和我在一起的，希望我们成为好朋友多多联系。这个时候作为现在的我必须要说一句，这样的回答明显就是有希望的，如果我能够再成熟一点，稳重一点，和柴偲晔越来越近也不是没有可能。但还是因为那个原因，幼稚而愚蠢，我不断地打扰她，不断地告诉她我有多喜欢她，因为我实在是太喜欢她了，我对她的喜爱已经被我写成了好几本小本子里作为我的回忆。这样的愚蠢让她对我产生的反感，以至于她换了QQ，换了好几个QQ。在接下来的日子里，每当我能联系到她，她就会要么换QQ，要么把我拉黑。现在想来我那个时候也实在是不会泡妹子，把一个好好的机会扔了出去，把自己的形象做坏了，那个时候也没有什么泡妹子的想法，只是想说出自己的心意，说出来了，以为这样就会换来一些幸福的未来。柴偲晔也不是什么势利眼的女生，并不会因为成绩好不好而讨论能不能交往的问题。这个事情，后人要引以为戒，遇到喜欢的女生，表白是胜利的号角，而不是进攻的信号，就算表白偏早了，只要还有机会，就不要再多说了，而是应该做一个好一点的朋友，多一点了解，多一点认识，很多事情都有可能性。</p><p>我对她的感情也变得越来越复杂，在一开始的时候还是挺有言情剧情节的，什么只希望她幸福，只要她幸福我就开心了。时间长了，思念成疾，经常也会有十分负面的想法，例如，对自己现状的批判和不满，为什么我这么不努力，导致这样的结果，为什么我这么不成熟，产生了这样的现状；对她的抱怨，会奢望她过的不好，事业不顺，学业无成，人生失败后我能在她身边支持她帮助她，让她有点机会爱上我。可同时她也一直都是我努力的榜样和力量的源泉，为了能和她有一点点可能的希望，我就越来越努力，高中的我每次失去动力，疲劳了，我就会想到在山的那一头，是湖州中学，有那样一位神，她的优秀时时刻刻感召着我，催促着我不断努力，不断前进。终于我在高中成绩也越来越好了，开始觉醒，开始意识到之前的幼稚和低情商的行为才是真正导致失去和她产生联系可能的原因。所以尽管怨恨并没有消散，我有时候也能想得通一点原因。以此作为以后对待感情的一些经验，也是让我变好的原因吧。</p><p>多说一点关于柴偲晔的事情吧。<br>高考前二模我考的蛮不错的，好像超过一本模拟线80多分，我知道这个分数还是跟柴偲晔不能比，但终于有了一点自信和她聊天了。那天我鼓起勇气打了她家的电话，接电话的是她父亲，我说我想找柴偲晔我是她同学想问问她二模的情况，她接过电话就问我是不是沈寓韬，我说我是。然后就大概说了下他大概什么情况，有什么打算。匆匆忙忙的聊了几分钟就挂了电话，打完电话我整个人都是颤抖的，离开初中后，甚至说是从上次和她联系后好几年了，终于有机会和她聊天了。了解到了和她的差距，她比我高了17分，好像是这次考试发挥失常，只考了这么点，心里非常不开心，我也不敢多说话。后来她告诉我她其实知道打电话的人是我，我听完心里还是很甜的。后来她家就搬家了，电话也就再也打不通了，但此后就有了手机。<br>大学里一直都很想她，把以前所有美好的想念都加在她身上。她高考也考得不理想，没有考上清华。要知道这句话在我身上那就是装了，在她身上那是真的失利，也可以想见清华是多么难。<br>大学里偶尔也会想起她，知道和她已经不可能，只剩下想念，不如了解。查一查他的事迹，她在大学里是武术队的哈哈，实在是笑死人了。也和柴偲晔聊过几次，有几次和我说起她们寝室妹子看AV的事情，还伸手跟我要种子，抱歉种子我是真的没有，从来不看这种需要种子的东西。哦对了这个时候的我已经跟她说了请她放心我已经不喜欢她了这才让她放心，以至于不会把我拉黑，但我依然怀疑她是不是故意把这种事情跟我讲，好让我从心里厌恶她。和她也见过几次面，有一次甚至在KTV房间外和春花借了一支烟抽抽，一副企图装作很老道，但其实完全没抽过烟的样子。注意我这里想说的是，不是我和春花抽烟，而是柴和春花抽烟，这个事情让我吃了一惊，柴的变化之大，可见一斑。还有一次我们好像在老鲜吃饭吧，吃晚饭柴准备走人了，当时我也鼓起勇气准备用我的小电驴送她回去，嘿嘿想想看好激动的说，但是到了面前我就说不出口了，我突然脑子抽了，就独自开走了回家了，还在四下无人的情况下大吼了一声以发泄一些情感，虽然这么多年了，那种羞涩的感觉总是在这种时刻涌出来，导致多少次都失败了。当然柴也说她爸来接她，所以应该也不需要我送了吧，但是你想想，如果我当时在那个不太明亮且树枝茂密的路边陪她聊聊天，以此增进相互了解的话，是不是起码离朋友，或者好朋友又能进一步了呢？说起来，只要是碰到她，我智商情商就会全部下线，明明简单的事情，却会被我搞砸，真是失败啊！毕业后我打算出国，去加拿大读研究生，而她正好也出国，要去美国，都在北美，想来这应该也是最后的一点点缘分了吧。出国前还故意问问她洗衣液叫什么英文名哈哈，这么简单的东西也想问问她，能和她说上哪怕一句话，真的是很幸福让人兴奋的事情了。</p><p>之后的人生，不再有交集。</p><p>结婚前跟她聊过天，想看看她过的好不好，不知为何，她没有在美国留下，而是回到国内，在上海有一份十分体面的工作。那次聊天让我对她真正的了解了很多，她其实也不是神，也不是不食人间烟火，她也有她的痛苦，不是永远昂扬胜利的姿态。其实这个时候我是真的很心疼她的处境，可惜我什么都不能做，我的每一句话都要仔细斟酌，不能再像之前表白的时候那样，傻逼一样的乱说乱想了。自那之后，我就不再有太高的幻想，人家有自己的生活，有自己的情感了，我们的关系也终于能够正常一点，我们发点状态还能互相点个赞什么的。后来，她说她也要结婚了，老公特别优秀，我想也只有这样的人才配得上她的才华吧。我心里一愣，不知如何是好，第一我也不能再做什么了，我的人生可能已经冻结如此了，第二是我不知应该祝福她还是如何。</p><p>曾经有一次我跟她放出豪言说，你要是混得不好了，我会来帮你的。这句傻逼一样的话，不知为什么就这样从我嘴里说出来了，柴是什么人物，还需要我在他混得不好的时候帮她？希望她当做我在开玩笑吧，千万不要往心里去。不过我也跟她说过，我说总有一天要让你家户口本上加上我的名字哈哈，我是做不到了，而且我也不打算生孩子，这么看来是永远做不到了。</p><p>我能写出这样的文章，只能说我是放下了。<br>祝她幸福。</p><h2 id="施春华"><a href="#施春华" class="headerlink" title="施春华"></a>施春华</h2><h2 id="戴晨亮"><a href="#戴晨亮" class="headerlink" title="戴晨亮"></a>戴晨亮</h2><h2 id="林郑川"><a href="#林郑川" class="headerlink" title="林郑川"></a>林郑川</h2><h2 id="於凯华"><a href="#於凯华" class="headerlink" title="於凯华"></a>於凯华</h2><h2 id="费凡"><a href="#费凡" class="headerlink" title="费凡"></a>费凡</h2>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GPG usage</title>
    <link href="/2018/2018-10-03-gpg-usage/"/>
    <url>/2018/2018-10-03-gpg-usage/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --gen-key<br>gpg --full-generate-key<br></code></pre></td></tr></table></figure><h2 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --delete-keys <span class="hljs-variable">$UID</span><br>gpg --delete-secret-keys <span class="hljs-variable">$UID</span><br></code></pre></td></tr></table></figure><h2 id="List-key"><a href="#List-key" class="headerlink" title="List key"></a>List key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --list-key <span class="hljs-comment">#list public key</span><br>gpg --list-secret-keys <span class="hljs-comment">#list private key</span><br></code></pre></td></tr></table></figure><h2 id="Encrypt"><a href="#Encrypt" class="headerlink" title="Encrypt"></a>Encrypt</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg -s --default-key <span class="hljs-variable">$UID</span> plain-text<br>gpg -r <span class="hljs-variable">$UID</span> --encrypt plain-text<br></code></pre></td></tr></table></figure><h2 id="Decrypt"><a href="#Decrypt" class="headerlink" title="Decrypt"></a>Decrypt</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg -d &lt; cipher-text<br>gpg -r <span class="hljs-variable">$UID</span> --decrypt cipher-text<br></code></pre></td></tr></table></figure><h2 id="Import-Key"><a href="#Import-Key" class="headerlink" title="Import Key"></a>Import Key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --import my-private-key.asc<br></code></pre></td></tr></table></figure><h2 id="Export-key"><a href="#Export-key" class="headerlink" title="Export key"></a>Export key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">gpg --<span class="hljs-built_in">export</span> --armor <span class="hljs-variable">$UID</span><br>gpg --export-secret-keys <span class="hljs-variable">$UID</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>gpg</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Functional Interface</title>
    <link href="/2018/2018-07-26-functional-interface/"/>
    <url>/2018/2018-07-26-functional-interface/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p>For filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Predicate</span>&lt;T&gt; &#123;<br>  <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(T t)</span>;<br>&#125;<br><br>Predicate&lt;Integer&gt; p = a -&gt; a == <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>Covert <code>A</code> to <code>B</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Function</span>&lt;T, R&gt; &#123;<br><span class="hljs-comment">// The T is the input argument while R is the return result</span><br>  R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;<br>&#125;<br><br>Function&lt;String, Integer&gt; f = Integer::parseInt;<br></code></pre></td></tr></table></figure><p>Or accept 2 parameter and output</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">BiFunction</span>&lt;T, U, R&gt; &#123;<br>  R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t, U u)</span>;<br>&#125;<br><br>BiFunction&lt;Integer, Integer, String&gt; bf = (a, b) -&gt; <span class="hljs-string">&quot;&quot;</span> + a + b;<br></code></pre></td></tr></table></figure><h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p>Get configuration etc.,</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Supplier</span>&lt;T&gt; &#123;<br>  T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;<br>&#125;<br><br>Supplier&lt;Integer&gt; s = () -&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>Terminator, do process that doesn’t return</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Consumer</span>&lt;T&gt; &#123;<br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(T t)</span>;<br>&#125;<br><br>Consumer&lt;Integer&gt; c = System.out::println;<br></code></pre></td></tr></table></figure><h2 id="Default-Method"><a href="#Default-Method" class="headerlink" title="Default Method"></a>Default Method</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RugalFunction</span>&lt;FROM, TO&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Function</span>&lt;FROM, TO&gt; &#123;<br><br>  <span class="hljs-keyword">default</span> &lt;OTHER&gt; RugalFunction&lt;OTHER, TO&gt; <span class="hljs-title function_">compose</span><span class="hljs-params">(RugalFunction&lt;? <span class="hljs-built_in">super</span> OTHER, ? extends FROM&gt; before)</span> &#123;<br>    Objects.requireNonNull(before);<br>    System.out.println(<span class="hljs-string">&quot;Do that first and then do this&quot;</span>);<br>    <span class="hljs-keyword">return</span> (OTHER v) -&gt; <span class="hljs-built_in">this</span>.apply(before.apply(v));<br>  &#125;<br><br>  <span class="hljs-keyword">default</span> &lt;OTHER&gt; RugalFunction&lt;FROM, OTHER&gt; <span class="hljs-title function_">andThen</span><span class="hljs-params">(RugalFunction&lt;? <span class="hljs-built_in">super</span> TO, ? extends OTHER&gt; after)</span> &#123;<br>    Objects.requireNonNull(after);<br>    System.out.println(<span class="hljs-string">&quot;Do this and then do that&quot;</span>);<br>    <span class="hljs-keyword">return</span> (FROM f) -&gt; after.apply(<span class="hljs-built_in">this</span>.apply(f));<br>  &#125;<br>&#125;<br><br><br>RugalFunction&lt;String, Integer&gt; rf = a -&gt; Integer.parseInt(a);<br>RugalFunction&lt;String, Float&gt; call = rf.andThen((Integer b) -&gt; b * <span class="hljs-number">1.0F</span>);<br>System.out.println(call.apply(<span class="hljs-string">&quot;1&quot;</span>));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">--- exec-maven-plugin:1.2.1:exec (default-cli) @ functional ---</span><br><span class="hljs-comment">Do this and then do that</span><br><span class="hljs-comment">1.0</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Convert Putty Key to Openssh Format</title>
    <link href="/2018/2018-05-27-convert-putty-key-to-openssh-format/"/>
    <url>/2018/2018-05-27-convert-putty-key-to-openssh-format/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>If you only have putty key and you want to get openssh format from it, try this one:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">puttygen your_input_putty_key_file -O private-openssh -o your_output_key_file<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ssh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Read Quoted Parameters in Bash</title>
    <link href="/2018/2018-02-12-read-quoted-parameters-in-bash/"/>
    <url>/2018/2018-02-12-read-quoted-parameters-in-bash/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="!--swig%EF%BF%BC1--">Reading parameters</a> is easy, but how to read parameters with spaces?<br>We usually wrap them with parenthesis right? But actually how?  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br>whitespace=<span class="hljs-string">&quot;[[:space:]]&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$@</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-keyword">if</span> [[ <span class="hljs-variable">$i</span> =~ <span class="hljs-variable">$whitespace</span> ]]<br>    <span class="hljs-keyword">then</span><br>        i=\&quot;<span class="hljs-variable">$i</span>\&quot;<br>    <span class="hljs-keyword">fi</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>My Vengeance</title>
    <link href="/2018/2018-01-11-my-vengeance/"/>
    <url>/2018/2018-01-11-my-vengeance/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>我尊重故事结尾<br>本神此生唯一的心愿  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">让你活在恐惧之中  <br>生不如死  <br></code></pre></td></tr></table></figure><p>只可惜<br>你惹了不该惹的人  </p><p><a href="https://i.postimg.cc/R0qZpF7D/blue.gif"><img src="https://i.postimg.cc/R0qZpF7D/blue.gif" alt="blue.gif"></a></p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Conjugation for different aspects</title>
    <link href="/2018/2018-01-03-conjugation-for-different-aspects/"/>
    <url>/2018/2018-01-03-conjugation-for-different-aspects/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="essere"><a href="#essere" class="headerlink" title="essere"></a>essere</h2><table><thead><tr><th>essere</th><th align="right">Singular</th><th align="right">Plural</th></tr></thead><tbody><tr><td>I</td><td align="right">sono</td><td align="right">siamo</td></tr><tr><td>You</td><td align="right">sei</td><td align="right">siete</td></tr><tr><td>He&#x2F;She&#x2F;It</td><td align="right">é</td><td align="right">sono</td></tr></tbody></table><h2 id="are"><a href="#are" class="headerlink" title="-are"></a>-are</h2><table><thead><tr><th>nuotare</th><th align="right">Singular</th><th align="right">Plural</th></tr></thead><tbody><tr><td>I</td><td align="right">nuot<code>o</code></td><td align="right">nuot<code>iamo</code></td></tr><tr><td>You</td><td align="right">nuot<code>i</code></td><td align="right">nuot<code>ate</code></td></tr><tr><td>He&#x2F;She&#x2F;It</td><td align="right">nuot<code>a</code></td><td align="right">nuot<code>ano</code></td></tr></tbody></table><h2 id="ere"><a href="#ere" class="headerlink" title="-ere"></a>-ere</h2><table><thead><tr><th>scrivere</th><th align="right">Singular</th><th align="right">Plural</th></tr></thead><tbody><tr><td>I</td><td align="right">scriv<code>o</code></td><td align="right">scriv<code>iamo</code></td></tr><tr><td>You</td><td align="right">scriv<code>i</code></td><td align="right">scriv<code>ete</code></td></tr><tr><td>He&#x2F;She&#x2F;It</td><td align="right">scriv<code>e</code></td><td align="right">scriv<code>ono</code></td></tr></tbody></table><h2 id="ire"><a href="#ire" class="headerlink" title="-ire"></a>-ire</h2><table><thead><tr><th>partire</th><th align="right">Singular</th><th align="right">Plural</th></tr></thead><tbody><tr><td>I</td><td align="right">part<code>o</code></td><td align="right">part<code>iamo</code></td></tr><tr><td>You</td><td align="right">part<code>i</code></td><td align="right">part<code>ite</code></td></tr><tr><td>He&#x2F;She&#x2F;It</td><td align="right">part<code>e</code></td><td align="right">part<code>ono</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Iterm2 Shell Code</title>
    <link href="/2018/2018-01-03-iterm2-shell-code/"/>
    <url>/2018/2018-01-03-iterm2-shell-code/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><table><thead><tr><th>shortcut</th><th>command</th><th>description</th></tr></thead><tbody><tr><td>ALT &lt;&#x3D;</td><td>Send Escape Sequence: <code>b</code></td><td>move left one word</td></tr><tr><td>ALT &#x3D;&gt;</td><td>Send Escape Sequence: <code>f</code></td><td>move right one word</td></tr><tr><td>WIN &lt;&#x3D;</td><td>SEND HEX CODE: <code>0x01</code></td><td>move left to head</td></tr><tr><td>WIN &#x3D;&gt;</td><td>SEND HEX CODE: <code>0x05</code></td><td>move right one tail</td></tr><tr><td>ALT DEL</td><td>SEND HEX CODE: <code>0x17</code></td><td>Delete one word</td></tr><tr><td>WIN DEL</td><td>SEND HEX CODE: <code>0x15</code></td><td>Delete one line</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Summary of THE in Italiano</title>
    <link href="/2018/2018-01-01-summary-of-the-in-italiano/"/>
    <url>/2018/2018-01-01-summary-of-the-in-italiano/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Singular"><a href="#Singular" class="headerlink" title="Singular"></a>Singular</h2><table><thead><tr><th align="left">Format</th><th align="left">Gender</th><th align="left">Pattern</th></tr></thead><tbody><tr><td align="left">l’</td><td align="left"><code>MF</code></td><td align="left"><code>^[aeiou]\w*$</code></td></tr><tr><td align="left">lo</td><td align="left"><code>M</code></td><td align="left"><code>^([xyz]\w*)|(s[^aeiou]*)$</code></td></tr><tr><td align="left">Il</td><td align="left"><code>M</code></td><td align="left"><code>^[^aeiou]\w*$</code></td></tr><tr><td align="left">la</td><td align="left"><code>F</code></td><td align="left"><code>^[^aeiou]\w*$</code></td></tr></tbody></table><h2 id="Plural"><a href="#Plural" class="headerlink" title="Plural"></a>Plural</h2><table><thead><tr><th align="left">Format</th><th align="left">Gender</th><th align="left">Pattern</th></tr></thead><tbody><tr><td align="left">gli</td><td align="left"><code>M</code></td><td align="left"><code>^([xyzs]\w*)|([aeiou]\w*)$</code></td></tr><tr><td align="left">i</td><td align="left"><code>M</code></td><td align="left"><code>^[^aeiou]\w*$</code></td></tr><tr><td align="left">le</td><td align="left"><code>F</code></td><td align="left"><code>^\w*$</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Multithread key points</title>
    <link href="/2017/2017-09-26-java-multithread-key-point/"/>
    <url>/2017/2017-09-26-java-multithread-key-point/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p><code>volatile</code> is an important keyword in multi-thread programming.<br>Whenever multi-threads read or write one variable or reference, each thread runs on its own CPU.<br>As each CPU has its own cache, there might have some chances that one thread writes the value to its CPU cache and another thread reads it. But writing to the cache of one CPU doesn’t the value in main memory also get updated. Therefore the time gap between writing to CPU cache and flushing to main memory creates discrepancy in multi-thread.  </p><p><a href="https://i.postimg.cc/J7gysDcJ/image.png"><img src="https://i.postimg.cc/J7gysDcJ/image.png" alt="image.png"></a>  </p><p><code>volatile</code> makes sure that JVM won’t reorder the bytecode operations and enforces the value in CPU cache to be flushed out to memory, so that other threads can always get the latest value.  </p><p><a href="https://i.postimg.cc/5yZjTTNp/image.png"><img src="https://i.postimg.cc/5yZjTTNp/image.png" alt="image.png"></a>  </p><p>But this is not good enough for multi-thread programming if we need to update value based on previous value.<br>This is when <code>synchronized</code> comes in.  </p><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>To enforce that only thread could access the <code>critical area</code>, that is, if there is one thread already in the <code>critical area</code>, others will be blocked.  </p><h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p><code>wait</code> method give up the object monitor to others. Can only be used in <code>synchronized</code> block.  </p><h2 id="notify-All"><a href="#notify-All" class="headerlink" title="notify(All)"></a>notify(All)</h2><p>These methods tell other threads to wake up. Can only be used in <code>synchronized</code> block.  </p><h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>Ask current thread to wait the exit of the calling thread, e.g.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-type">Thread</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>();<br>a.start();<br>a.join();<br>&#125;<br></code></pre></td></tr></table></figure><p>By calling <code>join</code>, the daemon thread will not exit the main method until thread <code>a</code> exits.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Monster Hunter XX Effects</title>
    <link href="/2017/2017-08-30-monster-hunter-xx-effects/"/>
    <url>/2017/2017-08-30-monster-hunter-xx-effects/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="基础能力值相关"><a href="#基础能力值相关" class="headerlink" title="基础能力值相关"></a>基础能力值相关</h2><h3 id="体力"><a href="#体力" class="headerlink" title="体力"></a>体力</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>体力最大値+50</td></tr><tr><td align="left">+10</td><td>体力最大値+20</td></tr><tr><td align="left">-10</td><td>体力最大値减少10</td></tr><tr><td align="left">-15</td><td>体力最大値减少30</td></tr></tbody></table><h3 id="攻击"><a href="#攻击" class="headerlink" title="攻击"></a>攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+20</td><td>攻击力+20</td></tr><tr><td align="left">+15</td><td>攻击力+15</td></tr><tr><td align="left">+10</td><td>攻击力+10</td></tr><tr><td align="left">-10</td><td>攻击力-5</td></tr><tr><td align="left">-15</td><td>攻击力-10</td></tr><tr><td align="left">-20</td><td>攻击力-15</td></tr></tbody></table><h3 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+20</td><td>防御力×1.06倍+25</td></tr><tr><td align="left">+15</td><td>防御力×1.03倍+20</td></tr><tr><td align="left">+10</td><td>防御力+15</td></tr><tr><td align="left">-10</td><td>防御力-10</td></tr><tr><td align="left">-15</td><td>防御力×0.95倍-10</td></tr><tr><td align="left">-20</td><td>防御力×0.9倍-10</td></tr></tbody></table><h2 id="属性相关"><a href="#属性相关" class="headerlink" title="属性相关"></a>属性相关</h2><h3 id="属性攻击"><a href="#属性攻击" class="headerlink" title="属性攻击"></a>属性攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+10</td><td>一般属性伤害（火、水、水、雷、龙）1.1倍</td></tr><tr><td align="left">-10</td><td>一般属性伤害（火、水、水、雷、龙）0.9倍</td></tr></tbody></table><ol><li>同时配单属性攻击强化+2时，属性值为： <code>(该属性x1.2)+6</code>  </li><li>同时配单属性攻击强化+1时，属性值为：<code>(该属性x1.15)+4</code></li></ol><h3 id="属性耐性"><a href="#属性耐性" class="headerlink" title="属性耐性"></a>属性耐性</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+10</td><td>无效化属性（火、水、水、雷、龙）造成的异常(像是被火烧伤&#x2F;被水喷到影响耐力值回复那种)</td></tr></tbody></table><h3 id="属性会心"><a href="#属性会心" class="headerlink" title="属性会心"></a>属性会心</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+10：暴击(攻击有红光)时属性伤害提升</td><td></td></tr></tbody></table><ul><li>片手剑、双剑、弓1.35倍  </li><li>轻&#x2F;重弩1.3倍  </li><li>大剑1.2倍、其余1.25倍</li></ul><h3 id="火属性攻击"><a href="#火属性攻击" class="headerlink" title="火属性攻击"></a>火属性攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>武器的火属性伤害×1.1倍+6</td></tr><tr><td align="left">+10</td><td>武器的火属性伤害×1.05倍+4</td></tr><tr><td align="left">-10</td><td>武器の火属性値×0.75倍</td></tr></tbody></table><h3 id="火耐性"><a href="#火耐性" class="headerlink" title="火耐性"></a>火耐性</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>火耐性+20，耐性値于25以上火势不论大小都无效</td></tr><tr><td align="left">+10</td><td>火耐性+15，耐性値于15以上无効化火势小的烧伤</td></tr><tr><td align="left">-10</td><td>火耐性-20</td></tr></tbody></table><h3 id="水属性攻击"><a href="#水属性攻击" class="headerlink" title="水属性攻击"></a>水属性攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>武器の水属性伤害×1.1倍+6</td></tr><tr><td align="left">+10</td><td>武器の水属性伤害×1.05倍+4</td></tr><tr><td align="left">-10</td><td>武器的水属性値×0.75倍</td></tr></tbody></table><h3 id="水耐性"><a href="#水耐性" class="headerlink" title="水耐性"></a>水耐性</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>水耐性+20、耐性値于25以上…</td></tr><tr><td align="left">+10</td><td>水耐性+15、耐性値15以上</td></tr><tr><td align="left">-10</td><td>水耐性弱化水耐性-20</td></tr></tbody></table><h3 id="雷属性攻击"><a href="#雷属性攻击" class="headerlink" title="雷属性攻击"></a>雷属性攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>武器的雷属性伤害×1.1倍+6</td></tr><tr><td align="left">+10</td><td>武器的雷属性伤害×1.05倍+4</td></tr><tr><td align="left">-10</td><td>武器的雷属性値×0.75倍</td></tr></tbody></table><h3 id="雷耐性"><a href="#雷耐性" class="headerlink" title="雷耐性"></a>雷耐性</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>雷耐性+20</td></tr><tr><td align="left">+10</td><td>雷耐性+15</td></tr><tr><td align="left">-10</td><td>雷耐性弱化雷耐性が-20</td></tr></tbody></table><h3 id="龙属性攻击"><a href="#龙属性攻击" class="headerlink" title="龙属性攻击"></a>龙属性攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>武器的龙属性伤害×1.1倍+6</td></tr><tr><td align="left">+10</td><td>武器的龙属性伤害×1.05倍+4</td></tr><tr><td align="left">-10</td><td>武器的龙属性値×0.75倍</td></tr></tbody></table><h3 id="龙耐性"><a href="#龙耐性" class="headerlink" title="龙耐性"></a>龙耐性</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>龙耐性+20</td></tr><tr><td align="left">+10</td><td>龙耐性+15</td></tr><tr><td align="left">-10</td><td>龙耐性-20</td></tr></tbody></table><h2 id="异常状态相关"><a href="#异常状态相关" class="headerlink" title="异常状态相关"></a>异常状态相关</h2><h3 id="特殊攻击"><a href="#特殊攻击" class="headerlink" title="特殊攻击"></a>特殊攻击</h3><table><thead><tr><th align="left">发动值</th><th>效果</th></tr></thead><tbody><tr><td align="left">+15</td><td>状态异常攻击+2，毒、麻痹、睡眠、捕获的积蓄値×1.2倍+10</td></tr><tr><td align="left">+10</td><td>状态异常攻击+1，毒、麻痹、睡眠、捕获的积蓄値×1.1倍+10</td></tr><tr><td align="left">-10</td><td>状态异常攻击弱化，毒、麻痹、睡眠、捕获的积蓄値×0.9倍</td></tr></tbody></table><h3 id="特殊会心"><a href="#特殊会心" class="headerlink" title="特殊会心"></a>特殊会心</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>会心撃【特殊】暴击时状态异常的积蓄値×1.2倍</td></tr></tbody></table><h3 id="毒"><a href="#毒" class="headerlink" title="毒"></a>毒</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>毒耐性不会进入毒、猛毒状态状态。激毒状态减轻成猛毒</td></tr><tr><td>-10</td><td>毒倍加，毒伤害×2</td></tr></tbody></table><h3 id="麻痹"><a href="#麻痹" class="headerlink" title="麻痹"></a>麻痹</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>麻痹无効，防麻痹状态</td></tr><tr><td>-10</td><td>麻痹倍加，麻痹状态持续时间延长</td></tr></tbody></table><h3 id="睡眠"><a href="#睡眠" class="headerlink" title="睡眠"></a>睡眠</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>睡眠无効，防睡眠状态</td></tr><tr><td>-10</td><td>睡眠倍加，睡眠状态时间延长</td></tr></tbody></table><h3 id="气絶"><a href="#气絶" class="headerlink" title="气絶"></a>气絶</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>气絶无効，防气绝状态</td></tr><tr><td>+10</td><td>气絶确率半减，本来要气绝的情况有二分之一机率不会气绝</td></tr><tr><td>-10</td><td>气絶倍加，在要回复气绝时必要的转香菇头或按键次数增加</td></tr></tbody></table><h3 id="裂伤"><a href="#裂伤" class="headerlink" title="裂伤"></a>裂伤</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>裂伤无効，防裂伤状态</td></tr><tr><td>-10</td><td>裂伤倍加，裂伤伤害2倍</td></tr></tbody></table><h3 id="聴覚保护"><a href="#聴覚保护" class="headerlink" title="聴覚保护"></a>聴覚保护</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>高级耳栓，版上俗称的高耳，无效化各种魔物的吼叫</td></tr><tr><td>+10</td><td>耳栓，小吼叫无效化</td></tr></tbody></table><h3 id="风压"><a href="#风压" class="headerlink" title="风压"></a>风压</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>风压【大】无効，大小风压无效化</td></tr><tr><td>+10</td><td>风压【小】无効，小风压无效化</td></tr></tbody></table><h3 id="耐震"><a href="#耐震" class="headerlink" title="耐震"></a>耐震</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>耐震，不会因魔物引发的震动畏惧</td></tr></tbody></table><h3 id="对防御DOWN"><a href="#对防御DOWN" class="headerlink" title="对防御DOWN"></a>对防御DOWN</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>铁面皮，对防御力DOWN状态有抗性</td></tr></tbody></table><h3 id="细菌学"><a href="#细菌学" class="headerlink" title="细菌学"></a>细菌学</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>バイオドクター，こやし玉的调合成功率跟効果上昇、全道具使用不可状态(被臭屁喷到那种)跟爆破状态无効化、狂竜症发病减缓</td></tr><tr><td>+10</td><td>细菌研究家，こやし玉的调合成功率跟効果上昇、一部份道具无法使用无效化，不会引发爆炸状态</td></tr></tbody></table><h3 id="狂撃耐性"><a href="#狂撃耐性" class="headerlink" title="狂撃耐性"></a>狂撃耐性</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>无我の境地，狂竜症发病变慢、克服后的能力增幅增高</td></tr></tbody></table><h2 id="道具相关"><a href="#道具相关" class="headerlink" title="道具相关"></a>道具相关</h2><h3 id="运搬"><a href="#运搬" class="headerlink" title="运搬"></a>运搬</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>运搬の达人，道具运搬中的移动速度提升、自一定程度的段差跳下去道具也不会摔坏</td></tr></tbody></table><h3 id="回复量"><a href="#回复量" class="headerlink" title="回复量"></a>回复量</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>体力回复量UP，体力回复道具使用时的回复量×1.25倍</td></tr><tr><td>-10</td><td>体力回复量DOWN，体力回复道具使用时的回复量×0.75倍</td></tr></tbody></table><h3 id="气まぐれ"><a href="#气まぐれ" class="headerlink" title="气まぐれ"></a>气まぐれ</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>神の气まぐれ，捕虫网・十字镐・廻力标・笛（角笛、回复笛、解毒笛、鬼人笛、硬化笛）很难坏掉</td></tr><tr><td>+10</td><td>精霊の气まぐれ，同上的消耗道具比较不会坏掉</td></tr><tr><td>-10</td><td>恶霊の气まぐれ，同上道具容易坏掉</td></tr><tr><td>-15</td><td>恶魔の气まぐれ，道具破坏狂</td></tr></tbody></table><h3 id="食いしん坊"><a href="#食いしん坊" class="headerlink" title="食いしん坊"></a>食いしん坊</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>拾い食い，まんぷく効果+吃下气力回复道具以外的东西时、三分之一的机率恢复气力最大値25</td></tr><tr><td>+10</td><td>まんぷく，在吃肉类道具时，气力最大值增加量+25</td></tr></tbody></table><h3 id="广域"><a href="#广域" class="headerlink" title="广域"></a>广域</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>广域化+2，薬草、回复薬、解毒薬、怪力の种、忍耐の种、ウチケシの実使用时，把效果100%完整传给同区域的伙伴</td></tr><tr><td>+10</td><td>广域化+1，同上道具使用时，在同区域的伙伴也能获得一半的效果</td></tr></tbody></table><h3 id="効果持続"><a href="#効果持続" class="headerlink" title="効果持続"></a>効果持続</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>アイテム使用强化，有强化作用的道具(怪力果实之类的，片手的刃药也算)使用后效果维持时间1.5倍</td></tr><tr><td>-10</td><td>アイテム使用弱化，强化道具效果持续时间变成原本的三分之二</td></tr></tbody></table><h3 id="高速设置"><a href="#高速设置" class="headerlink" title="高速设置"></a>高速设置</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>罠师，シビレ罠、落之し穴、大タ儿爆弾(G)的设置速度加快+陷阱及各种陷阱用肉（毒生肉、シビレ生肉、眠り生肉）的调合成功率提升为100％</td></tr></tbody></table><h3 id="采取"><a href="#采取" class="headerlink" title="采取"></a>采取</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>采取+2，于采取点采取的次数增</td></tr><tr><td>+10</td><td>采取+1，于采取点采取次数稍微增加</td></tr><tr><td>-10</td><td>采取-1，于采取点的采取次数减少</td></tr></tbody></table><h3 id="肉食"><a href="#肉食" class="headerlink" title="肉食"></a>肉食</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>お肉大好き，吃生肉也可以有气力最大值+50的效果，吃肉类之后会有60秒强走效果</td></tr></tbody></table><h3 id="食事"><a href="#食事" class="headerlink" title="食事"></a>食事</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>早食い+2，各种肉、鱼等食物还有咳药的食用速度变超快</td></tr><tr><td>+10</td><td>早食い+1，各种肉、鱼等食物吃的速度加快</td></tr><tr><td>-10</td><td>スローライフ，当个慢活懒人，吃东西也要慢  慢  来</td></tr></tbody></table><h3 id="茸食"><a href="#茸食" class="headerlink" title="茸食"></a>茸食</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>キノコ大好き，可以生吃各种香菇，获得特殊效果，效果如下：</td></tr></tbody></table><p>1.　アオキノコ＝回复薬<br>2.　毒テングダケ＝栄养剤<br>3.　ニトロダケ＝鬼人薬<br>4.　マヒダケ＝硬化薬<br>5.　クタビレダケ＝强走薬<br>6.　マンドラゴラ＝秘薬<br>7.　ドキドキノコ＝原本的负面效果以外的所有效果随机抽选</p><h3 id="节食"><a href="#节食" class="headerlink" title="节食"></a>节食</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>満足感，25%的机率吃东西不消耗道具(实际没喝也可以靠想象的获得道具效果的概念，脑补的极致，加速世界心念技能的体现)</td></tr></tbody></table><h3 id="调合成功率"><a href="#调合成功率" class="headerlink" title="调合成功率"></a>调合成功率</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>调合成功率+45%</td></tr><tr><td>+10</td><td>调合成功率+20%</td></tr><tr><td>-10</td><td>调合成功率-10%</td></tr><tr><td>-15</td><td>调合成功率-20%</td></tr></tbody></table><h3 id="盗み无効"><a href="#盗み无効" class="headerlink" title="盗み无効"></a>盗み无効</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>盗み无効，道具不会被魔物偷走</td></tr></tbody></table><h3 id="野草知识"><a href="#野草知识" class="headerlink" title="野草知识"></a>野草知识</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>薬草超强化，食用药草效果更加提升(回复量略低高级回复药一点)</td></tr><tr><td>+10</td><td>薬草强化，食用药草就有跟回复药一样的补血量</td></tr></tbody></table><h2 id="地图探索相关"><a href="#地图探索相关" class="headerlink" title="地图探索相关"></a>地图探索相关</h2><h3 id="狩人"><a href="#狩人" class="headerlink" title="狩人"></a>狩人</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>ハンター生活，烤肉变简单、钓鱼鱼咬饵必上钩、不用持有地图也能看到完整大地图</td></tr></tbody></table><h3 id="气力回复"><a href="#气力回复" class="headerlink" title="气力回复"></a>气力回复</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>スタミナ急速回复，スタミナ回复速度两倍</td></tr><tr><td>-10</td><td>スタミナ回复遅延，スタミナ回复速度×0.75倍</td></tr></tbody></table><h3 id="气配"><a href="#气配" class="headerlink" title="气配"></a>气配</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>隠密，不易被魔物盯上</td></tr><tr><td>-10</td><td>挑発，变成容易遭魔物盯上的嘲讽体质</td></tr></tbody></table><h3 id="スタミナ"><a href="#スタミナ" class="headerlink" title="スタミナ"></a>スタミナ</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>ランナー，冲刺、双剑的鬼人化、槌子跟弓的蓄力攻击、等徐徐消耗气力的状态气力消耗减半</td></tr><tr><td>-10</td><td>钝足，上述情况的气力消耗速度加倍</td></tr></tbody></table><h3 id="千里眼"><a href="#千里眼" class="headerlink" title="千里眼"></a>千里眼</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15自动</td><td>マーキング，可以常常知道地图上魔物的位置及状态(翅膀开阖&#x2F;头的方向之类的)</td></tr><tr><td>+10</td><td>探知，暂时知道魔物的位置跟状态，一定时间过后就会变成跟千里眼药一样只能看到红点</td></tr></tbody></table><h3 id="耐寒"><a href="#耐寒" class="headerlink" title="耐寒"></a>耐寒</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>寒さ无効，寒冷状态下的气力最大值减少无效</td></tr><tr><td>-10</td><td>寒さ倍加，天气一冷肚子饿得特别快的速度再加倍</td></tr></tbody></table><h3 id="耐暑"><a href="#耐暑" class="headerlink" title="耐暑"></a>耐暑</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>暑さ无効，不会因为热而减少体力，踩在岩浆上也不会受伤</td></tr><tr><td>-10</td><td>暑さ倍加，因为热减少体力速度加快</td></tr></tbody></table><h3 id="腹减り"><a href="#腹减り" class="headerlink" title="腹减り"></a>腹减り</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>腹减り无効，不会空腹也不会因为饿肚子降低气力最大值</td></tr><tr><td>+10</td><td>腹减り半减，因为饿肚子降低气力最大值的需求时间延长(6-&gt;12)</td></tr><tr><td>-10</td><td>腹减り倍加【小】饿肚子减少气力的时间缩短</td></tr><tr><td>-15</td><td>腹减り倍加【大】饿肚子减少气力的时间超绝缩短</td></tr></tbody></table><h3 id="护石王"><a href="#护石王" class="headerlink" title="护石王"></a>护石王</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>お守りハンター，挖护石有30%机率一次挖到2个</td></tr><tr><td>+10</td><td>お守り収集，挖护石有20%机率一次挖到2个</td></tr></tbody></table><h3 id="ハチミツ"><a href="#ハチミツ" class="headerlink" title="ハチミツ"></a>ハチミツ</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>ハニーハンター，采蜜可以一次采到2个</td></tr></tbody></table><h3 id="剥ぎ取り"><a href="#剥ぎ取り" class="headerlink" title="剥ぎ取り"></a>剥ぎ取り</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>剥ぎ取り名人，割肉的次数+1，割肉中不会被攻击打断</td></tr><tr><td>+10</td><td>剥ぎ取り铁人，割肉动作不会因攻击被打断</td></tr></tbody></table><h3 id="走行継続"><a href="#走行継続" class="headerlink" title="走行継続"></a>走行継続</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>キープラン，冲刺跑状态在气力降到红色区界线会停住，不会降低跑步速度</td></tr></tbody></table><h2 id="战斗系技能-远近通用"><a href="#战斗系技能-远近通用" class="headerlink" title="战斗系技能(远近通用)"></a>战斗系技能(远近通用)</h2><h3 id="KO"><a href="#KO" class="headerlink" title="KO"></a>KO</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>KO术，容易击倒魔物，简单来说就是把目标K.O.</td></tr></tbody></table><p>※这个击倒是锁头打到魔物头冒金星，给一般的失衡击倒给骑乘击倒不同</p><h3 id="回避性能-※原本是0-2秒"><a href="#回避性能-※原本是0-2秒" class="headerlink" title="回避性能(※原本是0.2秒)"></a>回避性能(※原本是0.2秒)</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>回避性能+2，回避行动时的无敌时间大幅延长(0.4秒)</td></tr><tr><td>+10</td><td>回避性能+1，回避行动时的无敌时间が少し长くなる(0.33秒)</td></tr><tr><td>-10</td><td>回避性能DOWN，回避行动时的无敌时间缩短</td></tr></tbody></table><h3 id="回避距离"><a href="#回避距离" class="headerlink" title="回避距离"></a>回避距离</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>回避距离UP，回避行动的移动距离延长（但不影响无敌时间）</td></tr></tbody></table><h3 id="回复速度"><a href="#回复速度" class="headerlink" title="回复速度"></a>回复速度</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>回复速度+2，受伤后可以回复的红血条恢复速度大幅上升</td></tr><tr><td>+10</td><td>回复速度+1，受伤后可以回复的红血条恢复速度上升</td></tr><tr><td>-10</td><td>回复速度-1，受伤后可以回复的红血条恢复速度下降</td></tr><tr><td>-15</td><td>回复速度-2，受伤后可以回复的红血条恢复速度大幅下降</td></tr></tbody></table><h3 id="加护"><a href="#加护" class="headerlink" title="加护"></a>加护</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>精霊の加护，受伤时有四分之一的机率伤害量×0.7</td></tr><tr><td>-10</td><td>恶霊の加护，受伤时有四分之一的机率伤害量×1.3</td></tr></tbody></table><h3 id="観察眼"><a href="#観察眼" class="headerlink" title="観察眼"></a>観察眼</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>捕获の见极め，可以在魔物能抓起来的时候在地图看到魔物图标闪烁信号</td></tr></tbody></table><h3 id="减气攻击"><a href="#减气攻击" class="headerlink" title="减气攻击"></a>减气攻击</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>スタミナ夺取，攻击时造成魔物更多气力的减损</td></tr></tbody></table><h3 id="体术"><a href="#体术" class="headerlink" title="体术"></a>体术</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>体术+2，回避行动，格挡成功时，降低消耗的气力(×0.5)</td></tr><tr><td>+10</td><td>体术+1，回避行动，格挡成功时，小幅降低消耗的气力(×0.75)</td></tr><tr><td>-10</td><td>体术-1，回避行动，格挡成功时，小幅增加消耗的气力</td></tr><tr><td>-15</td><td>体术-2，回避行动，格挡成功时，增加消耗的气力</td></tr></tbody></table><p>※隐藏效果：面对大型魔物也能做飞扑的紧急回避，原只有收刀背对魔物奔跑按B才能发动</p><h3 id="达人"><a href="#达人" class="headerlink" title="达人"></a>达人</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+20</td><td>见切り+3，会心率+30％</td></tr><tr><td>+15</td><td>见切り+2，会心率+20％</td></tr><tr><td>+10</td><td>见切り+1，会心率+10％</td></tr><tr><td>-10</td><td>见切り-1，会心率-5％</td></tr><tr><td>-15</td><td>见切り-2，会心率-10％</td></tr><tr><td>-20</td><td>见切り-3，会心率-20％</td></tr></tbody></table><h3 id="溜め短缩"><a href="#溜め短缩" class="headerlink" title="溜め短缩"></a>溜め短缩</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>集中，大剑、槌子、弓的蓄力时间-20％, 双剑、太刀、剑斧(斩击斧)的特殊量槽上升量+20％</td></tr><tr><td>-10</td><td>雑念，大剑、锤子、弓的蓄力时间増加, 双剑、太刀、剑斧(斩击斧)的特殊量槽上升量减少</td></tr></tbody></table><h3 id="纳刀"><a href="#纳刀" class="headerlink" title="纳刀"></a>纳刀</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>纳刀术，收武器速度加快</td></tr></tbody></table><h3 id="炮术"><a href="#炮术" class="headerlink" title="炮术"></a>炮术</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15炮术王</td><td>地图设置的弩炮台、大炮、铳枪的炮撃、竜撃炮、盾斧的榴弾瓶、彻甲榴弾（的爆炸伤害）威力增加 铳枪的竜撃炮冷却时间缩短</td></tr><tr><td>+10</td><td>炮术师，地图设置的弩炮台、大炮、枪盾的炮撃、竜撃炮、盾斧的榴弾瓶、彻甲榴弾（的爆炸伤害）威力增加</td></tr></tbody></table><h3 id="本气"><a href="#本气" class="headerlink" title="本气"></a>本气</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>力の解放+2，一定条件达成后触发９０秒之间的会心率50％上升・气力消费量减至四分之一</td></tr><tr><td>+10</td><td>力の解放+1，一定条件达成后触发９０秒之间的会心率30％上升・气力消费量减至二分之一</td></tr></tbody></table><p>※条件</p><ol><li>跟大型魔物对峙达5分钟  </li><li>合计受到有180点的伤害值(吃满猫饭的体力为150)</li></ol><h3 id="底力"><a href="#底力" class="headerlink" title="底力"></a>底力</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>火事场力+2，体力在40%以下时、防御力+45・攻击力×1.3倍</td></tr><tr><td>+10</td><td>火事场力+1，体力在40%以下时、防御力+45</td></tr><tr><td>-10</td><td>心配性，体力在40%以下时、防御力+21，攻击力×0.7倍</td></tr></tbody></table><h3 id="爆弾强化"><a href="#爆弾强化" class="headerlink" title="爆弾强化"></a>爆弾强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>ボマー，爆弾的伤害×1.3倍、爆破属性的蓄积値×1.2倍</td></tr><tr><td>小タ儿爆弾、小タ儿爆弾G、大タ儿爆弾、大タ儿爆弾G、打上げタ儿爆弾、打ち上げタ儿爆弾G、爆薬、音爆弾的调合成功率100%</td><td></td></tr></tbody></table><h3 id="笛"><a href="#笛" class="headerlink" title="笛"></a>笛</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>笛吹き名人，笛系道具不易坏掉、狩猟笛的旋律効果时间延长</td></tr></tbody></table><h3 id="痛撃"><a href="#痛撃" class="headerlink" title="痛撃"></a>痛撃</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>弱点特効，对肉质柔软的部位（肉质45以上）攻击时、会心率+50%</td></tr></tbody></table><h3 id="重撃"><a href="#重撃" class="headerlink" title="重撃"></a>重撃</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>破壊王，对可以破坏的部位攻击时，破坏积蓄值×1.3</td></tr></tbody></table><h3 id="装填数"><a href="#装填数" class="headerlink" title="装填数"></a>装填数</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>装填数UP，弩系武器使用的弾装填数、弓的蓄力攻击段阶、铳枪的炮撃、充能斧(盾斧)的瓶子装填数増加</td></tr></tbody></table><h3 id="无伤"><a href="#无伤" class="headerlink" title="无伤"></a>无伤</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>フ儿チャージ，满血时攻击力+20</td></tr></tbody></table><h3 id="根性"><a href="#根性" class="headerlink" title="根性"></a>根性</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>根性，HP值在64点以上时受到致命攻击可以撑住一次不死</td></tr></tbody></table><p>　　※要先被打死送猫车才能发动下一次根性</p><h3 id="逆境"><a href="#逆境" class="headerlink" title="逆境"></a>逆境</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>不屈，猫车后攻防上升</td></tr></tbody></table><p>补充：只对有技能且猫车的人才有效，  </p><ol><li>第一次猫车：攻击力1.1倍，防御力提升15%，  </li><li>第二次猫车：攻击力1.2倍，防御力提升30%  </li><li>第三次猫车无效果。</li></ol><h3 id="闘魂"><a href="#闘魂" class="headerlink" title="闘魂"></a>闘魂</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>挑戦者+2，区域内大型魔物发怒的时候攻击会心更加上升(发怒后三秒发动，攻击+20，会心+15%)</td></tr><tr><td>+10</td><td>挑戦者+1，区域内大型魔物发怒的时候攻击会心上升(发怒后三秒发动，攻击+10，会心+10%)</td></tr></tbody></table><p>　　(※发动时猎人的左手部会发光)</p><h3 id="剩り"><a href="#剩り" class="headerlink" title="剩り"></a>剩り</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>剩り名人，骑乘积蓄值1.25倍，骑上去之后用小刀狂砍的骑倒积蓄值1.25倍</td></tr><tr><td>-10</td><td>剩り下手，变得很难骑乘</td></tr></tbody></table><h3 id="研磨术"><a href="#研磨术" class="headerlink" title="研磨术"></a>研磨术</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>刚刃研磨，剑士使用磨刀石之后一分钟内不会掉斩味，远程手的场合则是1分钟内各弹种在会心距离内命中伤害1.75倍，非会心距离命中无效果</td></tr></tbody></table><h3 id="跳跃"><a href="#跳跃" class="headerlink" title="跳跃"></a>跳跃</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>飞燕，跳跃攻击的伤害与积蓄値×1.1倍</td></tr></tbody></table><h3 id="会心强化"><a href="#会心强化" class="headerlink" title="会心强化"></a>会心强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>超会心，暴击时伤害提升</td></tr><tr><td>(※通常会心1.25倍→超会心1.40倍)</td><td></td></tr></tbody></table><h3 id="逆上"><a href="#逆上" class="headerlink" title="逆上"></a>逆上</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>逆恨み，体力槽有红条的时候攻击力+20</td></tr></tbody></table><h3 id="穷地"><a href="#穷地" class="headerlink" title="穷地"></a>穷地</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>死中に活，中异常状态的时候攻击力+20(不可加迭，不会因为身上异常越多提升越多)</td></tr></tbody></table><h3 id="だるま"><a href="#だるま" class="headerlink" title="だるま"></a>だるま</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>だるま，雪・泡・骨等把人包住的异常无效化</td></tr></tbody></table><h3 id="チャンス"><a href="#チャンス" class="headerlink" title="チャンス"></a>チャンス</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>切り札，跟大型魔物战斗中，机会来临时狩技威力上升(这边的机会大概是像骑倒之类的)</td></tr></tbody></table><p>※效果持续1分钟，使用狩技的伤害或持续时间1.2倍，此外，部分的狩技效果上升</p><h3 id="无心"><a href="#无心" class="headerlink" title="无心"></a>无心</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>明镜止水，狩技&#x2F;勇气&#x2F;炼金槽累积速度上升</td></tr></tbody></table><h3 id="英雄の盾"><a href="#英雄の盾" class="headerlink" title="英雄の盾"></a>英雄の盾</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>英雄の护り，把小伤害无效化</td></tr></tbody></table><p>(※5以下伤害无效化，还有屁股不会着地的功能)</p><h3 id="泡沫"><a href="#泡沫" class="headerlink" title="泡沫"></a>泡沫</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>泡沫の舞，回避行动会缠上泡沫，不会进入泡沫大(整个人被泡泡包住)，缠泡沫的时候带有相当于回避性能+1跟体术+1的能力，视为异常可以发动穷地</td></tr></tbody></table><h3 id="连撃"><a href="#连撃" class="headerlink" title="连撃"></a>连撃</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>连撃の心得，连续攻击命中时会心率上升(5秒内，2hit+25%会心，3hit+30%)</td></tr></tbody></table><p>※只要5秒内有攻击命中，会一直重置5秒持续时间，效果消失前命中3次攻击会心效果变成提升30%(一样为持续5秒机制)。<br>※操虫棍用虫攻击可以纳入连击计算的第一下，所以先用虫撞过之后用棍子砍的第一刀(实则为第二刀)就能触发效果  </p><h3 id="里会心"><a href="#里会心" class="headerlink" title="里会心"></a>里会心</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>痛恨会心，负会心一定机率翻转成正值</td></tr></tbody></table><p>※这技能只对负会心武器有效，负会心发动时，有25%的机率将负会心转成超绝会心，将原本0.75倍的伤害转换成2倍伤害，以-50%会心的武器而言，发动里会心的机率：50%(负会心机率)x25%→12.5%。</p><h3 id="我慢"><a href="#我慢" class="headerlink" title="我慢"></a>我慢</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>虎视眈々，被打之后狩技槽、勇气槽、錬金槽上升</td></tr></tbody></table><h3 id="护石强化"><a href="#护石强化" class="headerlink" title="护石强化"></a>护石强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>护石系统倍化，护石的技能点加倍(包含插在护石上的技能珠)</td></tr></tbody></table><h3 id="刃鳞"><a href="#刃鳞" class="headerlink" title="刃鳞"></a>刃鳞</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>刃鳞磨き，拔刀中回避翻滚会有一下效果</td></tr></tbody></table><ul><li>剑士：斩れ味少量回复  </li><li>弓：接撃瓶强化</li></ul><p>补充：轻弩、重弩拔刀中作回避动作时，有机率装填一颗弹药，剑士必须作回避动作数次才能回复一次斩味</p><h3 id="秘术"><a href="#秘术" class="headerlink" title="秘术"></a>秘术</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>スキ儿加点＋2，全身装备的技能点+2</td></tr></tbody></table><h3 id="SP延长"><a href="#SP延长" class="headerlink" title="SP延长"></a>SP延长</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>SP时间延长，SP狩技发动后的SP状态时间延长</td></tr></tbody></table><h3 id="龙气"><a href="#龙气" class="headerlink" title="龙气"></a>龙气</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>龙气活性，体力三分之二以下时身上出现龙属性异常(无效龙属以外武器的属性)，附带龙属异常的时候全耐性升至50，攻击力提升1.1倍</td></tr></tbody></table><h2 id="战斗系技能-剑士专用"><a href="#战斗系技能-剑士专用" class="headerlink" title="战斗系技能(剑士专用)"></a>战斗系技能(剑士专用)</h2><h3 id="斩れ味"><a href="#斩れ味" class="headerlink" title="斩れ味"></a>斩れ味</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>业物，攻击时、格挡成功时（只有大剑跟盾斧特定情况格挡会掉斩味）斩れ味的消耗减半</td></tr><tr><td>-10</td><td>なまくら，攻击时、格挡成功成功时（一样大剑跟盾斧限定）斩れ味的消耗倍增</td></tr></tbody></table><h3 id="剑术"><a href="#剑术" class="headerlink" title="剑术"></a>剑术</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>心眼，不会弹刀</td></tr></tbody></table><h3 id="匠"><a href="#匠" class="headerlink" title="匠"></a>匠</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>斩れ味レベ儿+2，斩れ味大幅延长</td></tr><tr><td>+10</td><td>斩れ味レベ儿+1，斩れ味延长</td></tr></tbody></table><h3 id="研ぎ师"><a href="#研ぎ师" class="headerlink" title="研ぎ师"></a>研ぎ师</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>砥石使用高速化，磨刀动作只要做一下就磨好武器</td></tr><tr><td>-10</td><td>砥石使用低速化，磨刀动作要做5下才能磨好武器</td></tr></tbody></table><p>###抜刀会心</p><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>抜刀术【技】拔出武器攻击的那一下会心率+100％</td></tr></tbody></table><h3 id="抜刀减气"><a href="#抜刀减气" class="headerlink" title="抜刀减气"></a>抜刀减气</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10 抜刀术【力】切断属性的武器拔刀攻击的那一下附带打击武器的减气功能</td><td></td></tr></tbody></table><p>(※命中头部也会有气绝效果)</p><h3 id="ガード强化"><a href="#ガード强化" class="headerlink" title="ガード强化"></a>ガード强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>ガード强化，可以挡住平常档不住的攻击</td></tr></tbody></table><h3 id="ガード性能"><a href="#ガード性能" class="headerlink" title="ガード性能"></a>ガード性能</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>ガード性能+2，格挡时被打退的伤害大幅降低</td></tr><tr><td>+10</td><td>ガード性能+1，格挡时被打退的伤害小幅降低</td></tr><tr><td>-10</td><td>ガード性能-1，格挡时被打退的伤害增加</td></tr></tbody></table><h3 id="钝器"><a href="#钝器" class="headerlink" title="钝器"></a>钝器</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>钝器使い，武器斩味变烂的时候攻击力上升</td></tr></tbody></table><ol><li>紫、白、蓝斩味无效果  </li><li>绿斩:攻击力1.1倍  </li><li>黄斩：攻击力1.15倍  </li><li>橘、红斩：攻击1.2倍</li></ol><p>※基本上钝器有算斩味的攻击补正为绿斩时效益最好</p><h3 id="纳刀研磨"><a href="#纳刀研磨" class="headerlink" title="纳刀研磨"></a>纳刀研磨</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>挑戦者の纳刀，魔物于愤怒状态时纳刀一定机率回复斩れ味</td></tr></tbody></table><h2 id="战斗系技能-远程手专用"><a href="#战斗系技能-远程手专用" class="headerlink" title="战斗系技能(远程手专用)"></a>战斗系技能(远程手专用)</h2><h3 id="通常弾追加"><a href="#通常弾追加" class="headerlink" title="通常弾追加"></a>通常弾追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>通常弾全LV追加，可以装填各种通常弹</td></tr></tbody></table><h3 id="贯通弾追加"><a href="#贯通弾追加" class="headerlink" title="贯通弾追加"></a>贯通弾追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>贯通弾全LV追加，可以装填各种贯通弹</td></tr><tr><td>+10</td><td>贯通弾LV1追加，可以装填LV1贯通弾</td></tr></tbody></table><h3 id="散弾追加"><a href="#散弾追加" class="headerlink" title="散弾追加"></a>散弾追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>散弾全LV追加，可以装填所有散弹</td></tr><tr><td>+10</td><td>散弾LV1追加，可以装填LV1散弹</td></tr></tbody></table><h3 id="榴弾追加"><a href="#榴弾追加" class="headerlink" title="榴弾追加"></a>榴弾追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>彻甲榴弾全LV追加，可装填各种彻甲榴弹</td></tr><tr><td>+10</td><td>彻甲榴弾LV1追加，可装填LV1彻甲榴弹</td></tr></tbody></table><h3 id="扩散弾追加"><a href="#扩散弾追加" class="headerlink" title="扩散弾追加"></a>扩散弾追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>扩散弾全LV追加，可装填所有扩散弹</td></tr><tr><td>+10</td><td>扩散弾LV1追加，可装填LV1扩散弹</td></tr></tbody></table><h3 id="速射"><a href="#速射" class="headerlink" title="速射"></a>速射</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>连発数+1，轻弩速射连发数+1</td></tr></tbody></table><h3 id="反动-轻弩重弩都适用"><a href="#反动-轻弩重弩都适用" class="headerlink" title="反动(轻弩重弩都适用)"></a>反动(轻弩重弩都适用)</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+20</td><td>反动軽减+3，弩的反动大幅减轻</td></tr><tr><td>+15</td><td>反动軽减+2，弩的反动减轻</td></tr><tr><td>+10</td><td>反动軽减+1，弩的反动稍微减轻</td></tr><tr><td>-10</td><td>反动軽减-1，弩的反动稍微增大</td></tr><tr><td>-15</td><td>反动軽减-2，弩的反动增大</td></tr><tr><td>-20</td><td>反动軽减-3，弩的反动大幅增大</td></tr></tbody></table><h3 id="精密射撃"><a href="#精密射撃" class="headerlink" title="精密射撃"></a>精密射撃</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>ブレ抑制+2，全部的弹道不会偏离</td></tr><tr><td>+10</td><td>ブレ抑制+1，弹道大偏离变小偏离，小偏离无效化</td></tr><tr><td>-10</td><td>ブレ抑制-1，弹道偏离小变大</td></tr><tr><td>-15</td><td>ブレ抑制-2，怎么打怎么偏</td></tr></tbody></table><h3 id="强撃瓶追加"><a href="#强撃瓶追加" class="headerlink" title="强撃瓶追加"></a>强撃瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>强撃ビン全LV追加，可以装填所有强击瓶</td></tr><tr><td>+10</td><td>强撃ビンLV1追加，可以装填强击瓶LV1</td></tr></tbody></table><h3 id="属强瓶追加"><a href="#属强瓶追加" class="headerlink" title="属强瓶追加"></a>属强瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+15</td><td>属强ビン全LV追加，可以装填所有属强瓶</td></tr><tr><td>+10</td><td>属强ビンLV1追加，可以装填属强瓶LV1</td></tr></tbody></table><h3 id="接撃瓶追加"><a href="#接撃瓶追加" class="headerlink" title="接撃瓶追加"></a>接撃瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>接撃ビン追加，可以装填接撃瓶</td></tr></tbody></table><h3 id="毒瓶追加"><a href="#毒瓶追加" class="headerlink" title="毒瓶追加"></a>毒瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>毒ビン追加，可以装填毒瓶</td></tr></tbody></table><h3 id="麻痹瓶追加"><a href="#麻痹瓶追加" class="headerlink" title="麻痹瓶追加"></a>麻痹瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>麻痹ビン追加，可以装填麻痹瓶</td></tr></tbody></table><h3 id="睡眠瓶追加"><a href="#睡眠瓶追加" class="headerlink" title="睡眠瓶追加"></a>睡眠瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>睡眠ビン追加，可以装填睡眠瓶</td></tr></tbody></table><h3 id="减气瓶追加"><a href="#减气瓶追加" class="headerlink" title="减气瓶追加"></a>减气瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>减气ビン追加可以装填减气瓶</td></tr></tbody></table><h3 id="爆破瓶追加"><a href="#爆破瓶追加" class="headerlink" title="爆破瓶追加"></a>爆破瓶追加</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>爆破ビン追加，可以追加爆破瓶</td></tr></tbody></table><h3 id="装填速度"><a href="#装填速度" class="headerlink" title="装填速度"></a>装填速度</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+20</td><td>装填速度+3，弩系武器的Reload大幅加快、弓的瓶子切换不用装填</td></tr><tr><td>+15</td><td>装填速度+2，弩系武器的Reload加速、弓的瓶子切换不用装填</td></tr><tr><td>+10</td><td>装填速度+1，弩炮的的Reload速度稍微加快、弓的瓶子装备速度加快</td></tr><tr><td>-10</td><td>装填速度-1，弩系武器的Reload跟弓的装瓶速度稍微减缓</td></tr><tr><td>-15</td><td>装填速度-2，弩系武器的Reload跟弓装瓶速度减缓</td></tr><tr><td>-20</td><td>装填速度-3，弩系武器的Reload跟弓装瓶速度大幅减缓</td></tr></tbody></table><h3 id="通常弾强化"><a href="#通常弾强化" class="headerlink" title="通常弾强化"></a>通常弾强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>通常弾・连射矢UP，通常弹跟连射矢的威力×1.1倍</td></tr></tbody></table><h3 id="贯通弾强化"><a href="#贯通弾强化" class="headerlink" title="贯通弾强化"></a>贯通弾强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>贯通弾・贯通矢UP，贯通弹之贯通矢的威力×1.1倍</td></tr></tbody></table><h3 id="散弾强化"><a href="#散弾强化" class="headerlink" title="散弾强化"></a>散弾强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>散弾・扩散矢UP，散弹的威力×1.2倍、扩散矢的威力×1.3倍</td></tr></tbody></table><h3 id="射法"><a href="#射法" class="headerlink" title="射法"></a>射法</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>弾导强化，一部分的子弹&#x2F;箭矢伤害最高的时间带延长</td></tr></tbody></table><h3 id="调合数"><a href="#调合数" class="headerlink" title="调合数"></a>调合数</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>最大数生产，调和生产数有浮动的道具时(讲白了就是子弹&#x2F;瓶子类)，必为最大生产数</td></tr></tbody></table><h3 id="弾薬节约"><a href="#弾薬节约" class="headerlink" title="弾薬节约"></a>弾薬节约</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>弾薬节约，射撃时、背包里的弾或瓶有机会不消耗(※不管你躺着射，坐着射，趴着射都有效)</td></tr></tbody></table><h3 id="重撃弾强化"><a href="#重撃弾强化" class="headerlink" title="重撃弾强化"></a>重撃弾强化</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>重撃弾・重射矢UP，重撃弹・重射矢威力提升</td></tr></tbody></table><h3 id="変则射撃"><a href="#変则射撃" class="headerlink" title="変则射撃"></a>変则射撃</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>特定射撃强化，特定的射撃(武器内藏弹、曲射、刚射)威力×1.2倍</td></tr></tbody></table><h2 id="猫强化技能"><a href="#猫强化技能" class="headerlink" title="猫强化技能"></a>猫强化技能</h2><h3 id="采配"><a href="#采配" class="headerlink" title="采配"></a>采配</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>オトモへの采配，同行伙伴猫能力强化</td></tr></tbody></table><h3 id="号令"><a href="#号令" class="headerlink" title="号令"></a>号令</h3><table><thead><tr><th>发动值</th><th>效果</th></tr></thead><tbody><tr><td>+10</td><td>オトモへの号令，伙伴猫会听命令行动，做特殊动作时会跟猫一起回复</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Sunny Day Lyrics</title>
    <link href="/2017/2017-08-17-sunny-day-lyrics/"/>
    <url>/2017/2017-08-17-sunny-day-lyrics/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs stata">故事的小黄花 从出生那年就飘着<br>童年的荡秋千 随记忆一直晃到现在<br>Re <span class="hljs-keyword">So</span> <span class="hljs-keyword">So</span> Si <span class="hljs-keyword">Do</span> Si <span class="hljs-keyword">La</span><br><span class="hljs-keyword">So</span> <span class="hljs-keyword">La</span> Si Si Si Si <span class="hljs-keyword">La</span> Si <span class="hljs-keyword">La</span> <span class="hljs-keyword">So</span><br>吹着前奏 望着天空<br>我想起花瓣 试着掉落<br>为你翘课的那一天<br>花落的那一天<br>教室的那一间 我怎么看不见<br>消失的下雨天 我好想再淋一遍<br>没想到 失去的勇气我还留着<br>好想再问一遍 你会等待还是离开<br>刮风这天 我试过握着你手<br>但偏偏 雨渐渐<br>大到我看你不见<br>还要多久 我才能在你身边<br>等到放晴的那天<br>也许我会比较好一点<br>从前从前 有个人爱你很久<br>但偏偏 风渐渐<br>把距离吹得好远<br>好不容易 又能再多爱一天<br>但故事的最后<br>你好像还是说了 拜拜<br>为你翘课的那一天<br>花落的那一天<br>教室的那一间 我怎么看不见<br>消失的下雨天 我好想再淋一遍<br>没想到 失去的勇气我还留着<br>好想再问一遍<br>你会等待还是离开<br>刮风这天 我试过握着你手<br>但偏偏 雨渐渐<br>大到我看你不见<br>还要多久 我才能在你身边<br>等到放晴的那天<br>也许我会比较好一点<br>从前从前 有个人爱你很久<br>偏偏 风渐渐<br>把距离吹得好远<br>好不容易 又能再多爱一天<br>但故事的最后<br>你好像还是说了 拜拜<br>刮风这天 我试过握着你手<br>但偏偏 雨渐渐<br>大到我看你不见<br>还要多久 我才能够在你身边<br>等到放晴那天<br>也许我会比较好一点<br>从前从前 有个人爱你很久<br>但偏偏 风渐渐<br>把距离吹得好远<br>好不容易 又能再多爱一天<br>但故事的最后<br>你好像还是说了 拜拜<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Raw type and Wildcard</title>
    <link href="/2017/2017-07-05-raw-type-and-wildcard/"/>
    <url>/2017/2017-07-05-raw-type-and-wildcard/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Raw-type"><a href="#Raw-type" class="headerlink" title="Raw type"></a>Raw type</h2><p>Raw type means the <code>type</code> is unbounded&#x2F;unspecified.<br>The existence of it is for backward compatibility.<br>But still, it is not recommend to use this raw type.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">rawList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">2</span>);<br>        rawList.add(<span class="hljs-number">1</span>);<br>        <span class="hljs-comment">//warning: [unchecked] unchecked call to add(E) as a member of the raw type List</span><br>        rawList.add(<span class="hljs-string">&quot;Rugal&quot;</span>);<br>        <span class="hljs-comment">//warning: [unchecked] unchecked call to add(E) as a member of the raw type List</span><br>        <span class="hljs-keyword">for</span> (Object elem: rawList)<br>            System.out.println(elem);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>You will get warning talking about unchecked type.<br>Raw type doesn’t provide type check, so you can put different type into a single container without getting compilation error.<br>But this will cause trouble if you try to cast class that is not compatible.  </p><p>Again, Raw type is not recommended.</p><h2 id="Wildcard"><a href="#Wildcard" class="headerlink" title="Wildcard"></a><a href="https://docs.oracle.com/javase/tutorial/java/generics/wildcards.html">Wildcard</a></h2><h3 id="Unbounded-wildcard"><a href="#Unbounded-wildcard" class="headerlink" title="Unbounded wildcard"></a>Unbounded wildcard</h3><p>You can’t assign <code>&lt;A&gt;</code> to <code>&lt;B&gt;</code> even if the A is inherit from B. This is because of type check in compile time.<br>In order to assign relevant types to their base type, <code>wildcard</code> comes into being.  </p><h3 id="Assignable-by-any-type"><a href="#Assignable-by-any-type" class="headerlink" title="Assignable by any type"></a>Assignable by any type</h3><p>Any container can assign to <code>&lt;?&gt;</code> . </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>        list.add(<span class="hljs-string">&quot;Bernstein&quot;</span>);<br>        list.add(<span class="hljs-string">&quot;Rugal&quot;</span>);<br>        List&lt;?&gt; l = list;<br>        <span class="hljs-keyword">for</span> (Object elem: l)<br>        <span class="hljs-comment">//But ? is only compatible with Object</span><br>        <span class="hljs-comment">//Refer to following section</span><br>            System.out.println(elem);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>You can even assign raw type container to it.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">List</span> <span class="hljs-variable">rawList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">2</span>);<br>        rawList.add(<span class="hljs-number">1</span>);<br>        rawList.add(<span class="hljs-string">&quot;Rugal&quot;</span>);<br>        List&lt;?&gt; list = rawList;<br>        <span class="hljs-keyword">for</span> (Object elem: list)<br>            System.out.println(elem);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Type-related-operations-are-not-compatible"><a href="#Type-related-operations-are-not-compatible" class="headerlink" title="Type related operations are not compatible"></a>Type related operations are not compatible</h3><p>Any operations that type related, including <code>add</code>, <code>class cast</code> etc.,  are not allowed in unbounded wildcard.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>       List&lt;?&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>       list.add(<span class="hljs-number">1</span>); <br>       <span class="hljs-comment">//Main.java:9: error: no suitable method found for add(int)</span><br>       <span class="hljs-keyword">for</span> (Object elem: list)<br>            System.out.print(elem + <span class="hljs-string">&quot; &quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Bounded-wildcard"><a href="#Bounded-wildcard" class="headerlink" title="Bounded wildcard"></a>Bounded wildcard</h2><p>For this section, please refer to my <a href="!--swig%EF%BF%BC4--">POST</a></p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Deep inside Git</title>
    <link href="/2017/2017-06-22-deep-inside-git/"/>
    <url>/2017/2017-06-22-deep-inside-git/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Git-init"><a href="#Git-init" class="headerlink" title="Git init"></a>Git init</h1><h3 id="Init-repository"><a href="#Init-repository" class="headerlink" title="Init repository"></a>Init repository</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git init<br>Initialized empty Git repository <span class="hljs-keyword">in</span> /Users/ryao/Workspaces/deep-inside-git/.git/<br></code></pre></td></tr></table></figure><h3 id="git"><a href="#git" class="headerlink" title=".git"></a>.git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; tree .git/<br>.git/<br>├── HEAD<br>├── config<br>├── description<br>├── hooks<br>│   ├── applypatch-msg.sample<br>│   ├── commit-msg.sample<br>│   ├── post-update.sample<br>│   ├── pre-applypatch.sample<br>│   ├── pre-commit.sample<br>│   ├── pre-push.sample<br>│   ├── pre-rebase.sample<br>│   ├── pre-receive.sample<br>│   ├── prepare-commit-msg.sample<br>│   └── update.sample<br>├── info<br>│   └── exclude<br>├── objects<br>│   ├── info<br>│   └── pack<br>└── refs<br>    ├── heads<br>    └── tags<br><br>8 directories, 14 files<br></code></pre></td></tr></table></figure><p>This is the structure of <code>.git</code> directory. So basically:  </p><ul><li>HEAD: pointing to the current HEAD</li><li>hooks: web hooks that make git host programmable</li><li>logs: this is where <code>log</code> read from</li><li>objects: this is where commit information and committed files are stored</li><li>refs: this is where <code>reflog</code> read from</li></ul><h3 id="HEAD-content"><a href="#HEAD-content" class="headerlink" title="HEAD content"></a>HEAD content</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">cat</span> .git/HEAD<br>ref: refs/heads/master<br>[ryao@macpro-gn07 deep-inside-git]&gt; ll .git/refs/heads/master<br><span class="hljs-built_in">ls</span>: .git/refs/heads/master: No such file or directory<br></code></pre></td></tr></table></figure><p>As we don’t have any commit yet, the file that referred by <code>HEAD</code> is not exist.  </p><h3 id="hash-object"><a href="#hash-object" class="headerlink" title="hash-object"></a>hash-object</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Rugal&#x27;</span> | git hash-object --stdin<br>2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Rugal&#x27;</span> &gt; README.md<br>[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">cat</span> README.md | git hash-object --stdin<br>2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br></code></pre></td></tr></table></figure><p>In order to start our tutorial, let me introduce <code>hash-object</code> tool.<br>This tool is what git uses for computing hash for objects.<br>By testing the code above, we can see that the hash of a file is simply the hash of its content.  </p><h1 id="Git-add"><a href="#Git-add" class="headerlink" title="Git add"></a>Git add</h1><h3 id="Updated-objects-folder"><a href="#Updated-objects-folder" class="headerlink" title="Updated objects folder"></a>Updated objects folder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git add -A &amp;&amp; git status<br>On branch master<br><br>Initial commit<br><br>Changes to be committed:<br>  (use <span class="hljs-string">&quot;git rm --cached &lt;file&gt;...&quot;</span> to unstage)<br><br>        new file:   README.md<br><br>[ryao@macpro-gn07 deep-inside-git]&gt; tree .git/objects<br>.git/objects/<br>├── 2f<br>│   └── b811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>├── info<br>└── pack<br></code></pre></td></tr></table></figure><p>By simply add the new file into staging area, we have a new object being added into <code>.git/objects</code> folder.<br>We notice the folder name along with the file name is <code>2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a</code>, which is exactly the same with the hash we calculated above.<br>From this section we realize, that once a file is staged, its information, type will be hashed and store into <code>.git/objects</code> under the folder&#x2F;file of the hash.  </p><h3 id="Object-content"><a href="#Object-content" class="headerlink" title="Object content"></a>Object content</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#original content</span><br>[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">cat</span> .git/objects/2f/b811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>xKOR0*MOV<br><span class="hljs-comment">#size</span><br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -s 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>6<br><span class="hljs-comment">#type</span><br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -t 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>blob<br><span class="hljs-comment">#content</span><br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>Rugal<br></code></pre></td></tr></table></figure><p>Here another interesting tool comes, <code>cat-file</code>. We can use this tool to inspect objects information.<br>We will use this tool to show information of an object later.  </p><h1 id="Git-commit"><a href="#Git-commit" class="headerlink" title="Git commit"></a>Git commit</h1><h3 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h3><p>In this section we will commit our first file. Let’s monitor what will change.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git commit -m<span class="hljs-string">&quot;Initial commit&quot;</span><br>[master (root-commit) f73a6ae] Initial commit<br> 1 file changed, 1 insertion(+)<br> create mode 100644 README.md<br><br>[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">cat</span> .git/refs/heads/master<br>f73a6ae93b095b899fbdb3b2485f5829b9f460cf<br></code></pre></td></tr></table></figure><p>After the first commit, we got a file <code>master</code> under <code>.git/refs/heads</code>.<br>The content of file is the hashcode of the commit.  </p><h3 id="Updated-objects-folder-1"><a href="#Updated-objects-folder-1" class="headerlink" title="Updated objects folder"></a>Updated objects folder</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; tree .git/objects<br>.git/objects<br>├── objects<br>├── 2f<br>│   └── b811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>├── 36<br>│   └── 2032c56bddec6ad5b639e16eeb594f92886516<br>├── f7<br>│   └── 3a6ae93b095b899fbdb3b2485f5829b9f460cf<br>├── info<br>└── pack<br></code></pre></td></tr></table></figure><h2 id="Git-commit-objects"><a href="#Git-commit-objects" class="headerlink" title="Git commit objects"></a>Git commit objects</h2><p>Now let’s inspect the commit objects.  </p><h3 id="Commit-information"><a href="#Commit-information" class="headerlink" title="Commit information"></a>Commit information</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -t f73a6ae93b095b899fbdb3b2485f5829b9f460cf<br>commit<br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p f73a6ae93b095b899fbdb3b2485f5829b9f460cf<br>tree 362032c56bddec6ad5b639e16eeb594f92886516<br>author Rugal Bernstein &lt;ryao@peakcontact.com&gt; 1498230956 -0400<br>committer Rugal Bernstein &lt;ryao@peakcontact.com&gt; 1498230956 -0400<br><br>Initial commit<br></code></pre></td></tr></table></figure><p>This object is of <code>commit</code> type, which means it contains information of a commit, including:  </p><ul><li>Hash of tree</li><li>author information</li><li>commiter information</li><li>commit message</li></ul><h3 id="Commit-tree"><a href="#Commit-tree" class="headerlink" title="Commit tree"></a>Commit tree</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -t 362032c56bddec6ad5b639e16eeb594f92886516<br>tree<br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 362032c56bddec6ad5b639e16eeb594f92886516<br>100644 blob 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a    README.md<br></code></pre></td></tr></table></figure><p>This object is of <code>tree</code> type. It contains the files involved in one commit.  </p><ul><li>File permission</li><li>File type</li><li>File hash</li><li>File name</li></ul><p>Notice that file name and content are separate, which means file content can be reused. I can see this in later section.  </p><h3 id="Commit-object-content"><a href="#Commit-object-content" class="headerlink" title="Commit object content"></a>Commit object content</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -t 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>blob<br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>Rugal<br></code></pre></td></tr></table></figure><p>This object is of <code>blob</code> type. It contains the original file content.  </p><h1 id="Second-Commit"><a href="#Second-Commit" class="headerlink" title="Second Commit"></a>Second Commit</h1><p>Now let’s make another commit that includes difference content and different name from <code>README.md</code>.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Bernstein&#x27;</span> &gt; INSTALL.md &amp;&amp; git add -A<br>[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">cat</span> INSTALL.md  | git hash-object --stdin<br>56757e169d62beeb6371e7f5d3bd6bd507edd2f6<br>[ryao@macpro-gn07 deep-inside-git]&gt; tree .git/objects/<br>.git/objects/<br>├── 2f<br>│   └── b811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>├── 36<br>│   └── 2032c56bddec6ad5b639e16eeb594f92886516<br>├── 56<br>│   └── 757e169d62beeb6371e7f5d3bd6bd507edd2f6<br>├── f7<br>│   └── 3a6ae93b095b899fbdb3b2485f5829b9f460cf<br>├── info<br>└── pack<br><br>6 directories, 4 files<br><br>[ryao@macpro-gn07 deep-inside-git]&gt; git commit -m<span class="hljs-string">&quot;Add INSTALL.md file&quot;</span><br>[master 800d7b9] Add INSTALL.md file<br> 1 file changed, 1 insertion(+)<br> create mode 100644 INSTALL.md<br>[ryao@macpro-gn07 deep-inside-git]&gt; git lg<br>* 800d7b9 - (HEAD -&gt; master) Add INSTALL.md file (68 seconds ago) &lt;Rugal Bernstein&gt;<br>* f73a6ae - Initial commit (13 minutes ago) &lt;Rugal Bernstein&gt;<br></code></pre></td></tr></table></figure><p>Now we have 3 more git objects.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>[ryao@macpro-gn07 deep-inside-git]&gt; tree .git/objects/<br>.git/objects/<br>├── 2f<br>│   └── b811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>├── 36<br>│   └── 2032c56bddec6ad5b639e16eeb594f92886516<br>├── 56<br>│   └── 757e169d62beeb6371e7f5d3bd6bd507edd2f6<br>├── 80<br>│   └── 0d7b9974fd1d4ad26791dfcf4bb0478c51c4da<br>├── c6<br>│   └── 919ff8ab7ff578ebb6995121d501aa645d0797<br>├── f7<br>│   └── 3a6ae93b095b899fbdb3b2485f5829b9f460cf<br>├── info<br>└── pack<br><br>8 directories, 6 files<br></code></pre></td></tr></table></figure><p>And the master is pointing to the latest commit.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">cat</span> .git/refs/heads/master<br>800d7b9974fd1d4ad26791dfcf4bb0478c51c4da<br></code></pre></td></tr></table></figure><h2 id="Git-commit-objects-1"><a href="#Git-commit-objects-1" class="headerlink" title="Git commit objects"></a>Git commit objects</h2><h3 id="Commit-information-1"><a href="#Commit-information-1" class="headerlink" title="Commit information"></a>Commit information</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 800d7b9974fd1d4ad26791dfcf4bb0478c51c4da<br>tree c6919ff8ab7ff578ebb6995121d501aa645d0797<br>parent f73a6ae93b095b899fbdb3b2485f5829b9f460cf<br>author Rugal Bernstein &lt;ryao@peakcontact.com&gt; 1498231664 -0400<br>committer Rugal Bernstein &lt;ryao@peakcontact.com&gt; 1498231664 -0400<br><br>Add INSTALL.md file<br></code></pre></td></tr></table></figure><p>This file not only has the same type of data as before, but also has a <code>parent</code> field indicates which commit it follows.  </p><h3 id="Commit-tree-1"><a href="#Commit-tree-1" class="headerlink" title="Commit tree"></a>Commit tree</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p c6919ff8ab7ff578ebb6995121d501aa645d0797<br>100644 blob 56757e169d62beeb6371e7f5d3bd6bd507edd2f6    INSTALL.md<br>100644 blob 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a    README.md<br></code></pre></td></tr></table></figure><p>We have one more file in <code>tree</code>.  </p><h3 id="Commit-object-content-1"><a href="#Commit-object-content-1" class="headerlink" title="Commit object content"></a>Commit object content</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 56757e169d62beeb6371e7f5d3bd6bd507edd2f6<br>Bernstein<br>[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a<br>Rugal<br></code></pre></td></tr></table></figure><h1 id="Override"><a href="#Override" class="headerlink" title="Override"></a>Override</h1><p>Finally let’s do another commit, where we are going to override <code>INSTALL.md</code> file with the same content as <code>README.md</code>.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;Rugal&#x27;</span> &gt; INSTALL.md &amp;&amp; git commit -am<span class="hljs-string">&quot;Override content of INSTALL.md&quot;</span><br>[master 95ab7c4] Override content of INSTALL.md<br> 1 file changed, 1 insertion(+), 1 deletion(-)<br><br>[ryao@macpro-gn07 deep-inside-git]&gt; git lg<br>* 95ab7c4 - (HEAD -&gt; master) Override content of INSTALL.md (7 seconds ago) &lt;Rugal Bernstein&gt;<br>* 800d7b9 - Add INSTALL.md file (15 minutes ago) &lt;Rugal Bernstein&gt;<br>* f73a6ae - Initial commit (27 minutes ago) &lt;Rugal Bernstein&gt;<br></code></pre></td></tr></table></figure><h3 id="Git-object-content"><a href="#Git-object-content" class="headerlink" title="Git object content"></a>Git object content</h3><h3 id="Commit-information-2"><a href="#Commit-information-2" class="headerlink" title="Commit information"></a>Commit information</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git cat-file -p 95ab7c4<br>tree 2d5cfaf5513d9dc6876124ff683241bb5c61e0ae<br>parent 800d7b9974fd1d4ad26791dfcf4bb0478c51c4da<br>author Rugal Bernstein &lt;ryao@peakcontact.com&gt; 1498232582 -0400<br>committer Rugal Bernstein &lt;ryao@peakcontact.com&gt; 1498232582 -0400<br><br>Override content of INSTALL.md<br></code></pre></td></tr></table></figure><p>Not many difference than previous commit.  </p><h3 id="Commit-tree-2"><a href="#Commit-tree-2" class="headerlink" title="Commit tree"></a>Commit tree</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><br>[ryao@macpro-gn07 deep-<span class="hljs-keyword">inside-git]&gt; </span>git cat-file -p <span class="hljs-number">2</span>d5cfaf5513d9dc<span class="hljs-symbol">6876124f</span>f<span class="hljs-symbol">683241b</span>b5c61e0ae<br><span class="hljs-number">100644</span> <span class="hljs-keyword">blob </span><span class="hljs-number">2</span>fb811a4ca<span class="hljs-symbol">96b</span>3d0ac<span class="hljs-symbol">9b</span><span class="hljs-symbol">4f</span>b8aa3d96e6a809509a    <span class="hljs-keyword">INSTALL.md</span><br><span class="hljs-keyword"></span><span class="hljs-number">100644</span> <span class="hljs-keyword">blob </span><span class="hljs-number">2</span>fb811a4ca<span class="hljs-symbol">96b</span>3d0ac<span class="hljs-symbol">9b</span><span class="hljs-symbol">4f</span>b8aa3d96e6a809509a    README.md<br></code></pre></td></tr></table></figure><p>Something weird in this file, we can see both files have the same hash content.<br>This means git can reuse object to reduce repository size.  </p><h1 id="Git-GC"><a href="#Git-GC" class="headerlink" title="Git GC"></a>Git GC</h1><p>Some more interesting tool.</p><p>We can use <code>gc</code> to compress objects into one pack&#x2F;index.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git gc<br>Counting objects: 8, <span class="hljs-keyword">done</span>.<br>Delta compression using up to 4 threads.<br>Compressing objects: 100% (5/5), <span class="hljs-keyword">done</span>.<br>Writing objects: 100% (8/8), <span class="hljs-keyword">done</span>.<br>Total 8 (delta 0), reused 8 (delta 0)<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; tree .git/objects/<br>.git/objects/<br>├── info<br>│   └── packs<br>└── pack<br>    ├── pack-1ba47dfdc2c98b428c17082e4ee16e8c111c42ac.idx<br>    └── pack-1ba47dfdc2c98b428c17082e4ee16e8c111c42ac.pack<br><br>2 directories, 3 files<br></code></pre></td></tr></table></figure><h1 id="Git-verify-pack"><a href="#Git-verify-pack" class="headerlink" title="Git verify-pack"></a>Git verify-pack</h1><p>After compression, we can still see object content by using <code>verify-pack</code>.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ryao@macpro-gn07 deep-inside-git]&gt; git verify-pack -v .git/objects/pack/pack-1ba47dfdc2c98b428c17082e4ee16e8c111c42ac.idx<br>95ab7c4946063d036a84f677081271a8106407ac commit 255 178 12<br>800d7b9974fd1d4ad26791dfcf4bb0478c51c4da commit 244 172 190<br>f73a6ae93b095b899fbdb3b2485f5829b9f460cf commit 191 131 362<br>2fb811a4ca96b3d0ac9b4fb8aa3d96e6a809509a blob   6 15 493<br>2d5cfaf5513d9dc6876124ff683241bb5c61e0ae tree   75 61 508<br>c6919ff8ab7ff578ebb6995121d501aa645d0797 tree   75 82 569<br>56757e169d62beeb6371e7f5d3bd6bd507edd2f6 blob   10 19 651<br>362032c56bddec6ad5b639e16eeb594f92886516 tree   37 48 670<br>non delta: 8 objects<br>.git/objects/pack/pack-1ba47dfdc2c98b428c17082e4ee16e8c111c42ac.pack: ok<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Startup techniques</title>
    <link href="/2017/2017-05-22-startup-techniques/"/>
    <url>/2017/2017-05-22-startup-techniques/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><ul><li>Source Code Repos: <a href="https://about.gitlab.com/">Gitlab</a></li><li>IM communication: <a href="about.mattermost.com">Mattermost</a></li><li>Share disk: <a href="https://www.seafile.com/">Seafile</a></li><li>CI-CD: <a href="https://about.gitlab.com/">Gitlab-ci</a></li><li>Free SSL licence: <a href="https://letsencrypt.org/">letsencrypt</a></li><li>Log management: <a href="https://www.elastic.co/">ELK</a></li><li>Translation: <a href="https://poedit.net/">Poedit</a></li><li>Crash and Exception Handling: <a href="https://sentry.io/">Sentry</a></li><li>CDN: <a href="https://speeder.io/">speeder</a></li><li>External DNS: <a href="https://www.namecheap.com/domains/freedns.aspx">namecheap</a></li><li>Internal DNS: <a href="https://www.isc.org/downloads/bind/">BIND</a></li><li>Diagram draw: <a href="https://www.draw.io/">draw.io</a></li><li>Project Management: <a href="http://kanban.leanlabs.io/">Kanban</a></li><li>API Gateway: <a href="https://getkong.org/">Kong</a></li><li>NLP: <a href="https://wit.ai/">wit.ai</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu close lid without suspension</title>
    <link href="/2017/2017-05-22-ubuntu-close-lid-without-suspension/"/>
    <url>/2017/2017-05-22-ubuntu-close-lid-without-suspension/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Edit-systemd-file"><a href="#Edit-systemd-file" class="headerlink" title="Edit systemd file"></a>Edit systemd file</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">sudo <span class="hljs-keyword">vi</span> /etc/systemd/logind.<span class="hljs-keyword">conf</span><br></code></pre></td></tr></table></figure><h1 id="Find-and-set"><a href="#Find-and-set" class="headerlink" title="Find and set"></a>Find and set</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">HandleLidSwitch</span><span class="hljs-operator">=</span>ignore<br></code></pre></td></tr></table></figure><h1 id="Restart"><a href="#Restart" class="headerlink" title="Restart"></a>Restart</h1><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl restart <span class="hljs-params">system</span>d-logind.service<br></code></pre></td></tr></table></figure><p> Or simply restart your entire system</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu Wireless setup</title>
    <link href="/2017/2017-05-22-ubuntu-wireless-setup/"/>
    <url>/2017/2017-05-22-ubuntu-wireless-setup/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Find-your-interface-name"><a href="#Find-your-interface-name" class="headerlink" title="Find your interface name"></a>Find your interface name</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chili</span>@T440p:~$ iwconfig<br><span class="hljs-attribute">enp0s25</span>   no wireless extensions.<br><br><span class="hljs-attribute">lo</span>        no wireless extensions.<br><br><span class="hljs-attribute">wlp3s0</span>    IEEE <span class="hljs-number">802</span>.<span class="hljs-number">11</span>bgn  ESSID:<span class="hljs-string">&quot;GBR1&quot;</span>  <br>          <span class="hljs-attribute">Mode</span>:Managed  Frequency:<span class="hljs-number">2</span>.<span class="hljs-number">462</span> GHz  Access Point: XX:<span class="hljs-number">2</span>B:B0:DC:<span class="hljs-number">45</span>:XX <br>          <span class="hljs-attribute">Bit</span> Rate=<span class="hljs-number">72</span>.<span class="hljs-number">2</span> Mb/s   Tx-Power=<span class="hljs-number">22</span> dBm   <br>          <span class="hljs-attribute">Retry</span> short limit:<span class="hljs-number">7</span>   RTS thr:<span class="hljs-literal">off</span>   Fragment thr:<span class="hljs-literal">off</span><br>          <span class="hljs-attribute">Power</span> Management:<span class="hljs-literal">on</span><br>          <span class="hljs-attribute">Link</span> Quality=<span class="hljs-number">55</span>/<span class="hljs-number">70</span>  Signal level=-<span class="hljs-number">55</span> dBm  <br>          <span class="hljs-attribute">Rx</span> invalid nwid:<span class="hljs-number">0</span>  Rx invalid crypt:<span class="hljs-number">0</span>  Rx invalid frag:<span class="hljs-number">0</span><br>          <span class="hljs-attribute">Tx</span> excessive retries:<span class="hljs-number">0</span>  Invalid misc:<span class="hljs-number">109</span>   Missed beacon:<span class="hljs-number">0</span><br><br></code></pre></td></tr></table></figure><p>It will be <code>wlxxx</code> something rather than wlan0 any more as it is 16.04 anyway.</p><h1 id="Edit-interface-file"><a href="#Edit-interface-file" class="headerlink" title="Edit interface file"></a>Edit interface file</h1><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">sudo vim /etc/network/<span class="hljs-built_in">int</span>erfaces<br></code></pre></td></tr></table></figure><blockquote><p>auto wlan0<br>iface wlan0 inet dhcp<br>wpa-ssid <code>your_access_point</code><br>wpa-psk <code>your_wpa_key</code></p></blockquote><h1 id="restart-interface"><a href="#restart-interface" class="headerlink" title="restart interface"></a>restart interface</h1><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo ifup -v wlxxx</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM GC</title>
    <link href="/2017/2017-02-16-JVM-GC/"/>
    <url>/2017/2017-02-16-JVM-GC/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h2><h3 id="Mark-Sweep"><a href="#Mark-Sweep" class="headerlink" title="Mark-Sweep"></a>Mark-Sweep</h3><p>First Mark all cleanable memory, then Clean at one time</p><ul><li>Efficiency problem</li><li>Memory fragmentation</li></ul><h3 id="Copying"><a href="#Copying" class="headerlink" title="Copying"></a>Copying</h3><p>Use when surviving rate is low(Usually it is the case)</p><ol><li>Divide the entire memory into 2 sections</li><li>Use only one of the section as memory allocation section.</li><li>Once that allocation section is exhausted,  move the part that are still being used onto the top of the other memory section</li><li>Cleaning the allocation section.</li></ol><p>In this way, there is no memory fragmentation, and cleaning is quite efficient.<br>Major commercial JVM use this strategy</p><ul><li>Memory usability is 50% only</li></ul><h3 id="Mark-Compact"><a href="#Mark-Compact" class="headerlink" title="Mark-Compact"></a>Mark-Compact</h3><p>Use when surviving rate is high.</p><ol><li>Just like <code>Mark-Sweep</code></li><li>But <code>compact</code> the memory. Move the memory into one direct so that there is no memory fragment</li></ol><h3 id="Generational"><a href="#Generational" class="headerlink" title="Generational"></a>Generational</h3><p>Major commercial JVM use this strategy.<br>Must use along with other strategy.</p><h2 id="Collector"><a href="#Collector" class="headerlink" title="Collector"></a>Collector</h2><h3 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h3><p>Must stop all the other works when collecting, which is so bad.</p><h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><p>Multi-thread version of <code>Serial</code> collector, nothing new.</p><h3 id="Parallel-Scavenger"><a href="#Parallel-Scavenger" class="headerlink" title="Parallel Scavenger"></a>Parallel Scavenger</h3><p>Similar to ParNew but this collector focuses on reaching a controllable throughout.<br>Sometimes also called <code>Throughout first collector</code><br>$$Throughout &#x3D; \frac{User\ run\ time}{User\ run\ time + GC\ time} $$</p><h3 id="Concurrent-Mark-Sweep"><a href="#Concurrent-Mark-Sweep" class="headerlink" title="Concurrent Mark Sweep"></a>Concurrent Mark Sweep</h3><p>To collect as fast as possible.</p><ol><li>Init mark(Stop the world)(Only mark objects that are directly GC related)</li><li>Concurrent mark(GC Roots tracing)</li><li>Remark(Stop the world)(Check objects that changed during concurrent mark)</li><li>Concurrent sweep</li></ol><p>Great collector.<br>Sensitive to CPU</p><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>Art of the state collector.<br>Based on <code>Mark-Compact</code><br>Maintain a priority queue of garbage, collect the garbage first to ensure good throughout.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git at first glance</title>
    <link href="/2016/2016-10-02-git-at-first-glance/"/>
    <url>/2016/2016-10-02-git-at-first-glance/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>As a distributed source version control system, Git is a quite complicated.<br>There are several components you will usually get touch with while using Git.  </p><p>Following is the very basic architecture of components you will use:<br><a href="https://postimg.cc/XZ13Wfr0"><img src="https://i.postimg.cc/xCndKgYq/git_architecture.png" alt="git_architecture.png"></a></p><hr><h1 id="Local-Machine"><a href="#Local-Machine" class="headerlink" title="Local Machine"></a>Local Machine</h1><p>Pretty self-explanatory, local machine means the <code>local</code> machine than you are directly coding on or using.  For example if you are coding in a remote server through SSH, that <code>remote server</code> is also called local machine, as that is the computer that you use to do the work directly.  </p><p>Several components exist in local machine:  </p><h2 id="Working-directory"><a href="#Working-directory" class="headerlink" title="Working directory"></a>Working directory</h2><p>Working directory, is the most trivial conception of coding. Why? say, you modify a file <code>README.md</code> with <code>vim</code>, then save it by <code>:x</code>, now this <code>README.md</code> file definitely in Working directory.<br>Files in working directory have 2 state:  </p><h3 id="Untracked"><a href="#Untracked" class="headerlink" title="Untracked"></a>Untracked</h3><p>Files that are newly created and have never been versioned by Git.<br>A fresh created file should be an untracked file, and the way to ask Git to take care of this file is </p><pre><code class="hljs">git add FILE_NAME</code></pre><p>This command tells Git, <code>Go to take care of that guy...</code><br>Once ever the file is traced by <code>git add</code>, git started to aware of the content change of this file.  </p><h3 id="Tracked"><a href="#Tracked" class="headerlink" title="Tracked"></a>Tracked</h3><p>Files that have been versioned by Git.<br>Git will monitor which file is modified, deleted and renamed.<br>Add untracked files or modify tracked files would trigger this mechanism, use <code>git status</code> to see the changes you made since last commit.</p><h2 id="Staging-area"><a href="#Staging-area" class="headerlink" title="Staging area"></a>Staging area</h2><p>If you want to use Git to save files, you need to first store the current state in an area called <code>Staging</code> area.  There are several way to achieve this:  </p><ol><li>Use <code>git add FILE_NAME</code> to add files that already exist  </li><li>Use <code>git rm FILE_NAME</code> to delete a file that is being tracked  </li><li>Use <code>git mv ORIGIN_NAME  DEST_NAME</code> to move or rename a file. This usage is exactly same with the Linux command <code>mv</code></li></ol><p>You need to place any file that you want to commit into this area, including files that you want to delete and move.  </p><h2 id="Stash-area"><a href="#Stash-area" class="headerlink" title="Stash area"></a>Stash area</h2><p>This area will not be used very often, only when you want to do some operations about original commits without affecting files in working directory.<br>We usually use this area when we <code>switch branch</code>, <code>pull commit</code>. Operations like these will probably mess up you working directory.<br>To avoid this, you can store working directory temporarily in stash.  </p><pre><code class="hljs">git stash</code></pre><p>After finishing your operation, you want to resume your work,</p><pre><code class="hljs">git stash pop</code></pre><h2 id="Local-repository"><a href="#Local-repository" class="headerlink" title="Local repository"></a>Local repository</h2><p>Now you want to save the changes <code>permanently</code>, let’s do the commit</p><pre><code class="hljs">git commit -m&quot;COMMIT_MESSAGE&quot;</code></pre><p>All files in staging area will be saved permanently after commiting.<br>You can find the local commit log by using:</p><pre><code class="hljs">git log</code></pre><p>And you can have better printing and format by:</p><pre><code class="hljs">git log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --</code></pre><h2 id="Remote-ref"><a href="#Remote-ref" class="headerlink" title="Remote ref"></a>Remote ref</h2><p>This is the local references of remote host.<br>This is to compare the relative relationship between real remote repository and you local repository.<br>This ref will be synchronized whenever <code>fetch</code> and <code>pull</code>.  </p><pre><code class="hljs">git fetch</code></pre><h1 id="Remote-repository"><a href="#Remote-repository" class="headerlink" title="Remote repository"></a>Remote repository</h1><p>A remote repository is a git repository where you will not do the code directly on it.<br>The purpose of this repository is to store you local commit in a distributed fashion.<br>Technically speaking, after commiting locall, your local machine still has the risk of disk failure.<br>To avoid this tragedy, we need a remote repository to save our code.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git push # push your code to remote repository<br>git pull # pull the code from remote repository to local repository<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Branching</title>
    <link href="/2016/2016-10-02-git-branching/"/>
    <url>/2016/2016-10-02-git-branching/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Git branch is actually a commit node tree.<br><a href="https://i.postimg.cc/LXR4hCcT/git_branch.png"><img src="https://i.postimg.cc/LXR4hCcT/git_branch.png" alt="git_branch.png"></a>  </p><h1 id="Let’s-make-a-vivid-visualization"><a href="#Let’s-make-a-vivid-visualization" class="headerlink" title="Let’s make a vivid visualization"></a>Let’s make a vivid visualization</h1><p>After finishing the commit, that newly created commit will be placed on the <code>HEAD</code>.<br><a href="https://postimg.cc/d7HDjrbn"><img src="https://i.postimg.cc/qR0n0Gjf/git_branch_1.png" alt="git_branch_1.png"></a>  </p><p>You could create a new branch based on a existing branch.  </p><pre><code class="hljs">git checkout -b Development</code></pre><p><a href="https://postimg.cc/Jy6cHyPC"><img src="https://i.postimg.cc/DZFCDLG0/git_branch_2.png" alt="git_branch_2.png"></a>  </p><p>Now you can commit on the <code>Development</code> branch<br><a href="https://postimg.cc/06WF5ySb"><img src="https://i.postimg.cc/FRN4Zfsg/git_branch_3.png" alt="git_branch_3.png"></a>  </p><p>We can go back to the <code>master</code> branch and continue commiting on <code>master</code> branch  </p><pre><code class="hljs">git checkout master</code></pre><p><a href="https://postimg.cc/XZ1NM37g"><img src="https://i.postimg.cc/qR4N3MPW/git_branch_5.png" alt="git_branch_5.png"></a>  </p><p>We can create another branch  </p><pre><code class="hljs">git checkout -b other</code></pre><p><a href="https://postimg.cc/CZr8cW33"><img src="https://i.postimg.cc/Twfc3xC3/git_branch_6.png" alt="git_branch_6.png"></a>  </p><p>And still checkout the <code>master</code> branch again  </p><pre><code class="hljs">git checkout master</code></pre><p><a href="https://postimg.cc/WDY90YX3"><img src="https://i.postimg.cc/63tDJDZd/git_branch_7.png" alt="git_branch_7.png"></a>  </p><p>As you can see <code>HEAD</code> pointer is a special branch name that always point to the current branch or commit that we are working on.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git introduction</title>
    <link href="/2016/2016-10-02-git-introduction/"/>
    <url>/2016/2016-10-02-git-introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Seems like I have more than 4 years of experience with Git, but still got a lot of problems in real work.<br>This summary is a re-learn and re-think of Git.  </p><ol><li><a href="!--swig%EF%BF%BC0--">First glance at Git</a></li><li><a href="!--swig%EF%BF%BC1--">Remote repository</a></li><li><a href="!--swig%EF%BF%BC2--">Git branching</a></li><li><a href="!--swig%EF%BF%BC3--">Merge &amp; Rebase</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git Merge and Rebase</title>
    <link href="/2016/2016-10-02-git-merge-and-rebase/"/>
    <url>/2016/2016-10-02-git-merge-and-rebase/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>There are two ways you can join branches.<br>For showing with example, here is the base commit tree.<br><a href="https://i.postimg.cc/ydBBSdBH/branch_tree.png"><img src="https://i.postimg.cc/ydBBSdBH/branch_tree.png" alt="branch_tree.png"></a><br>Here you can see, there are two branches, <code>master</code> and <code>development</code>.  </p><h1 id="Merge"><a href="#Merge" class="headerlink" title="Merge"></a>Merge</h1><p><code>Merge</code> is a very straight forward method to join branches.<br>When <code>merge</code> command is issued, git will compare current branch with the target branch and aggregate commits that are different from the diverge point, here is <code>[3 4 5]</code>.<br>Then git will place the the aggregated commit <code>[7]</code> on top of the <code>master</code>.  Also, conflicts is also placed in this commit.<br><a href="https://i.postimg.cc/76qGPKTq/branch_merge.png"><img src="https://i.postimg.cc/76qGPKTq/branch_merge.png" alt="branch_merge.png"></a><br>As you can see, this method retains branch structure so reverting to old branch structure is possible.  </p><h1 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h1><p>Different from <code>Merge</code>, <code>Rebase</code> does not retain branch structure.<br>The different commits will be replayed on top of the <code>master</code> branch, as if you commit them on <code>master</code> at the first place.<br>Commits will be replayed one by one. Conflict needs to be resolved on each commit.<br><a href="https://i.postimg.cc/Y9tRcfrW/branch_rebase.png"><img src="https://i.postimg.cc/Y9tRcfrW/branch_rebase.png" alt="branch_rebase.png"></a><br>As you can see, the branch structure is aligned as a straight line.  So revertng directly to old branch structure is not easy.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git remote repository</title>
    <link href="/2016/2016-10-02-git-remote-repository/"/>
    <url>/2016/2016-10-02-git-remote-repository/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Let’s make a practise.  </p><h2 id="Init-local-repository"><a href="#Init-local-repository" class="headerlink" title="Init local repository"></a>Init local repository</h2><p>Initialize a local repository.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir learn-git ; cd learn-git<br>git init<br>git remote add origin https://github.com/Rugal/learn-git.git<br></code></pre></td></tr></table></figure><h2 id="First-commit"><a href="#First-commit" class="headerlink" title="First commit"></a>First commit</h2><h3 id="Create-file"><a href="#Create-file" class="headerlink" title="Create file"></a>Create file</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Rugal Bernstein first commit  &quot; &gt;&gt; README.md<br>git status<br></code></pre></td></tr></table></figure><pre><code class="hljs">On branch masterInitial commitUntracked files: (use “git add …” to include in what will be committed)    README.md    nothing added to commit but untracked files present (use “git add” to track)</code></pre><h3 id="Staging-file"><a href="#Staging-file" class="headerlink" title="Staging file"></a>Staging file</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git add README.md<br>git status<br></code></pre></td></tr></table></figure><pre><code class="hljs">On branch masterInitial commitChanges to be committed: (use “git rm –cached …” to unstage)    new file:   README.md</code></pre><h3 id="Commit-file"><a href="#Commit-file" class="headerlink" title="Commit file"></a>Commit file</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git commit -m&quot;first commit&quot;<br></code></pre></td></tr></table></figure><pre><code class="hljs">[master (root-commit) 3e9292a] first commit1 file changed, 1 insertion(+)create mode 100644 README.mdgit statusOn branch masternothing to commit, working directory clean</code></pre><h2 id="First-push"><a href="#First-push" class="headerlink" title="First push"></a>First push</h2><h3 id="Create-Github-repository"><a href="#Create-Github-repository" class="headerlink" title="Create Github repository"></a>Create Github repository</h3><p>We usually use <code>Github</code> as our code host.<br><a href="https://i.postimg.cc/mDRz2B5c/create_github.png"><img src="https://i.postimg.cc/mDRz2B5c/create_github.png" alt="create_github.png"></a>  </p><h3 id="Push-your-code"><a href="#Push-your-code" class="headerlink" title="Push your code"></a>Push your code</h3><p>Synchronize you local repository to remote host.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">git remote add origin https://github.com/Rugal/learn-git.git<br>git push origin master<br></code></pre></td></tr></table></figure><pre><code class="hljs">Counting objects: 3, done.Writing objects: 100% (3/3), 252 bytes | 0 bytes/s, done.Total 3 (delta 0), reused 0 (delta 0)To https://github.com/Rugal/learn-git.git* [new branch] master -&gt; master</code></pre><h3 id="Track-remote-repository"><a href="#Track-remote-repository" class="headerlink" title="Track remote repository"></a>Track remote repository</h3><p>This is set to track the remote status, so that Git could compare the difference between local and remote repo.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git branch -u origin/master; git status<br></code></pre></td></tr></table></figure><pre><code class="hljs">Branch master set up to track remote branch master from origin.On branch masterYour branch is up-to-date with ‘origin/master’.nothing to commit, working directory clean</code></pre><p><a href="https://i.postimg.cc/9MVb53Pb/first_push.png"><img src="https://i.postimg.cc/9MVb53Pb/first_push.png" alt="first_push.png"></a>  </p><p>The tricky point is that, <code>origin/master</code> is not special. It is a local cache of the remote branch.  But you can’t change this <code>origin/master</code> branch unless by <code>git fetch/push</code>.<br>So basically each time you do <code>git fetch/push</code>, the <code>origin/master</code> branch will be synced with real remote <code>master</code>.  Then you will know the differences between your local development branch and real remote branch by comparing the local <code>master</code> with the local <code>origin/master</code>.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>A dream of my dormitory</title>
    <link href="/2016/2016-06-28-my-dormitory/"/>
    <url>/2016/2016-06-28-my-dormitory/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>要说做梦这个事情也是很有意思的，可能临睡前的一瞬间听到的什么东西，梦里就会浮现出来相关的事情。<br>睡前听了一下，只是听了一下那个厦门大学某教授在毕业典礼时的演讲，挺有趣，挺有意思。其中有一句话就好像是，“多年以后，你最能回想起来的就是你的大学时光”。我不清楚我到底是不是真的很怀念我的大学，但我知道我的大学确实挺不错的，环境、学术、同学。有一些恶心的东西，但总体还是不错的，在这个相对优越且单纯的校园里，我渐渐爱上这个地方。<br>但直到我毕业几个月之后才后知后觉的有隐隐的难过之情浮现出来，但一切都晚了。<br>我梦到推门，推开的是一扇灰色的木头门，推开门的瞬间对面一片光亮。然后展现在我眼前就是我的室友，前室友：“东北银统鸡”。统淫荡的看了我一眼，又是同样的一句“大局发你肥来啦！”。鸡则猥琐的撇了我一眼，一如曾经的样子。东北人还是自顾自在玩游戏，是不是传来淫荡的笑声还有<code>double kill</code>的声音。<br>这便是我的寝室：<code>东14---307</code>。<br>好像曾经这样的画面见的实在是太多了，印象太深刻了吧。<br>然后我走进寝室，看到我的床位上被单被套都没了，我说到：“卧槽，居然忘了带被单，完蛋了，下星期还得回家”。毕竟我家相对来说还算近一点，还能够半个月回去一趟，虽然我愿意经常往家里跑。统转过头看了我一眼，什么也没说，其他人也是一样。  </p><p>对面酱油男风风火火的走进来看鸡玩游戏，不，也有可能是在编程，他经常会搞点神秘兮兮的东西。酱油男还是那个样子，叉着腰，和鸡有一搭没一搭的聊着。我看了看地上的拖鞋，两双带子都破了的拖鞋，感觉都像是鸡的，但鸡应该不会把拖鞋扔在我桌子下，这方面他很注意。但是我清楚的知道这两双都不是我的。<br>梦里的衣柜变的有点高了，踮起来才能拿到换洗衣裤。于是我就感觉这应该是梦吧，毕竟其实并没有这么高。<br>秦成也来了，站在统旁边，有个女生跟他讲着英语演讲的注意事项，奇怪的是以秦成的英语，他应该不愿意做这些事情，但毕竟是梦吧，什么都有可能，他智商不错，经过努力应该能有很大进步吧。  </p><p>别了，这是梦，我该醒了。<br>醒了，但这一切都回不去了。  </p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Concurrency vs. Parallelism</title>
    <link href="/2016/2016-04-29-concurrency-parallelism/"/>
    <url>/2016/2016-04-29-concurrency-parallelism/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><blockquote><p>Works on many different tasks at the same time.   </p></blockquote><p>Notice different tasks may execute in different program logics.<br>For example one <code>PostgreSQL</code> instance will spawn many processes to do different work for maintaining database ACID and others.<br>During this procedure, data involved might even be the same, but different processes will perform totally different program logic, including <code>archiving</code>, <code>WAL sending</code>, <code>checkpoint</code> etc.,</p><h2 id="Parallelism"><a href="#Parallelism" class="headerlink" title="Parallelism"></a>Parallelism</h2><blockquote><p>Works on many subtasks that are splitted from a single task.  </p></blockquote><p>Notice those subtasks would be executed in same logic except possibly data or parameter differences.<br>For instance, <code>Hadoop</code> will split the original data into several smaller data segments and dispatch them to datanode for detailed computation.<br>During this procedure, the computational logic has been compiled in ahead, the only variable are the data.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Coast to Coast</title>
    <link href="/2016/2016-04-15-coast-to-coast/"/>
    <url>/2016/2016-04-15-coast-to-coast/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>曾经以为，咫尺就是我在车库里帮你开不了的锁，天涯就是那一座弁山<br>曾经以为，咫尺就是在班里见到了你，天涯就是看你和男朋友有说有笑<br>曾经以为，咫尺就是看着你从公交车上下来，天涯就是含泪送你上车  </p><hr><p>后来，看着手机里的可爱卖萌的你，仿佛手指都能戳到，一戳好像小脸还会凹进去  </p><pre><code class="hljs">咫尺</code></pre><p>可隔着薄薄的手机屏幕，就是隔着千山万水<br>想你的时候不能说，因为说出来便有了无法拥抱的遗憾<br>看你难过的时候不能只能口头安慰你，真希望开门就是机场，半个小时后就能在你身边<br>这种无奈的挣扎，才是  </p><pre><code class="hljs">天涯</code></pre><hr><p>然而人生在世，最有成就感的就是通过艰辛努力达成了梦想<br>那不断的努力，无怨无悔的尝试，毕竟如此聪明的你，上苍终究还是让你愿望成真<br>这才能让你拥有真正的力量，真正的成长<br>这才是我的好宝宝  </p><p>现在春风和夏风交织着，蓝到寂寞的天空倒映出了微笑的嘴角<br>恍惚间，那个和我对话的声音，仿似从手机话筒中传来，然而音质却好了太多   </p><p>感谢你陪我走过这一段人生路，那段不堪回首的痛苦岁月，那段曾差点让我放弃希望的悲凉时光  </p><pre><code class="hljs">因为有你，幸福便近在咫尺</code></pre><p>也很期待你和我将要面对道路，有你在的每一天都是新鲜的，是幸福的，是吸进奶酪面包香气的甜蜜和醉人  </p><pre><code class="hljs">所以有你，苦痛便远去天涯</code></pre><p>好嘛，不用想了，我马上就来抱你!  </p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL Continuous Archive</title>
    <link href="/2016/2016-04-15-postgresql-continuous-archive/"/>
    <url>/2016/2016-04-15-postgresql-continuous-archive/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Basic-setting"><a href="#Basic-setting" class="headerlink" title="Basic setting"></a>Basic setting</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">PGDATA=/var/lib/postgresql/9.3/main  <br>PGCONF=/etc/postgresql/9.3/main      <br>ARCHIVE_PATH=/opt/archive<br></code></pre></td></tr></table></figure><h2 id="Enable-archive-mode"><a href="#Enable-archive-mode" class="headerlink" title="Enable archive mode"></a>Enable archive mode</h2><p>Set <code>wal_level</code> to at least <code>archive</code>, please refer to <a href="http://www.postgresql.org/docs/current/static/runtime-config-wal.html#GUC-WAL-LEVEL">Official Document</a> for details.<br>Set <code>archive_mode</code> to at least <code>on</code>, please refer to <a href="http://www.postgresql.org/docs/current/static/runtime-config-wal.html#GUC-ARCHIVE-MODE">Official Document</a> for details.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;wal_level = archive&quot; &gt;&gt; $PGCONF/postgresql.conf<br>echo &quot;archive_mode = on&quot; &gt;&gt; $PGCONF/postgresql.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">You should <span class="hljs-built_in">set</span> this <span class="hljs-built_in">command</span> on your need</span><br>echo &quot;archive_command = &#x27;test ! -f $ARCHIVE_PATH/%f &amp;&amp; cp %p $ARCHIVE_PATH/%f&#x27;&quot; &gt;&gt; $PGCONF/postgresql.conf<br></code></pre></td></tr></table></figure><h2 id="Create-archive-folder"><a href="#Create-archive-folder" class="headerlink" title="Create archive folder"></a>Create archive folder</h2><p>Now let us create the archive folder for postgres user in operating system.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p $ARCHIVE_PATH<br>sudo chown postgres\: $ARCHIVE_PATH<br></code></pre></td></tr></table></figure><h2 id="Launch-database-server"><a href="#Launch-database-server" class="headerlink" title="Launch database server"></a>Launch database server</h2><p>After launching database server, you could notice there is a new process very self-explanatory</p><pre><code class="hljs">postgres: archiver process</code></pre><h2 id="Test-archive"><a href="#Test-archive" class="headerlink" title="Test archive"></a>Test archive</h2><h3 id="Add-some-data"><a href="#Add-some-data" class="headerlink" title="Add some data"></a>Add some data</h3><p>For xlog purpose, we need to add some data like creating a new table, or DML.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test();<br></code></pre></td></tr></table></figure><h3 id="Force-xlog-switch"><a href="#Force-xlog-switch" class="headerlink" title="Force xlog switch"></a>Force xlog switch</h3><p>Now this function take effect.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> pg_switch_xlog();<br></code></pre></td></tr></table></figure><h3 id="Archive-result"><a href="#Archive-result" class="headerlink" title="Archive result"></a>Archive result</h3><p>From <code>archive_status</code> folder inside <code>$PGDATA</code> we could found the updated status of archiving. </p><pre><code class="hljs">&gt; ls $PGDATA/archive_status00000001000000000000004A.done</code></pre><p>From <code>$ARCHIVE_PATH</code> side of view, we could see that specific xlog has been archived to our archive folder.  </p><pre><code class="hljs">&gt; ls $ARCHIVE_PATH00000001000000000000004A</code></pre><h2 id="Notice"><a href="#Notice" class="headerlink" title="Notice"></a>Notice</h2><p>Because WAL is significantly useful for recovery, it is better to back them up by archive. But sometimes it is still not enough, we could use <code>rsync</code> to send those WAL to some other place so that they will be preserved for longer term.  I am not going to the details of it. </p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>This tutorial is to tell you how to setup archive functionality for PostgreSQL with minimum configuration.<br>Backuping or Archiving xlog is to enable High Availability for our system.<br>With continuous archiving, we enabled <a href="http://www.postgresql.org/docs/current/static/continuous-archiving.html">Point-in-Time Recovery (PITR)</a>, my tutorial is at <a href="!--swig%EF%BF%BC5--">PITR</a>.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL Query Cost</title>
    <link href="/2016/2016-04-13-postgresql-query-cost/"/>
    <url>/2016/2016-04-13-postgresql-query-cost/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Attributes-in-Execution-plan"><a href="#Attributes-in-Execution-plan" class="headerlink" title="Attributes in Execution plan"></a>Attributes in Execution plan</h1><h2 id="cost-0-00-290-45"><a href="#cost-0-00-290-45" class="headerlink" title="cost&#x3D;0.00..290.45"></a>cost&#x3D;0.00..290.45</h2><p>The first cost is the start-up cost of this node. The value here determines how much work is estimated to be done before the node produces its first row of output. Here, the value is zero because a Seq Scan node instantly produces rows.<br>The second estimated cost is the cost of running the entire node until it completes.</p><h2 id="rows-3616"><a href="#rows-3616" class="headerlink" title="rows&#x3D;3616"></a>rows&#x3D;3616</h2><p>The number of rows to output if the node runs to completion.  </p><h2 id="width-26"><a href="#width-26" class="headerlink" title="width&#x3D;26"></a>width&#x3D;26</h2><p>This value provides an estimate of the average number of bytes each row output for the node will contain.</p><h1 id="Forcing-a-plan"><a href="#Forcing-a-plan" class="headerlink" title="Forcing a plan"></a>Forcing a plan</h1><ul><li>enable_seqscan</li><li>enable_indexscan</li><li>enable_sort</li><li>enable_nestloop</li><li>enable_hashjoin</li><li>enable_mergejoin</li><li>enable_tidscan</li><li>enable_hasagg</li></ul><h1 id="Operation-Cost"><a href="#Operation-Cost" class="headerlink" title="Operation Cost"></a>Operation Cost</h1><h2 id="Sort-operator"><a href="#Sort-operator" class="headerlink" title="Sort operator"></a>Sort operator</h2><pre><code class="hljs">select oid from pg_proc order by oid;</code></pre><ol><li>Explicit: ORDER BY clause</li><li>Implicit: Unique and other operators</li><li>Has startup cosy: cannot return right away</li></ol><h2 id="Index-Scan"><a href="#Index-Scan" class="headerlink" title="Index Scan"></a>Index Scan</h2><pre><code class="hljs">select oid from pg_proc where oid=1;</code></pre><p>Lower cost usually makes it preferred, especially on large tables.<br>Get one tuple pointer from index and get corresponding row from table.  </p><h2 id="BitMap-Scan"><a href="#BitMap-Scan" class="headerlink" title="BitMap Scan"></a>BitMap Scan</h2><p>A bitmap scan works in two phase. </p><ol><li>Scan the index to get all matched tuples to form a bitmap in memory before sort it, called bitmap index scan.</li><li>Get row by pointers from tables before doing a index recheck, called bitmap heap scan</li></ol><p>For the first phase, if the bitmap is too big(greater than <code>work_mem</code>) to fit into memory, PostgreSQL will work in a so called <code>lossy</code> mode to build a bitmap that contains only pages that cover those tuple pointers. When get tuple for case like this, PostgreSQL just fetch those matched pages instead of tuples. But this could involve some tuples that do not meet criterion. That is why <code>Index Recheck</code> will be used here.<br>But for query that is not <code>lossy</code>, the <code>Index Recheck</code> will appear even though there is no actual work for it.<br>The <code>Index Recheck</code> is always appear even though the the bitmap is not <code>lossy</code>, and there is no actual work for it.</p><h2 id="Result-Operator"><a href="#Result-Operator" class="headerlink" title="Result Operator"></a>Result Operator</h2><pre><code class="hljs">select oid from pg_proc where 1+1=3;</code></pre><ol><li>Non­table queries</li><li>Inside a WHERE clause (‘true’ vs. ‘false’)</li></ol><h2 id="Unique-Operator"><a href="#Unique-Operator" class="headerlink" title="Unique Operator"></a>Unique Operator</h2><pre><code class="hljs">select distinct oid from pg_proc;</code></pre><ol><li>Removes duplicate values from the input set</li><li>Does not change ordering, simply fails to pass on duplicate rows</li><li>Incoming set must be ordered (will force a Sort if needed)</li><li>Two “cpu operations” per tuple cost</li><li>Used with DISTINCT and UNION</li></ol><h2 id="Limit-Operator"><a href="#Limit-Operator" class="headerlink" title="Limit Operator"></a>Limit Operator</h2><pre><code class="hljs">select oid from pg_proc limit 5;</code></pre><ol><li>Rows will be equal to number specified</li><li>Can return first row immediately</li><li>Also handles offsets, with a small additional startup cost</li></ol><h2 id="Aggregate-Operator"><a href="#Aggregate-Operator" class="headerlink" title="Aggregate Operator"></a>Aggregate Operator</h2><pre><code class="hljs">select count(*) from pg_proc;</code></pre><ol><li>Used with count, sum, min, max, avg, sttdev, variance</li><li>You may see differences when GROUP BY is used</li></ol><h2 id="GroupAggregate-Operator"><a href="#GroupAggregate-Operator" class="headerlink" title="GroupAggregate Operator"></a>GroupAggregate Operator</h2><pre><code class="hljs">select count(*) from pg_bigtable group by oid;</code></pre><p>Used with GROUP BY and some aggregates on larger result sets</p><h2 id="Append-Operator"><a href="#Append-Operator" class="headerlink" title="Append Operator"></a>Append Operator</h2><pre><code class="hljs">select oid from pg_proc union all select oid from pg_proc;</code></pre><ol><li>Triggered by UNION (ALL), inheritence</li><li>No startup cost</li><li>Cost is simply the sum of all inputs</li></ol><h2 id="Nested-Loop-Operator"><a href="#Nested-Loop-Operator" class="headerlink" title="Nested Loop Operator"></a>Nested Loop Operator</h2><pre><code class="hljs">select * from pg_bigtable inner join pg_namespaceon (pg_bigtable.pronamespace=pg_namespace.oid);</code></pre><ol><li>Joins two tables (two input sets)</li><li>USED with INNER JOIN and LEFT OUTER JOIN</li><li>Scans ‘outer’ table, finds matches in ‘inner’ table</li><li>No startup cost</li><li>Can lead to slow queries, especially when functions are in the select clause</li></ol><h2 id="Merge-Joins"><a href="#Merge-Joins" class="headerlink" title="Merge Joins"></a>Merge Joins</h2><pre><code class="hljs">select relname,nspname from pg_class left join pg_namespace on (pg_class.relnamespace = pg_namespace.oid);</code></pre><ol><li>Joins two sets: outer and an inner</li><li>Merge Right Joins, Merge In Joins</li><li>Sets must be pre­ordered (sorts), walk through both simultaneously</li></ol><h2 id="Hash-Hash-Join"><a href="#Hash-Hash-Join" class="headerlink" title="Hash &amp; Hash Join"></a>Hash &amp; Hash Join</h2><pre><code class="hljs">select relname, nspname from pg_class join pg_namespace on (pg_class.relnamespace=pg_namespace.oid);</code></pre><ol><li>Compares two input sets by building hash tables</li><li>Used with INNER JOIN</li><li>Creating a hash incurs startup cost</li><li>Generally more efficient than Nested Loop</li></ol><h2 id="Hash-Hash-Left-Join"><a href="#Hash-Hash-Left-Join" class="headerlink" title="Hash &amp; Hash Left Join"></a>Hash &amp; Hash Left Join</h2><pre><code class="hljs">select relname, nspname from pg_class left join pg_namespace on (pg_class.relnamespace=pg_namespace.oid);</code></pre><ol><li>Similar to HASH &#x2F; HASH JOIN</li><li>Incurs a startup cost</li><li>Used with LEFT JOIN</li></ol><h2 id="Subquery-Scan"><a href="#Subquery-Scan" class="headerlink" title="Subquery Scan"></a>Subquery Scan</h2><pre><code class="hljs">select oid from pg_proc union all select oid from pg_proc;</code></pre><ol><li>Used with unions</li><li>Generally not a significant problem</li></ol><h2 id="ctid-Scan"><a href="#ctid-Scan" class="headerlink" title="ctid Scan"></a>ctid Scan</h2><pre><code class="hljs">select oid from pg_proc where ctid = &#39;(0,1)&#39;;</code></pre><ol><li>Column tuple ID</li><li>Only used when “ctid&#x3D;” appears in your query</li><li>Very rare, very fast</li></ol><h2 id="Materialize-Operator"><a href="#Materialize-Operator" class="headerlink" title="Materialize Operator"></a>Materialize Operator</h2><p>The planner&#x2F;optimizer may decide that it is less expensive to materialize a <code>subselect</code> once than to repeat the work for each top-level row.<br>The Materialize operator is used for some <code>subselect</code> operations.<br>Materialize will also be used for some <code>merge-join</code> operations. In particular, if the inner input set of a Merge Join operator is not produced by a Seq Scan, an Index Scan, a Sort, or a Materialize operator, the planner&#x2F;optimizer will insert a Materialize operator into the plan.</p><h2 id="Function-Scan"><a href="#Function-Scan" class="headerlink" title="Function Scan"></a>Function Scan</h2><pre><code class="hljs"> select * from foo(12);</code></pre><ol><li>Seen when a function is gathering data</li><li>Somewhat mysterious for troubleshooting</li><li>Run explain on queries used inside function</li></ol><h2 id="SetOp-Operators"><a href="#SetOp-Operators" class="headerlink" title="SetOp Operators"></a>SetOp Operators</h2><pre><code class="hljs">select oid from pg_proc INTERSECT select oid from pg_proc;</code></pre><p>Used (obviously) for INTERSECT, INTERSECT ALL, EXCEPT, EXCEPT ALL</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Heap Generation</title>
    <link href="/2016/2016-04-04-java-heap-generation/"/>
    <url>/2016/2016-04-04-java-heap-generation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Credit to <a href="https://plumbr.eu/blog/garbage-collection/minor-gc-vs-major-gc-vs-full-gc">this</a> article.  </p><h2 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h2><h3 id="Eden"><a href="#Eden" class="headerlink" title="Eden"></a>Eden</h3><p>All objects will be created in this area.<br>This area actually divided into some <code>Thread Local Allocation Buffer(TLAB)</code> for non-synchronizing buffer allocation.<br>If one obejct is unable to allocate in a TLAB due to insufficient space, JVM will try to create it in a <code>common area</code> located also in Eden.<br>If it still unable to created in <code>common area</code>, a minor GC will be triggered to cleanup some space for it. If this object is too big to fit in Eden that even after minor GC, JVM will create it in <code>Tenure</code>.   </p><h3 id="survivor"><a href="#survivor" class="headerlink" title="survivor"></a>survivor</h3><p>There will have 2 area namely <code>from</code> and <code>to</code>.<br>After a minor GC, all living objects will be moved to one of the two survivor area.<br>One of these two areas is always empty to allow <code>mark-copy</code> algorithm works efficiently.<br>So the name from and to will sometimes switchable internally.  </p><h2 id="Old-Generation-Tenure"><a href="#Old-Generation-Tenure" class="headerlink" title="Old Generation&#x2F;Tenure"></a>Old Generation&#x2F;Tenure</h2><p>If objects exist more than a threshold, they will be promoted into Tenure area.</p><pre><code class="hljs">XX:+MaxTenuringThreshold</code></pre><h2 id="Permanent-Generation"><a href="#Permanent-Generation" class="headerlink" title="Permanent Generation"></a>Permanent Generation</h2><p>This is where the metadata such as classes would go.<br>Also, some additional things like internalized strings were kept in Permgen.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Reference Types</title>
    <link href="/2016/2016-04-04-java-reference-types/"/>
    <url>/2016/2016-04-04-java-reference-types/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>To reimburse different needs for references, Java provisioned different level of references type since <code>1.2</code>.<br>It actually meets some application requirement like caches.  </p><h3 id="Strong"><a href="#Strong" class="headerlink" title="Strong"></a>Strong</h3><p>The normal reference, unable to GC until no reference exists.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br></code></pre></td></tr></table></figure><h3 id="Soft"><a href="#Soft" class="headerlink" title="Soft"></a>Soft</h3><p>When memory about to overflow, good for saving memory when space sensitive.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">SoftReference</span> <span class="hljs-variable">soft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SoftReference</span>(bean);<br></code></pre></td></tr></table></figure><h3 id="Weak"><a href="#Weak" class="headerlink" title="Weak"></a>Weak</h3><p>Will be collected at next GC cycle. Designed for objects that have short life.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">WeakReference</span> <span class="hljs-variable">soft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>(bean);<br></code></pre></td></tr></table></figure><h3 id="Phantom"><a href="#Phantom" class="headerlink" title="Phantom"></a>Phantom</h3><p>weakest reference.  As if there is no reference.<br>Phantom references are most often used for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">PhantomReference</span> <span class="hljs-variable">soft</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PhantomReference</span>(bean);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm Scheme</title>
    <link href="/2016/2016-03-03-algorithm-scheme/"/>
    <url>/2016/2016-03-03-algorithm-scheme/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><table><thead><tr><th align="left">condition</th><th align="right">method</th></tr></thead><tbody><tr><td align="left">Each phase has only one state</td><td align="right">递推</td></tr><tr><td align="left">Optimal state of each phase comes from phase right before</td><td align="right">贪心</td></tr><tr><td align="left">Optimal state of each phase comes from combination of state of overall phase before</td><td align="right">搜索</td></tr><tr><td align="left">Optimal state of each phase comes from some states or phases before</td><td align="right">DP</td></tr></tbody></table><hr><blockquote><p>每个阶段的最优状态可以从之前某个阶段的某个或某些状态直接得到 </p></blockquote><p>这个性质叫做最优子结构  </p><blockquote><p>而不管之前这个状态是如何得到的</p></blockquote><p>这个性质叫做无后效性。</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT Post interface</title>
    <link href="/2016/2016-01-01-jpt-post-interface/"/>
    <url>/2016/2016-01-01-jpt-post-interface/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>PostAction</code> is associated with all post and partly thread related jobs.<br>All interfaces of this controller is placed under <code>/user</code> path.<br>All interfaces require <a href="!--swig%EF%BF%BC8--">authentication fields</a>.    </p><hr><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Add-Post"><a href="#Add-Post" class="headerlink" title="Add Post"></a>Add Post</h2><p>To add a new post. Use this interface to create post metadata without uploading the torrent file.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br><br><span class="language-smalltalk">&#123;</span><br><span class="language-smalltalk">  <span class="hljs-comment">&quot;title&quot;</span>:<span class="hljs-comment">&quot;Test title&quot;</span>, <span class="hljs-comment">&quot;enabled&quot;</span>:<span class="hljs-keyword">true</span>, <span class="hljs-comment">&quot;minLevel&quot;</span>:&#123;<span class="hljs-comment">&quot;lid&quot;</span>:<span class="hljs-number">1</span>&#125;, </span><br><span class="language-smalltalk">  <span class="hljs-comment">&quot;content&quot;</span>:<span class="hljs-comment">&quot;This could be a very long content...&quot;</span></span><br><span class="language-smalltalk">&#125;</span><br></code></pre></td></tr></table></figure><p>The <code>post</code> object is exactly as <a href="!--swig%EF%BF%BC9--">specification</a>, but user could not specify the id of post to be persisted as well as some of other fields like <code>postTime</code>, <code>infoHash</code>, <code>rate</code>.<br>Note that the <code>minLevel</code> is to set the minimum required level of user to download. User could not <code>create</code> a level without proper permission. Ideally, user should choose a level from list.  </p><h2 id="Update-Post-meta-and-content"><a href="#Update-Post-meta-and-content" class="headerlink" title="Update Post meta and content"></a>Update Post meta and content</h2><p>Use this interface to update the meta data and content of a post.<br>Only author and administrators could update a post.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/post/&#123;pid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br><br><span class="language-smalltalk">&#123;</span><br><span class="language-smalltalk">  <span class="hljs-comment">&quot;title&quot;</span>:<span class="hljs-comment">&quot;Test title&quot;</span>, <span class="hljs-comment">&quot;enabled&quot;</span>:<span class="hljs-keyword">true</span>, <span class="hljs-comment">&quot;minLevel&quot;</span>:&#123;<span class="hljs-comment">&quot;lid&quot;</span>:<span class="hljs-number">1</span>&#125;, </span><br><span class="language-smalltalk">  <span class="hljs-comment">&quot;content&quot;</span>:<span class="hljs-comment">&quot;This could be a very long content...&quot;</span></span><br><span class="language-smalltalk">&#125;</span><br></code></pre></td></tr></table></figure><p>This interface has the same restriction as <code>Add post</code>.<br>The target post to be updated will be and only be the <code>&#123;pid&#125;</code> specified in URL.  </p><h2 id="Get-Post-metadata-and-content"><a href="#Get-Post-metadata-and-content" class="headerlink" title="Get Post metadata and content"></a>Get Post metadata and content</h2><p>Anyone could see any post.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/post/&#123;pid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br></code></pre></td></tr></table></figure><h2 id="Delete-Post"><a href="#Delete-Post" class="headerlink" title="Delete Post"></a>Delete Post</h2><p>Only author and administrators could delete a post.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">DELETE</span> <span class="hljs-string">/post/&#123;pid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br></code></pre></td></tr></table></figure><h2 id="Add-Thread-for-a-Post"><a href="#Add-Thread-for-a-Post" class="headerlink" title="Add Thread for a Post"></a>Add Thread for a Post</h2><p>Any user could reply thread to post</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post/&#123;pid&#125;/thread</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br><br><span class="language-css">&#123;&quot;<span class="hljs-attribute">content</span>&quot;:<span class="hljs-string">&quot;TEST CONTENT&quot;</span>, <span class="hljs-string">&quot;rate&quot;</span>:<span class="hljs-number">5</span>&#125;</span><br></code></pre></td></tr></table></figure><p><code>Thread</code> object is exactly as <a href="!--swig%EF%BF%BC10--">specification</a>. But for user could specify few fields as the example above.<br>the target post is specified in URL, replyer is specified in request header <code>uid</code>.  </p><h2 id="Get-Thread-page-for-a-Post"><a href="#Get-Thread-page-for-a-Post" class="headerlink" title="Get Thread page for a Post"></a>Get Thread page for a Post</h2><p>Get a page of threads, page number starts from 1 and default as 1.<br>Default page size is 5.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/post/&#123;pid&#125;/thread?pageNo=&#123;pageNo&#125;&amp;pageSize=&#123;pageSize&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br></code></pre></td></tr></table></figure><h2 id="Upload-torrent-file-of-a-Post"><a href="#Upload-torrent-file-of-a-Post" class="headerlink" title="Upload torrent file of a Post"></a>Upload torrent file of a Post</h2><p>Upload the corresponding torrent file of a post.<br>Only author could upload it.<br>A torrent file could and only could upload to a post once.  If user finds the torrent is incorrect, they have to re-post and upload again.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/post/&#123;pid&#125;/metainfo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br><br><span class="language-smali">&#123;Byte<span class="hljs-built_in"> array </span>of torrent file in multipart&#125;</span><br></code></pre></td></tr></table></figure><p>Just like other file uploads, must upload the origin torrent file directly to server.<br>It actually uploads the torrent file as byte array.  </p><h2 id="Download-torrent-file-of-a-Post"><a href="#Download-torrent-file-of-a-Post" class="headerlink" title="Download torrent file of a Post"></a>Download torrent file of a Post</h2><p>Only users that reach <code>minLevel</code> requirement of a post could download the torrent file.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/post/&#123;pid&#125;/metainfo</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>[application/x-bittorrent, application/json]<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br></code></pre></td></tr></table></figure><p>If everything run smoothly, client side will get a response with header  </p><pre><code class="hljs">Content-Disposition: attachment; filename=hash.torrent;</code></pre><p>which means user will get browser prompt to get download.  Depending on browser implementation in detail.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Graph Algorithm</title>
    <link href="/2016/2016-01-04-graph-algorithm/"/>
    <url>/2016/2016-01-04-graph-algorithm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="http://www.geeksforgeeks.org/greedy-algorithms-set-1-activity-selection-problem/">Geeks for Geeks</a></p><h2 id="Kruskal"><a href="#Kruskal" class="headerlink" title="Kruskal"></a>Kruskal</h2><p><code>Minimum Spanning Tree</code><br>In Kruskal’s algorithm, we create a MST by picking edges one by one.<br>The Greedy Choice is to pick the smallest weight edge that doesn’t cause a cycle in the MST constructed so far.</p><ol><li>Sort all edges</li><li>Pick up smallest edge that does not cause cycle, till all vertices are connected</li></ol><h2 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h2><p><code>Minimum Spanning Tree</code><br>In Prim’s algorithm also, we create a MST by picking edges one by one.<br>We maintain a set:  </p><ol><li>set of the vertices already included in MST.</li></ol><p>The procedure is:  </p><ol><li>Start from any vertices</li><li>Pick a reachable edge that has minimum weight and not causing cycle</li><li>Repeat step 2 until all vertices are connected</li></ol><h2 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h2><p><code>Shortest Path</code><br>The Dijkstra’s algorithm is very similar to Prim’s algorithm. The shortest path tree is built up, edge by edge.<br>This algorithm is to find the shortest path between two vertices<br>We maintain a set: </p><ol><li>set of the vertices already included in the tree.</li></ol><p>The Greedy Choice is to pick the edge that connects the two sets and is on the smallest weight path from source to the set that contains not yet included vertices.</p><ol><li>Start from the vertice, preset all other vertices with value infinity.</li><li>Pick the smallest edge that from this vertice</li><li>Update the value in all reachable vertices with the smallest calculated value</li><li>Repeat the same work for the vertice that is connected by previous one, till all vertices are connected.</li></ol>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Turing Machine</title>
    <link href="/2016/2016-01-04-turing-machine/"/>
    <url>/2016/2016-01-04-turing-machine/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="http://www.douban.com/note/493554475/">Turing Machine</a>  </p><h2 id="Deterministic-Turing-machine"><a href="#Deterministic-Turing-machine" class="headerlink" title="Deterministic Turing machine"></a>Deterministic Turing machine</h2><p>The set of rules prescribes one action to be performed for any given situation.  </p><p>A deterministic Turing machine (DTM) has a transition function that, for a given state and symbol under the tape head, specifies three things:</p><ul><li>the symbol to be written to the tape,</li><li>the direction (left, right or neither) in which the head should move, and</li><li>the subsequent state of the finite control.</li></ul><blockquote><p>For example:<br>An X on the tape in state 3 might make the DTM write a Y on the tape, move the head one position to the right, and switch to state 5.</p></blockquote><h2 id="Non-deterministic-Turing-machine"><a href="#Non-deterministic-Turing-machine" class="headerlink" title="Non-deterministic Turing machine"></a>Non-deterministic Turing machine</h2><p>May have a set of rules that prescribes more than one action for a given situation.  </p><p>A non-deterministic Turing machine (NTM) differs in that the state and tape symbol no longer uniquely specify these things; rather, many different actions may apply for the same combination of state and symbol. </p><blockquote><p>For example:<br>An X on the tape in state 3 might now allow the NTM to write a Y, move right, and switch to state 5, or to write an X, move left, and stay in state 3.</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Regular Expression Note</title>
    <link href="/2015/2015-12-23-regular-expression-note/"/>
    <url>/2015/2015-12-23-regular-expression-note/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><table><thead><tr><th>symbol</th><th>description</th></tr></thead><tbody><tr><td>.</td><td>$x&#x3D;1$</td></tr><tr><td>?</td><td>$x&#x3D;&#x3D;1\shortmid x&#x3D;&#x3D;0$</td></tr><tr><td>+</td><td>$x\geq 1$</td></tr><tr><td>*</td><td>$x\geq 0$</td></tr><tr><td>{n}</td><td>$x&#x3D;n$</td></tr><tr><td>{min,}</td><td>$x\geq min$</td></tr><tr><td>{min,max}</td><td>$min&lt;x&lt;max$</td></tr><tr><td>$[ ]$</td><td>Match a single character in</td></tr><tr><td>$[\text{^}  ]$</td><td>Match a single character not in</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>regexp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim plugins for Clojure</title>
    <link href="/2015/2015-12-21-vim-plugins-for-clojure/"/>
    <url>/2015/2015-12-21-vim-plugins-for-clojure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="vim-salve"><a href="#vim-salve" class="headerlink" title="vim-salve"></a><a href="https://github.com/tpope/vim-salve">vim-salve</a></h2><blockquote><p>:Console<br>command to start a REPL or focus an existing instance if already running using dispatch.vim<br>:Console!<br>command to start a REPL or focus an existing instance if already running using dispatch.vim  </p></blockquote><h2 id="vim-dispatch"><a href="#vim-dispatch" class="headerlink" title="vim-dispatch"></a><a href="https://github.com/tpope/vim-dispatch">vim-dispatch</a></h2><h3 id="Foreground-build"><a href="#Foreground-build" class="headerlink" title="Foreground build"></a>Foreground build</h3><blockquote><p>:Make<br>Using under <code>tmux</code> will horizontally split current vim window to initial a lein session; Make use of the <code>make</code> in vim<br>:Dispatch<br>Using under <code>tmux</code> will horizontally split current vim window to initial a lein session  </p></blockquote><h3 id="Background-build"><a href="#Background-build" class="headerlink" title="Background build"></a>Background build</h3><blockquote><p>:Make!<br>Using under <code>tmux</code> will create a new tmux window and exit if building finished; make use of the <code>make</code> in vim<br>:Dispatch!<br>Using under <code>tmux</code> will create a new tmux window and exit if building finished  </p></blockquote><h3 id="Spawning-interactive-processes"><a href="#Spawning-interactive-processes" class="headerlink" title="Spawning interactive processes"></a>Spawning interactive processes</h3><blockquote><p>:Start lein repl  </p></blockquote><h2 id="vim-fireplace"><a href="#vim-fireplace" class="headerlink" title="vim-fireplace"></a><a href="https://github.com/tpope/vim-fireplace">vim-fireplace</a></h2><h3 id="Navigating-and-Comprehending"><a href="#Navigating-and-Comprehending" class="headerlink" title="Navigating and Comprehending"></a>Navigating and Comprehending</h3><p><code>:Source</code>, <code>:Doc</code>, and <code>:FindDoc</code>, which map to the underlying clojure.repl macro (with tab complete, of course).<br><code>K</code> is mapped to look up the symbol under the cursor with doc.<br><code>[d</code> is mapped to look up the symbol under the cursor with source.<br><code>[&lt;C-D&gt;</code> jumps to the definition of a symbol (even if it’s inside a jar file).<br><code>gf</code>, everybody’s favorite “go to file” command, works on namespaces.  </p><h3 id="Evaluating-from-the-buffer"><a href="#Evaluating-from-the-buffer" class="headerlink" title="Evaluating from the buffer"></a>Evaluating from the buffer</h3><p><code>cqq</code> prepopulates the command-line window with the expression under the cursor.<br><code>cqc</code> gives you a blank line in insert mode.<br><code>cp</code> operator that evaluates a given motion<br><code>cpp</code> for the innermost form under the cursor.<br><code>cm</code> and <code>c1m</code> are similar, but they only run <code>clojure.walk/macroexpand-all</code> and <code>macroexpand-1</code> instead of evaluating the form entirely</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Proxy Class</title>
    <link href="/2015/2015-12-07-java-proxy-class/"/>
    <url>/2015/2015-12-07-java-proxy-class/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>Java has 2 kinds of proxy, <code>static</code> and <code>dynamic</code>.<br>I will introduce them one by one. But for demonstrating usage, I need to declare several java bean here.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Work</span><br>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Work</span><br>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Invoking print in WorkImpl class&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>These 2 classes are common ones for later tests.</p><h1 id="Static-Proxy"><a href="#Static-Proxy" class="headerlink" title="Static Proxy"></a>Static Proxy</h1><p><code>Static proxy</code> means to build the proxy before runtime, so static proxy class needs to be compiled for usage. In addition, static proxy needs to implement all involved proxyed methods, which is really painful.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Work</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Work proxyedWork;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WorkProxy</span><span class="hljs-params">(Work real)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.proxyedWork = real;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before&quot;</span>);<br>        <span class="hljs-built_in">this</span>.proxyedWork.print();<br>        System.out.println(<span class="hljs-string">&quot;After&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Quite straight forward, static proxy is a simple wrapper that implements the same interface.<br>But be aware, you need to implement all method for wrapping one class. This is reall tedious, especially if all wrapping functions are the same.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StaticWorkTest</span><br>&#123;<span class="hljs-comment">//Test code</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">Work</span> <span class="hljs-variable">work</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkImpl</span>();<br>        <span class="hljs-type">WorkProxy</span> <span class="hljs-variable">proxy</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkProxy</span>(work);<br>        proxy.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Dynamic-Proxy"><a href="#Dynamic-Proxy" class="headerlink" title="Dynamic Proxy"></a>Dynamic Proxy</h1><p><code>Dynamic proxy</code> means to proxy methods during runtime. Dynamic proxy need to setup only one method for encapsulating. But for the convenience, performance is sacrificed. Dynamic proxy is 100 times slower than static one.<br>Actually there are two dynamic proxies: one is the Java supported interface way, another is CGlib based. I will showcase them later on.   </p><blockquote><p>One thing I need to emphasis here is, even though I wrote subsection name with <code>Java Reflection</code> and <code>Code Generation</code>, they both utimately achieve proxy function by byte code generation. </p></blockquote><p>Still, Different way of dynamic proxying has different restriction, choose the best one to fit your project.  </p><h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><p>In Java reflection supported dynamic proxy solution, the proxyed class has to implement one interface named <code>InvocationHandler</code>.   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Object object;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">WorkProxy</span><span class="hljs-params">(Object object)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.object = object;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">bind</span><span class="hljs-params">(Object obj)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(obj.getClass().getClassLoader(),<br>                                      obj.getClass().getInterfaces(),<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkProxy</span>(obj));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before Reflection&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> method.invoke(object, args);<br>        System.out.println(<span class="hljs-string">&quot;After Reflection&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>As you can see, class want to be proxied has to implement <code>InvocationHandler</code> interface. This is the only restriction of Java Reflection supported dynamic proxy.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkTest</span><br>&#123;<span class="hljs-comment">//Test class</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">Work</span> <span class="hljs-variable">proxyedWork</span> <span class="hljs-operator">=</span> (Work) WorkProxy.bind(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkImpl</span>());<br>        proxyedWork.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>But because we could only proxy interface implemented classes, we are unable to make use of this method in some cases.  </p><h2 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h2><p>So to solve this problem, <a href="http://search.maven.org/#artifactdetails%7Ccglib%7Ccglib%7C3.2.0%7Cjar">CGLib</a> provisioned another way to proxy dynamically.<br>By generating <code>subclass</code> of the target, this dynamic proxy method now could proxy any class except those with <code>final</code> ones.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MethodInterceptor</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getInstance</span><span class="hljs-params">(Object target)</span><br>    &#123;<br>        <span class="hljs-type">Enhancer</span> <span class="hljs-variable">enhancer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Enhancer</span>();<br>        <span class="hljs-comment">// call back</span><br>        enhancer.setCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkProxy</span>());<br>        enhancer.setSuperclass(target.getClass());<br>        <span class="hljs-comment">// create proxy object</span><br>        <span class="hljs-keyword">return</span> enhancer.create();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">intercept</span><span class="hljs-params">(Object obj, Method method, Object[] args, MethodProxy proxy)</span> <span class="hljs-keyword">throws</span> Throwable<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;Before CG&quot;</span>);<br>        method.invoke(proxy, args);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> proxy.invokeSuper(obj, args);<br>        System.out.println(<span class="hljs-string">&quot;After CG&quot;</span>);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>In this instance we build a class that implements a CGLib interface <code>MethodInterceptor</code>, but now we could proxy any <code>not final</code> classes by using this proxy class.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WorkTest</span><br>&#123;<span class="hljs-comment">//Test code</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWork</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-type">Work</span> <span class="hljs-variable">proxyedWork</span> <span class="hljs-operator">=</span> (Work) WorkProxy.getInstance(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WorkImpl</span>());<br>        proxyedWork.print();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some misdirection of my values</title>
    <link href="/2015/2015-11-24-some-misdirection-of-my-values/"/>
    <url>/2015/2015-11-24-some-misdirection-of-my-values/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>今天做饭的时候突然想到的。<br>以前想到ZL居然没有和DL或者DY或者SD在一起，而却选择了一个好像蛮奇怪但其实我们不太了解的人。据说是在游戏里认识的，谁知道呢？<br>然后他们在一起了，好像很幸福的样子，一起去旅游，一起出去玩。而DY等人则也开始了新的人生。<br>我总是会把这个事情跟朋友提起来，好像我很怀旧的样子。但我也知道老是提这种老故事其实没什么意思，都过去了，确实如此。<br>因为我总是会觉得，美丽的女生不是应该和优秀或者帅气或者有钱或者体贴的好男人在一起吗？<br>哈，其实谁知道现在那个男生是不是集这些优点于一身呢？  只是我不知道而已，就这么臆测别人一定是不好的，我也是挺主观的，嗯在这个事情上确实做的不好。<br>总觉得美女不是应该和极其优秀的人在一起吗？而不是一个可能挺不咋地的人。<br>有人可能会觉得，美女不都是应该和有钱的老男人在一起吗？对啊，这就是<code>夏洛特</code>里的剧情嘛。当我看到这个电影逻辑的时候，它的三观的时候，我也觉得不太好。<br>毕竟谁说美女必须要和有钱的老男人在一起的，人家三观正，做正确的事情，和优秀的美好的人在一起，这就够了。<br>钱并不是最关键的。<br>想想，那些优秀的女人，他们背后的男人一般都会是很优秀，很有层次的，我不说国内。比如长的好，有风度，身体很棒，成熟，豁达，有内涵。这些都是看不到的，但却很重要的。  </p><p>今天在做饭的时候想到这个剧情，突然觉得其实我在这方面三观也不正啊，一边批评电影说它三观有问题，一边自己还喜欢美女和帅哥在一起。  </p><p>不过我这人最大的优点就在于，经常愿意反省自己，并尽快改正。  用比较严密的逻辑去推理一个建议和意见的正确性，并最后部署到我的思维里去。<br>所以我才能不断进步啊。</p><p>祝初中的各位好朋友幸福！  春花快结婚了，我也回不去，只能打个电子红包了。</p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Oracle glossary</title>
    <link href="/2015/2015-11-01-oracle-glossary/"/>
    <url>/2015/2015-11-01-oracle-glossary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="http://serverfault.com/a/51304/240955">serverfault</a></p><h2 id="Database-Name"><a href="#Database-Name" class="headerlink" title="Database Name"></a>Database Name</h2><p>The identifier or name for a specific database. For example, <code>db</code>.</p><h2 id="Database-Domain"><a href="#Database-Domain" class="headerlink" title="Database Domain"></a>Database Domain</h2><p>Usually use as your domain name. Like, <code>rugal.ga</code>.</p><h2 id="Global-Database-Name"><a href="#Global-Database-Name" class="headerlink" title="Global Database Name"></a>Global Database Name</h2><p>combine Database name with domain name. In our example, it is <code>db.rugal.ga</code>.</p><h2 id="SID"><a href="#SID" class="headerlink" title="SID"></a>SID</h2><p>Means <code>System Identidier</code>, the most cricial name or identifier to an <code>Instance</code>. It is possible to have multiple instances for a database.<br>Say if you have 2 instance to connect to a database, usually SID will be <code>database name + instance number</code>, that is <code>db1</code> and <code>db2</code>.  </p><h2 id="Instance-Name"><a href="#Instance-Name" class="headerlink" title="Instance Name"></a>Instance Name</h2><p>It is the same with <code>SID</code>.</p><h2 id="Service-Name"><a href="#Service-Name" class="headerlink" title="Service Name"></a>Service Name</h2><p>A “connector” to one or more instances.<br>It is often useful to create additional service names in a RAC environment since the service can be modified to use particular SIDs as primary or secondary connections, or to not use certain SIDs at all.</p><h2 id="Service-Alias"><a href="#Service-Alias" class="headerlink" title="Service Alias"></a>Service Alias</h2><p>An alias to the service name (just like a CNAME, etc).<br>Say you make your service name something meaningful to the dba, but perhaps it’s a bit esoteric.<br>Create a service alias and name it something that will be meaningful to the user.</p><hr><h2 id="Automatic-workload-repository"><a href="#Automatic-workload-repository" class="headerlink" title="Automatic workload repository"></a>Automatic workload repository</h2><p>The Automatic Workload Repository (<a href="https://docs.oracle.com/cd/E11882_01/server.112/e41573/autostat.htm#PFGRF02601">AWR</a>) collects, processes, and maintains performance statistics for problem detection and self-tuning purposes.<br>New feature of 10G, similar to <code>statpack</code> but even simpler.  Store last 7 days information in <code>sys</code> and <code>sysaux</code> tablespace.  </p><h2 id="Automatic-Database-Diagnostic-Monitor"><a href="#Automatic-Database-Diagnostic-Monitor" class="headerlink" title="Automatic Database Diagnostic Monitor"></a>Automatic Database Diagnostic Monitor</h2><p>The Automatic Database Diagnostic Monitor (<a href="https://docs.oracle.com/cd/B19306_01/server.102/b14211/diagnsis.htm#i37241">ADDM</a>) provides a holistic tuning solution. ADDM analysis can be performed over any time period defined by a pair of AWR snapshots taken on a particular instance. Analysis is performed top down, first identifying symptoms and then refining them to reach the root causes of performance problems.<br>Provision SQL tunning, index creation, gathering of statistics recommendation.<br>When comparing a pair of AWR snapshot, it detects workload changes, configuration changes and shows the resource usage for CPU, memory, and I&#x2F;O in both time periods.  </p><h2 id="Active-Session-History"><a href="#Active-Session-History" class="headerlink" title="Active Session History"></a>Active Session History</h2><p>To capture a detailed history of database activity, Oracle Database samples active sessions each second with the Active Session History (<a href="https://docs.oracle.com/cd/E11882_01/server.112/e10822/tdppt_transient.htm#TDPPT065">ASH</a>) sampler. AWR snapshot processing collects the sampled data into memory and writes it to persistent storage. ASH is an integral part of the Oracle Database self-management framework and is extremely useful for diagnosing performance problems.<br>Based on <code>v$session</code>, sampling ever second.  </p><hr><h2 id="sqlnet-ora"><a href="#sqlnet-ora" class="headerlink" title="sqlnet.ora"></a>sqlnet.ora</h2><ol><li>Specify the client domain to append to unqualified names</li><li>Prioritize naming methods</li><li>Enable logging and tracing features</li><li>Route connections through specific processes</li><li>Configure parameters for external naming</li><li>Configure Oracle Advanced Security</li><li>Use protocol-specific parameters to restrict access to the database</li></ol><h2 id="listener-ora"><a href="#listener-ora" class="headerlink" title="listener.ora"></a>listener.ora</h2><ol><li>Name of the listener</li><li>Protocol addresses that the listener is accepting connection requests on</li><li>Database services<br>Dynamic service registration, eliminates the need for static configuration of supported services. However, static service configuration is required if you plan to use Oracle Enterprise Manager.</li><li>Control parameters</li></ol><h2 id="tnsname-ora"><a href="#tnsname-ora" class="headerlink" title="tnsname.ora"></a>tnsname.ora</h2><p>The <code>tnsnames.ora</code> file is a configuration file that contains network service names mapped to connect descriptors for the local naming method, or net service names mapped to listener protocol addresses.  </p><p>A net service name is an alias mapped to a database network address contained in a connect descriptor. A connect descriptor contains the location of the listener through a protocol address and the service name of the database to which to connect. Clients and database servers (that are clients of other database servers) use the net service name when making a connection with an application.</p><hr><h2 id="SQL-tuning-advisor"><a href="#SQL-tuning-advisor" class="headerlink" title="SQL tuning advisor"></a>SQL tuning advisor</h2><p>The <a href="https://docs.oracle.com/cd/B28359_01/server.111/b28274/sql_tune.htm#CHDJDFGE">SQL Tuning Advisor</a> takes one or more SQL statements as an input and invokes the Automatic Tuning Optimizer to perform SQL tuning on the statements. The output of the SQL Tuning Advisor is in the form of an advice or recommendations, along with a rationale for each recommendation and its expected benefit. The recommendation relates to collection of statistics on objects, creation of new indexes, restructuring of the SQL statement, or creation of a SQL profile. You can choose to accept the recommendation to complete the tuning of the SQL statements.</p><h2 id="SQL-access-advisor"><a href="#SQL-access-advisor" class="headerlink" title="SQL access advisor"></a>SQL access advisor</h2><p>The SQL Access Advisor helps you achieve your performance goals by recommending the proper set of materialized views, materialized view logs, and indexes for a given workload. Understanding and using these structures is essential when optimizing SQL as they can result in significant performance improvements in data retrieval.</p><h2 id="SQL-performance-analyzer"><a href="#SQL-performance-analyzer" class="headerlink" title="SQL performance analyzer"></a>SQL performance analyzer</h2><p><a href="https://oracle-base.com/articles/11g/sql-performance-analyzer-11gr1">SQL Performance Analyzer</a>, which compares the performance of the statements in a tuning set before and after a database change. The database change can be as major or minor as you like.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT User interface</title>
    <link href="/2015/2015-10-25-jpt-user-interface/"/>
    <url>/2015/2015-10-25-jpt-user-interface/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>UserAction</code> mostly deal with normal user related jobs. Such like registration, deregistration, user profile updating and user searching.<br>Although the class is Action, I plan to change it to <code>*Controller</code>.<br>All interfaces of this controller are under <code>/user</code> path.<br>In this controller, all interfaces except <code>User Registration</code> does not require authentication fields.<br>Authentication fields are <code>id</code> and <code>credential</code> fields in header.  Corresponding to the information of user who currently log in client.  </p><hr><h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="User-Registration"><a href="#User-Registration" class="headerlink" title="User Registration"></a>User Registration</h2><p>Use this API to register an user with an invitation code and its corresponding referee.<br>The json string contains required fields for registration.  Fields that must be filled are <code>email</code> and <code>username</code>.<br>Service will send a email to specified address to initialize password.<br>Make sure <code>username</code> is unique in server, no conflict username is allowed.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/user?referee=&#123;refereeUID&#125;&amp;code=&#123;invitation-code&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><br><span class="language-perl">&#123;<span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;unencrypted-password&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;email&quot;</span>:<span class="hljs-string">&quot;email@email.com&quot;</span>&#125;</span><br></code></pre></td></tr></table></figure><h2 id="User-Profile-retrieve"><a href="#User-Profile-retrieve" class="headerlink" title="User Profile retrieve"></a>User Profile retrieve</h2><p>Get user profile. Target user is represented as <code>&#123;uid&#125;</code>. Basically, any user could view any user in server.<br>But authentication fields are still required.</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user/&#123;uid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br></code></pre></td></tr></table></figure><h2 id="Check-email-availibility"><a href="#Check-email-availibility" class="headerlink" title="Check email availibility"></a>Check email availibility</h2><p>Check if the email is available for registration.<br>Return Message object, <code>SUCCESS</code> means available and <code>FAIL</code> corresponding to <code>unavailable</code>.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user?email=&#123;email&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br></code></pre></td></tr></table></figure><h2 id="Check-username-availibility"><a href="#Check-username-availibility" class="headerlink" title="Check username availibility"></a>Check username availibility</h2><p>Check if the username is available for registration.<br>Return Message object, <code>SUCCESS</code> means available and <code>FAIL</code> corresponding to <code>unavailable</code>.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">GET</span> <span class="hljs-string">/user?username=&#123;username&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br></code></pre></td></tr></table></figure><h2 id="Update-User-Profile"><a href="#Update-User-Profile" class="headerlink" title="Update User Profile"></a>Update User Profile</h2><p>Update user profile. Basically including all field except <code>username</code>, <code>uid</code>, <code>email</code>.<br><code>email</code> could only be modified by specific interface, whereas <code>username</code> and <code>uid</code> are readonly.<br>Current version has not many fields to fill, please wait for future release.  </p><p><code>uid</code> in JSON in request body will be ignored. Only <code>uid</code> in URL path will be updated as the content in request body.<br>That means <code>uid</code> in request body can do nothing.<br>Normal user that without administrator permission could not updat others, thus, authentication fields must corresponding to the updated user.<br>For administrator usage, they have the permission to modify other users, thus they need to identify themselves by the authentication fields.<br>After getting authority, still, only user with <code>uid</code> in URL path will be updated.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/user/&#123;uid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;unencrypted-password&quot;</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><h2 id="Deregister-User"><a href="#Deregister-User" class="headerlink" title="Deregister User"></a>Deregister User</h2><p>Usually deregistration will not delete user in database, but set their status as unloggable.<br>Just like updating user, only <code>uid</code> in URL will be operated, authentication fields are just for user identity ensurance.  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">DELETE</span> <span class="hljs-string">/user/&#123;uid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT User Level object</title>
    <link href="/2015/2015-10-25-jpt-user-level-object/"/>
    <url>/2015/2015-10-25-jpt-user-level-object/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>User Level</code> Class used for represent the level of user, indicating user’s loyalty and contribution to our site.<br>Commonly, all downloadable torrent will be included with <code>Post</code>, each post with has a minimum requirement for allowing user to access or download. From this pespective, <code>User Level</code> class doing the job for classifying users.  </p><h1 id="Table-Structure"><a href="#Table-Structure" class="headerlink" title="Table Structure"></a>Table Structure</h1><p>Beware that we use the name of <code>UserLevel</code> in Java but it map to <code>Level</code> in database for clarifying keyword.<br>The data in this table mostly fixed in most of time. So their <code>lid</code> will be relatively low and might not changes.  </p><p>Column  | Type<br>—|——–|———<br> lid             |  | integer<br> minimum          | | integer<br> name             | | character varying(50)<br> icon             | | character varying(50)<br> min_upload_byte   || bigint<br> min_download_byte || bigint</p><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserLevel</span><br>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Basic(optional = false)</span><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer lid;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer minimum;<br><br>    <span class="hljs-meta">@Column(length = 50)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> String icon;<br><br>    <span class="hljs-meta">@Column(name = &quot;min_upload_byte&quot;)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Long minUploadByte;<br><br>    <span class="hljs-meta">@Column(name = &quot;min_download_byte&quot;)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Long minDownloadByte;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;minLevel&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;Post&gt; postList;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p><code>UserLevel</code> usually will not return independently, but nested with <code>User</code> or <code>Post</code> class.<br>A sample format like:  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1895</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;minimum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT Thread object</title>
    <link href="/2015/2015-10-14-jpt-thread-object/"/>
    <url>/2015/2015-10-14-jpt-thread-object/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Thread</code> object is the reply or comments of other user to post.<br>The real <code>rate</code> data is accumulated from this table.  </p><h1 id="Table-Structure"><a href="#Table-Structure" class="headerlink" title="Table Structure"></a>Table Structure</h1><table><thead><tr><th>Column</th><th></th><th>Type</th></tr></thead><tbody><tr><td>tid</td><td></td><td>integer</td></tr><tr><td>pid</td><td></td><td>integer</td></tr><tr><td>uid</td><td></td><td>integer</td></tr><tr><td>content</td><td></td><td>text</td></tr><tr><td>post_time</td><td></td><td>bigint</td></tr><tr><td>rate</td><td></td><td>integer</td></tr></tbody></table><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Thread</span><br>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Basic(optional = false)</span><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer tid;<br>    <span class="hljs-comment">//primary key</span><br><br>    <span class="hljs-meta">@Column(length = 2147483647)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-comment">//the comment of this thread</span><br><br>    <span class="hljs-meta">@Column(name = &quot;post_time&quot;)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Long postTime;<br><br>    <span class="hljs-meta">@Column(name = &quot;rate&quot;)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer rate;<br>    <span class="hljs-comment">//rate mark given by this user</span><br><br>    <span class="hljs-meta">@JoinColumn(name = &quot;pid&quot;, referencedColumnName = &quot;pid&quot;)</span><br>    <span class="hljs-meta">@ManyToOne</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Post post;<br>    <span class="hljs-comment">//the parent post</span><br><br>    <span class="hljs-meta">@JoinColumn(name = &quot;uid&quot;, referencedColumnName = &quot;uid&quot;)</span><br>    <span class="hljs-meta">@ManyToOne</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> User user;<br>    <span class="hljs-comment">//the user who made this thread</span><br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;tid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">284</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;TEST CONTENT&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;postTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">-9223372036854775808</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;post&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1166</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test title&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;infoHash&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7036CA4C717C0D9FEABB26F9A60C63DD887F8FCC&quot;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rate&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0.0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;postTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1444797182998</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;minLevel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2010</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;minimum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2147483647</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>     <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span><br>       <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2171</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1444797182983</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><br>       <span class="hljs-punctuation">&#125;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;replyer&quot;</span><span class="hljs-punctuation">:</span><br>     <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2171</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1444797182983</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>   <span class="hljs-attr">&quot;rate&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">5</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT Post object</title>
    <link href="/2015/2015-10-13-jpt-post-object/"/>
    <url>/2015/2015-10-13-jpt-post-object/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introdution"><a href="#Introdution" class="headerlink" title="Introdution"></a>Introdution</h1><p><code>Post</code> is a table that store records about posts and published torrent, information like <code>info_hash</code> and <code>bencode</code> are stored in corresponding row.<br>The idea behind this is that, any post must be accompanied by a related torrent file, of couse its <code>info_hash</code> and <code>bencode</code> will be stored together with the post for storage convenience.  </p><h1 id="Table-structure"><a href="#Table-structure" class="headerlink" title="Table structure"></a>Table structure</h1><p>Postgresql provides byte array type <code>bytea</code>, thus I could store the bencoded torrent file into a line.<br>The <code>info_hash</code> column is for searching by.  </p><table><thead><tr><th align="left">Column</th><th></th><th align="left">Type</th></tr></thead><tbody><tr><td align="left">pid</td><td></td><td align="left">integer</td></tr><tr><td align="left">uid</td><td></td><td align="left">integer</td></tr><tr><td align="left">title</td><td></td><td align="left">character varying(50)</td></tr><tr><td align="left">content</td><td></td><td align="left">text</td></tr><tr><td align="left">post_time</td><td></td><td align="left">bigint</td></tr><tr><td align="left">size</td><td></td><td align="left">integer</td></tr><tr><td align="left">enabled</td><td></td><td align="left">boolean</td></tr><tr><td align="left">min_level</td><td></td><td align="left">integer</td></tr><tr><td align="left">info_hash</td><td></td><td align="left">character varying(50)</td></tr><tr><td align="left">bencode</td><td></td><td align="left">bytea</td></tr></tbody></table><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Post</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseObject</span>&lt;Post&gt;<br>&#123;<br><br>    <span class="hljs-meta">@Basic(optional = false)</span><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer pid;<br>    <span class="hljs-comment">//primary key</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(length = 50)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">//the title of the post showing in summary page</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(length = 2147483647)</span><br>    <span class="hljs-keyword">private</span> String content;<br>    <span class="hljs-comment">//Postgresql provides text type for unlimited content</span><br>    <span class="hljs-comment">//We will store user post content in markdown</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(length = 50, name = &quot;info_hash&quot;)</span><br>    <span class="hljs-keyword">private</span> String infoHash;<br>    <span class="hljs-comment">//The info hash for searching</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(name = &quot;post_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Long postTime;<br><br>    <span class="hljs-meta">@Column(length = 2147483647)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] bencode;<br>    <span class="hljs-comment">//the original uploaded bencoded torrent file</span><br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer size;<br>    <span class="hljs-comment">//size of total file storage to be downloaded</span><br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Boolean enabled;<br>    <span class="hljs-comment">//set if current post is visible by all</span><br><br>    <span class="hljs-meta">@JoinColumn(name = &quot;min_level&quot;, referencedColumnName = &quot;lid&quot;)</span><br>    <span class="hljs-meta">@ManyToOne</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> UserLevel minLevel;<br>    <span class="hljs-comment">//the minimum user level that could access this post.</span><br><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> rate;<br>    <span class="hljs-comment">//average rate for this post</span><br><br>    <span class="hljs-meta">@JoinColumn(name = &quot;uid&quot;, referencedColumnName = &quot;uid&quot;)</span><br>    <span class="hljs-meta">@ManyToOne</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> User uid;<br>    <span class="hljs-comment">//user who upload this post</span><br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;pid&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;PostTags&gt; postTagsList;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;pid&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;Thread&gt; threadList;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;pid&quot;)</span><br>    <span class="hljs-keyword">private</span> List&lt;ClientAnnounce&gt; clientAnnounceList;<br><span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>The <code>rate</code> field will be dynamically computed when evaluatinng.</p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><p>An example post object in json format is shown as below:  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1094</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test title&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;postTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1444791559704</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;infoHash&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7036CA4C717C0D9FEABB26F9A60C63DD887F8FCC&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;minLevel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1895</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;minimum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2147483647</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;rate&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0.0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2031</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>         <span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1444791559685</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><span class="hljs-punctuation">&#125;</span><br> <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UML sequence diagram</title>
    <link href="/2015/2015-10-08-uml-sequence-diagram/"/>
    <url>/2015/2015-10-08-uml-sequence-diagram/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Synchronous-call"><a href="#Synchronous-call" class="headerlink" title="Synchronous call"></a>Synchronous call</h2><p>send message and suspend execution while waiting for response. Synchronous Messages are shown with <code>filled</code> arrow head.</p><h2 id="Asynchronous-call"><a href="#Asynchronous-call" class="headerlink" title="Asynchronous call"></a>Asynchronous call</h2><p>send message and proceed immediately without waiting for return value. Asynchronous Messages have an <code>open</code> arrow head.</p><h2 id="Reply-Message"><a href="#Reply-Message" class="headerlink" title="Reply Message"></a>Reply Message</h2><p><code>dashed</code> line with <code>open</code> arrow head.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>uml</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Springmvc parameter IllegalArgumentException</title>
    <link href="/2015/2015-10-03-springmvc-parameter-IllegalArgumentException/"/>
    <url>/2015/2015-10-03-springmvc-parameter-IllegalArgumentException/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I encounter the same problem as this <a href="https://objectpartners.com/2010/08/12/spring-pathvariable-head-slapper/">page</a> claimed.<br>The actual problem is that, turning javac target’s debug attribute to <code>on</code> will enable JVM to detect parameter name during runtime.<br>Otherwise, we need to specify the name of the parameter in </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//change this</span><br><span class="hljs-meta">@RequestParam</span> String name<br><span class="hljs-comment">//to this</span><br><span class="hljs-meta">@RequestParam(value = &quot;name&quot;)</span> String name<br></code></pre></td></tr></table></figure><p>to enable the runtime detection whatever debug attribute is on or not.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Uploading file other than post</title>
    <link href="/2015/2015-10-03-uploading-file-other-than-post/"/>
    <url>/2015/2015-10-03-uploading-file-other-than-post/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Restful style of API designing broaden my horizon by standardizing the rule for API.  </p><h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><p>must be something <code>new</code> into server, which means creating a new resource. </p><h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>Must be <code>updating</code> existing resources in server.</p><h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>Must <code>delete</code> a exist resource in server, if not so, ignore its operation.</p><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><p>Obviously, it is read only operation.</p><p>But most of the uploading APIs are designed to use POST, even in springmvc’s <code>org.springframework.test.web.servlet.request.MockMvcRequestBuilders.fileUpload</code>, it use <code>POST</code> method only. I think this is not a good practise, especially for a person who want to insist on using Restful style.  </p><p>Other than using <code>POST</code>, what we could do to achieve this is like below, idea is part from <a href="http://stackoverflow.com/a/10041789/1242236">SOF</a>:  </p><hr><h2 id="MultipartResovler"><a href="#MultipartResovler" class="headerlink" title="MultipartResovler"></a>MultipartResovler</h2><p>Extends <code>CommonsMultipartResolver</code> to enable multipart resolvation other than <code>POST</code>.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExtendedMultipartResolver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">CommonsMultipartResolver</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">MULTIPART</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;multipart&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMultipartContent</span><span class="hljs-params">(HttpServletRequest request)</span><br>    &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">httpMethod</span> <span class="hljs-operator">=</span> request.getMethod().toLowerCase();<br>        <span class="hljs-comment">// test for allowed methods here...</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">contentType</span> <span class="hljs-operator">=</span> request.getContentType();<br>        <span class="hljs-keyword">return</span> (contentType != <span class="hljs-literal">null</span> &amp;&amp; contentType.toLowerCase().startsWith(MULTIPART));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isMultipart</span><span class="hljs-params">(HttpServletRequest request)</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> (request != <span class="hljs-literal">null</span> &amp;&amp; isMultipartContent(request));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Springmvc-configuration"><a href="#Springmvc-configuration" class="headerlink" title="Springmvc configuration"></a>Springmvc configuration</h2><p>In springmvc application context file, add the last class we created:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-comment">//bean name must be exactly &quot;multipartResolver&quot;</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">ExtendedMultipartResolver</span> <span class="hljs-variable">emr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ExtendedMultipartResolver</span>();<br>    <span class="hljs-comment">//notice this parameter is also important to configure</span><br>    cmr.setMaxUploadSize(<span class="hljs-number">9999999</span>);<br>    <span class="hljs-keyword">return</span> emr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="JAR"><a href="#JAR" class="headerlink" title="JAR"></a>JAR</h2><p>Because we introduced <code>CommonsMultipartResolver</code>, which uses 2 apache jars, we also need to import them in pom file:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-fileupload<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Unit-test"><a href="#Unit-test" class="headerlink" title="Unit test"></a>Unit test</h2><p>Now seems all configuration are done, time to start coding for unit test:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateOperation</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;update operation&quot;</span>);<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>    <span class="hljs-type">MockMultipartFile</span> <span class="hljs-variable">multipartFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MockMultipartFile</span>(<span class="hljs-string">&quot;file&quot;</span>, fis);<br>    Map&lt;String, String&gt; contentTypeParams = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>    <span class="hljs-comment">//The boundary parameter is important!</span><br>    contentTypeParams.put(<span class="hljs-string">&quot;boundary&quot;</span>, <span class="hljs-string">&quot;RugalBernstein&quot;</span>);<br>    <span class="hljs-type">MediaType</span> <span class="hljs-variable">mediaType</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MediaType</span>(<span class="hljs-string">&quot;multipart&quot;</span>, <span class="hljs-string">&quot;form-data&quot;</span>, contentTypeParams);<br>    <span class="hljs-type">MvcResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.mockMvc.perform(put(<span class="hljs-string">&quot;/tag/&quot;</span> + db.getTid())<br>        .header(SystemDefaultProperties.ID, user.getUid())<br>        .header(SystemDefaultProperties.CREDENTIAL, user.getPassword())<br>        .param(<span class="hljs-string">&quot;name&quot;</span>, db.getName() + <span class="hljs-string">&quot;Updated&quot;</span>)<br>        .content(multipartFile.getBytes())<br>        .contentType(mediaType)<br>        .accept(MediaType.APPLICATION_JSON))<br>        .andExpect(status().isOk())<br>        .andDo(print())<br>        .andReturn();<br>&#125;<br></code></pre></td></tr></table></figure><p>This should be pretty satisfying, because we not only stick to the Restful style, but also upload file successfully.   </p><hr><p>Notice the <code>boundary</code> parameter in content type is mandatory.  For people do not know what boundary is, <a href="http://www.w3.org/Protocols/rfc1341/7_2_Multipart.html">here</a> are some <a href="http://stackoverflow.com/a/10932533/1242236">posts</a>.<br>Hope this post could help someone!</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Latex block positioning</title>
    <link href="/2015/2015-09-29-latex-block-positioning/"/>
    <url>/2015/2015-09-29-latex-block-positioning/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>There are some positioning parameters for text block like table or image to place in a page.  </p><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\begin</span>&#123;figure&#125;[h]<br><span class="hljs-keyword">\end</span>&#123;figure&#125;<br><span class="hljs-keyword">\begin</span>&#123;table&#125;[ht]<br><span class="hljs-keyword">\end</span>&#123;table&#125;<br></code></pre></td></tr></table></figure><p>Those characters in the square brackets are parameters to position.  </p><table><thead><tr><th align="left">Parameter</th><th align="left">Position</th></tr></thead><tbody><tr><td align="left">h</td><td align="left">Place the float here, i.e., approximately at the same point it occurs in the source text (however, not exactly at the spot)</td></tr><tr><td align="left">t</td><td align="left">Position at the top of the page.</td></tr><tr><td align="left">b</td><td align="left">Position at the bottom of the page.</td></tr><tr><td align="left">p</td><td align="left">Put on a special page for floats only.</td></tr><tr><td align="left">!</td><td align="left">Override internal parameters LaTeX uses for determining “good” float positions.</td></tr><tr><td align="left">H</td><td align="left">Places the float at precisely the location in the LATEX code. Requires the float package. This is somewhat equivalent to h!.</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT Pagination object</title>
    <link href="/2015/2015-09-28-jpt-pagination-object/"/>
    <url>/2015/2015-09-28-jpt-pagination-object/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Pagination</code> is a wrapper for encapsulate a list of same object in a page. This class will only do wraping work, such like indicating current page number and size of this page.<br>Common senario of using <code>Pagination</code> class is like list searching.  </p><h1 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h1><p>This class inherit from <code>ml.rugal.sshcommon.page.SimplePage</code>, hence its fields structure is like below:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pagination</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SimplePage</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Paginable<br>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> totalCount;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> pageSize;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-type">int</span> pageNo;<br>    <span class="hljs-keyword">private</span> List&lt;?&gt; list;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>So when do searching, server will return a page of object, to indicate current page and page size.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SUCCESS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;MESSAGE&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span>...<span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pageNo&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>As you can see the pagination is nested inside a <code>Message</code> object as the data field.  Inside the pagination object, there is a <code>list</code> field telling the real object retrieved from server; a <code>totalCount</code> indicate number of object inside th list; <code>pageSize</code> and <code>pageNo</code> represent size of each page and numebr of current page respectively.  </p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><p>Below is an instance of result of getting a list af threads  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SUCCESS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Get thread&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;tid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">171</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;TEST CONTENT&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;postTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1443469243751</span><span class="hljs-punctuation">,</span> <br>    <span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">803</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test title&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;rate&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0.0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;infoHash&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7036CA4C717C0D9FEABB26F9A60C63DD887F8FCC&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;postTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1443469243741</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;minLevel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1347</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;minimum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2147483647</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1391</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>                  <span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1443469243596</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1391</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1443469243596</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><span class="hljs-punctuation">&#125;</span><br>         <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;totalCount&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pageSize&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;pageNo&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1</span><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>Because there is only one object in list, the <code>totalCount</code> field is 1, which is very intuitive.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT User object</title>
    <link href="/2015/2015-09-18-jpt-user-object/"/>
    <url>/2015/2015-09-18-jpt-user-object/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>User</code> is a table that record all user profile information, like user ID, password referee etc.,  More importantly, upload and download bytes also recorded in this table.<br>I use bigint in database to store <code>date</code> for all <code>time</code> related fields.<br>For upload and download bytes, I use bigint in postgresql.  </p><h1 id="Table-structure"><a href="#Table-structure" class="headerlink" title="Table structure"></a>Table structure</h1><table><thead><tr><th>Column</th><th></th><th>Type</th></tr></thead><tbody><tr><td>uid</td><td></td><td>integer</td></tr><tr><td>password</td><td></td><td>character varying(100)</td></tr><tr><td>username</td><td></td><td>character varying(100)</td></tr><tr><td>email</td><td></td><td>character varying(100)</td></tr><tr><td>upload_byte</td><td></td><td>bigint</td></tr><tr><td>download_byte</td><td></td><td>bigint</td></tr><tr><td>credit</td><td></td><td>integer</td></tr><tr><td>referee</td><td></td><td>integer</td></tr><tr><td>register_time</td><td></td><td>bigint</td></tr><tr><td>status</td><td></td><td>integer</td></tr></tbody></table><h1 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h1><p>Note that the <code>UserLevel level</code> field is annotated as <code>@Transient</code>, since server will calculate the score of user when requested, hence user level is dynamic.  Thisconsistantified database representation and relation.<br>Class below is just a simplified version of this class, for details, please refer to <a href="https://github.com/Rugal/JavaPT/blob/master/src/main/java/ga/rugal/jpt/core/entity/User.java">github</a>.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span><br>&#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Basic(optional = false)</span><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-keyword">private</span> Integer uid;<br>    <span class="hljs-comment">//user Id, primary key</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(length = 100)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(length = 100)</span><br>    <span class="hljs-keyword">private</span> String username;<br>    <span class="hljs-comment">//user name, unique</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(length = 100)</span><br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-comment">//unique, useful when forget password</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(name = &quot;upload_byte&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Long</span> <span class="hljs-variable">uploadByte</span> <span class="hljs-operator">=</span> <span class="hljs-number">0l</span>;<br>    <span class="hljs-comment">//field indicate the number of byte uploaded</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(name = &quot;download_byte&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Long</span> <span class="hljs-variable">downloadByte</span> <span class="hljs-operator">=</span> <span class="hljs-number">0l</span>;<br>    <span class="hljs-comment">//field indicate the number of byte downloaded</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">credit</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//some extra credit awarded by administrator or other mechanism</span><br>    <span class="hljs-comment">//could be used to do a lot of gameing thing</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column(name = &quot;register_time&quot;)</span><br>    <span class="hljs-keyword">private</span> Long registerTime;<br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Transient</span><br>    <span class="hljs-keyword">private</span> UserLevel level;<br>    <span class="hljs-comment">//user level corresponding to related download and upload</span><br><br>    <span class="hljs-meta">@Expose</span><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> Status status;<br>    <span class="hljs-comment">//User status, like banned from login or something else</span><br><br>    <span class="hljs-meta">@JoinColumn(name = &quot;referee&quot;, referencedColumnName = &quot;uid&quot;)</span><br>    <span class="hljs-meta">@ManyToOne</span><br>    <span class="hljs-keyword">private</span> User referee;<br>    <span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>Because <code>password</code> is a sensitive field, currently this field could be serialized by GSON when creating response. But it is really easy to stop from doing that by removing <code>@Expose</code> annotation from this field.  </p><h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1349</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1442471051470</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>As you can see, JSON that serialized by GSON will have content like above.<br>Sometimes there is no <code>level</code> field as it is not mandetory. But from my design, torrent poster could specify the minimum required level of a torrent, which could narrowing the target user to serve.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm complexity representation</title>
    <link href="/2015/2015-09-17-algorithm-complexity-representation/"/>
    <url>/2015/2015-09-17-algorithm-complexity-representation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><table><thead><tr><th>Notation</th><th>bound</th><th>notes</th></tr></thead><tbody><tr><td>$O(n)$</td><td>upper bound tight</td><td>most common</td></tr><tr><td>$\Theta (n)$</td><td>upper and lower tight</td><td>most accurate</td></tr><tr><td>$\Omega(n)$</td><td>lower bound tight</td><td></td></tr><tr><td>$o(n)$</td><td>upper bound loose</td><td></td></tr><tr><td>$\omega(n)$</td><td>lower bound loose</td><td></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Introduction to JavaPT</title>
    <link href="/2015/2015-09-14-introduction-to-javapt/"/>
    <url>/2015/2015-09-14-introduction-to-javapt/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Nice to see you in this page. I assume you are either a developer or a PT site master who want to find a Java based PT(private tracker).  After several days of development, this project is almost good here.  </p><p>I write this post just to clarify all the protocols and interfaces that I used in this project, in case some people need to develop a better frontier or do second development.  </p><p>For the part of <code>interfaces</code>, I would like to introduce the format of returned data from server. How to process them and how to link them together.<br>For <code>JSON</code> part, I will list all entities that are involved in the data transmission.  Frontier developers need to know the format and their corresponding meaning.<br>For the part of <code>protocols</code>, I actually just used and enhanced the  <a href="https://github.com/mpetazzoni/ttorrent">ttorrent</a> tracker server. I will introduce the <a href="https://wiki.theory.org/BitTorrentSpecification">BitTorrent</a> implemented in this project, answer some confusing questions about Bit Torrent.  </p><h2 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h2><p>One important thing is the <code>Authentication fields</code> in request header.<br><code>Authentication fields</code> are <code>id</code> and <code>credential</code> fields in header. Corresponding to the information of user who currently log in client.<br>A sample request is shown as below:  </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">PUT</span> <span class="hljs-string">/user/&#123;uid&#125;</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Accept</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">id</span><span class="hljs-punctuation">: </span>&#123;uid&#125;<br><span class="hljs-attribute">credential</span><span class="hljs-punctuation">: </span>&#123;credential&#125;<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;unencrypted-password&quot;</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure><p>Almost every <code>POST</code> <code>PUT</code> and <code>DELETE</code> request are required to include authentication fields for user identity verification. Some <code>GET</code> are also require to do so. This is actually a good way to simplify <code>Restful</code>.<br>Some special requests are not authetication required. Please strictly follow the sample HTTP request in each specific API.<br>Request that should have authetication fields but does not will get:  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;FAIL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Unmatched combination of username and credential&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ol><li><a href="!--swig%EF%BF%BC2--">User</a></li><li><a href="!--swig%EF%BF%BC3--">Post</a></li><li>Thread</li><li>Signin</li></ol><h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON data format are generally used througout this application.<br>Listed classes are for demonstration usage.<br>If developers want to set up client or front-end, please also follow the same rule of class structure.  </p><ol><li><a href="!--swig%EF%BF%BC4--">Message</a></li><li><a href="!--swig%EF%BF%BC5--">Pagination</a></li><li><a href="!--swig%EF%BF%BC6--">User</a></li><li><a href="!--swig%EF%BF%BC7--">Post</a></li><li><a href="!--swig%EF%BF%BC8--">Thread</a></li><li><a href="!--swig%EF%BF%BC9--">UserLevel</a></li><li>Tag</li><li>SigninLog</li><li>PostTags</li><li>Client</li><li>Admin</li></ol><h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><ol><li>BitTorrent</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JPT Message object</title>
    <link href="/2015/2015-09-14-jpt-message-object/"/>
    <url>/2015/2015-09-14-jpt-message-object/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p><code>Message</code> class is widely used in jpt.<br><code>Message</code> object is being used in <code>all</code> brower based communication, that means all communications except <code>tracker annoucement</code> will all use this class to transmit information between server and client.<br>For any client that want to communicate with server, please read this document carefully before implementing your own data receiver.  </p><h1 id="Format"><a href="#Format" class="headerlink" title="Format"></a>Format</h1><p>There are only two kinds of messages, either <code>SUCCESS</code> or <code>FAIL</code>, no more.<br>The Java class is like </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Message</span><br>&#123;<br>    String status;<br>    String message;<br>    Object data;<br>&#125;<br></code></pre></td></tr></table></figure><p>I use <code>GSON</code> to serialize the object, so the corresponding JSON will be:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;STATUS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Message Content&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>...real data content as JSON...<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="On-Succeed"><a href="#On-Succeed" class="headerlink" title="On Succeed"></a>On Succeed</h3><p>For any requests that not only go through the whole procedure without any error, but also achieved what it requested, server will return a message with <code>status=SUCCESS</code>.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SUCCESS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Message Content&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span>...real data content as JSON...<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>In some cases, a SUCCESS message will not contain data field. But most of the cases will contain data field with specific data object.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SUCCESS&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Tracker started&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>For instance, a SUCCESSed request for adding a thread will return the persisted target thread content, in which its related beans like user and parent post will also be embeded.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;SUCCESS&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Get post&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;data&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;pid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">778</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test title&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;content&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;TEST&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;rate&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0.0</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;infoHash&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;7036CA4C717C0D9FEABB26F9A60C63DD887F8FCC&quot;</span><span class="hljs-punctuation">,</span> <br>        <span class="hljs-attr">&quot;postTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1442471051490</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">100</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;enabled&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;minLevel&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;lid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1313</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;minimum&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">2147483647</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;uid&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1349</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;test123&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;tenjin&quot;</span><span class="hljs-punctuation">,</span><br>               <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;testhappy@128.com&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;uploadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;downloadByte&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span> <br>               <span class="hljs-attr">&quot;credit&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;registerTime&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">1442471051470</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;VALID&quot;</span><span class="hljs-punctuation">&#125;</span><br>       <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="On-Failed"><a href="#On-Failed" class="headerlink" title="On Failed"></a>On Failed</h3><p>For all other cases, server will return a message with <code>status=FAIL</code>.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;FAIL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Error message content&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>In most of the situation, message with <code>FAIL</code> will not contain <code>data</code> field.<br>For instance a FAILed request for adding a thread will return the reason of failing the request.  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;status&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;FAIL&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;message&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;Tracker not running&quot;</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Caveat"><a href="#Caveat" class="headerlink" title="Caveat"></a>Caveat</h1><ol><li>If contain data field, there might have nested information embeded in the out-most bean. This is for accelerate the request in case of doing redundant request for directly related bean.  For detailed bean structure, please refer to <a href="placeholder">entity</a>.</li><li>All request except <code>Announcement</code> will get <code>Message</code> object. If you get something else, there must be cracker in between client and server.</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jpt</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat hang at start</title>
    <link href="/2015/2015-09-09-tomcat-hang-at-start/"/>
    <url>/2015/2015-09-09-tomcat-hang-at-start/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I have spent about 2 days on this issue.<br>That is, when I trying to start up tomcat instance in Ubuntu, log tells me start up <code>done</code>, and I can see the tomcat process is running, I could also see the port <code>8080</code> is announced, but I am unable to connect to the host.  </p><p>I find the tomcat log ends at  </p><pre><code class="hljs">Deploying web application [...]</code></pre><p>Seems like it is busy deploying the web application, but turned out it has done nothing.<br>After search for a while, I find an answer on <a href="http://serverfault.com/a/655638/240955">SOF</a>.  </p><p>Actually, it is the random number generating thread that blocking the deployment.<br>The solution is to add or append an <code>JAVA_OPT=-Djava.security.egd=file:/dev/./urandom</code> in <code>/etc/default/tomcat7</code>.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS position</title>
    <link href="/2015/2015-09-05-css-position/"/>
    <url>/2015/2015-09-05-css-position/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>HTML elements are positioned static by default.<br>Static positioned elements are not affected by the top, bottom, left, and right properties.<br>An element with <code>position: static;</code> is not positioned in any special way; it is always positioned according to the normal flow of the page.  </p><h2 id="relative"><a href="#relative" class="headerlink" title="relative"></a>relative</h2><p>An element with <code>position: relative;</code> is positioned relative to its normal position.<br>Setting the top, right, bottom, and left properties of a relatively-positioned element will cause it to be adjusted away from its normal position. Other content will not be adjusted to fit into any gap left by the element.  </p><h2 id="fixed"><a href="#fixed" class="headerlink" title="fixed"></a>fixed</h2><p>An element with <code>position: fixed;</code> is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled. The top, right, bottom, and left properties are used to position the element.<br>A fixed element does not leave a gap in the page where it would normally have been located.<br>Notice the fixed element in the lower-right corner of the page.  </p><h2 id="absolute"><a href="#absolute" class="headerlink" title="absolute"></a>absolute</h2><p>An element with <code>position: absolute;</code> is positioned relative to the nearest positioned ancestor (instead of positioned relative to the viewport, like fixed).<br>However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.<br>Note: A “positioned” element is one whose position is anything except static.  </p><h2 id="Overlapping"><a href="#Overlapping" class="headerlink" title="Overlapping"></a>Overlapping</h2><p>When elements are positioned, they can overlap other elements.<br>The z-index property specifies the stack order of an element (which element should be placed in front of, or behind, the others).<br>An element can have a positive or negative stack order.  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">img</span> <br>&#123;<br>    <span class="hljs-attribute">position</span>: absolute;<br>    <span class="hljs-attribute">left</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">top</span>: <span class="hljs-number">0px</span>;<br>    <span class="hljs-attribute">z-index</span>: -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>@Transient and transient in java</title>
    <link href="/2015/2015-08-17-transient-and-@transient-in-java/"/>
    <url>/2015/2015-08-17-transient-and-@transient-in-java/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>When I was doing some coding with GSon, I found there are you kinds of <code>transient</code>. One is from Java key words, another is JPA annotation as explained in <a href="http://stackoverflow.com/questions/2154622/why-does-jpa-have-a-transient-annotation">SF</a>.  </p><h2 id="Java-key-word"><a href="#Java-key-word" class="headerlink" title="Java key word"></a>Java key word</h2><p><code>transient </code>is to prevent member field from being serialized, so that those fields will not appear in JSON format if you use <code>Gson</code> to serialize them.<br>This feature is very important if you have nested class member or collection field members.  </p><h2 id="JPA-Annotation"><a href="#JPA-Annotation" class="headerlink" title="JPA Annotation"></a>JPA Annotation</h2><p>This annotation is in JPA specification to indicate that there is no need to persist this field to database.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu restart network interfaces</title>
    <link href="/2015/2015-08-17-ubuntu-restart-network-interfaces/"/>
    <url>/2015/2015-08-17-ubuntu-restart-network-interfaces/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>You need to restart network service if you update your network configuration.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifdown [interface]<br>ifup   [interface]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql High Availability solutions summary</title>
    <link href="/2015/2015-08-02-postgresql-high-availability-solutions-summary/"/>
    <url>/2015/2015-08-02-postgresql-high-availability-solutions-summary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Shared-Disk-Failover"><a href="#Shared-Disk-Failover" class="headerlink" title="Shared Disk Failover"></a>Shared Disk Failover</h2><p>Only one copy of the database on shared file system.</p><ol><li>No data loss if failover happens.</li><li>If the shared disk array fails or becomes corrupt, all database servers are nonfunctional. </li><li>Another issue is that the standby server should never access the shared storage while the primary server is running.</li><li><code>NAS</code> could be the solution.</li></ol><h2 id="File-System-Replication"><a href="#File-System-Replication" class="headerlink" title="File System Replication"></a>File System Replication</h2><p>Upgraded version of <code>Shared Disk Failover</code> solution. File system are mirrored to a file system residing on another computer.</p><ol><li>Writes to the standby must be done in the same order as those on the master.</li><li><code>DRBD</code> is a popular file system replication solution for Linux</li></ol><h2 id="Transaction-Log-Shipping"><a href="#Transaction-Log-Shipping" class="headerlink" title="Transaction Log Shipping"></a>Transaction Log Shipping</h2><p>Keep current by reading a stream of WAL records. </p><ol><li>If the main server fails, the standby contains <code>almost</code> all of the data of the main server, and can be quickly made the new master database server.</li><li>This can be synchronous or asynchronous and can only be done for the entire database server.</li><li>A standby server can also be used for read-only queries, in which case it is called a Hot Standby server</li></ol><h3 id="File-based-log-shipping"><a href="#File-based-log-shipping" class="headerlink" title="File-based log shipping"></a>File-based log shipping</h3><ol><li>Transferring WAL records one file (WAL segment) at a time. </li><li>The bandwidth required for this technique varies according to the transaction rate of the primary server. </li><li>Log shipping is <code>asynchronous</code>, i.e., the WAL records are shipped after transaction commit. As a result, there is a window for data loss should the primary server suffer a catastrophic failure; transactions not yet shipped will be lost. The size of the data loss window in file-based log shipping can be limited by use of the <code>archive_timeout</code> parameter, which can be set as low as a few seconds. </li><li>However such a low setting will substantially increase the bandwidth required for file shipping.</li></ol><h3 id="Streaming-replication"><a href="#Streaming-replication" class="headerlink" title="Streaming replication"></a>Streaming replication</h3><ol><li>Streaming replication allows a standby server to stay more up-to-date than is possible with file-based log shipping. </li><li>The standby connects to the primary, which streams WAL records to the standby as they are generated, without waiting for the WAL file to be filled.</li><li>Streams WAL changes incrementally over a network connection.</li><li>Record-based log shipping is more granular.</li><li>Streaming replication is <code>asynchronous</code> by <code>default</code>, in which case there is a small delay between committing a transaction in the primary and the changes becoming visible in the standby.</li><li>This delay is however much smaller than with file-based log shipping, typically under one second.</li><li>With streaming replication, <code>archive_timeout</code> is not required to reduce the data loss window</li></ol><h2 id="Trigger-Based-Master-Standby-Replication"><a href="#Trigger-Based-Master-Standby-Replication" class="headerlink" title="Trigger-Based Master-Standby Replication"></a>Trigger-Based Master-Standby Replication</h2><p>Master-standby replication setup sends all data modification queries to the master server.</p><ol><li>The master server <code>asynchronously</code> sends data changes to the standby server.</li><li>The standby can answer read-only queries while the master server is running. </li><li>The standby server is ideal for data warehouse queries.</li><li><code>Slony-I</code> is an example of this type of replication.</li><li>Because it updates the standby server asynchronously (in batches), there is possible data loss during failover.</li></ol><h2 id="Statement-Based-Replication-Middleware"><a href="#Statement-Based-Replication-Middleware" class="headerlink" title="Statement-Based Replication Middleware"></a>Statement-Based Replication Middleware</h2><p>With statement-based replication middleware, a program intercepts every SQL query and sends it to one or all servers.</p><ol><li>Each server operates independently. </li><li>Read-write queries must be sent to all servers, so that every server receives any changes. </li><li>But read-only queries can be sent to just one server, allowing the read workload to be distributed among them.</li><li>If query encounter situation such as <code>RANDOM()</code> which each server will generate different results, this might cause problem. Either the <code>middleware</code> or the application must query such values from a single server and then use those values in write queries. Another option is to use this replication option with a traditional master-standby setup.</li><li>Care must also be taken that all transactions either commit or abort on all servers, perhaps using two-phase commit.</li><li><code>Pgpool-II</code> and Continuent Tungsten are examples of this type of replication.</li></ol><h2 id="Asynchronous-Multimaster-Replication"><a href="#Asynchronous-Multimaster-Replication" class="headerlink" title="Asynchronous Multimaster Replication"></a>Asynchronous Multimaster Replication</h2><ol><li>Each server works independently, and periodically communicates with the other servers to identify conflicting transactions. </li><li>The conflicts can be resolved by users or conflict resolution rules. </li><li><code>Bucardo</code> is an example of this type of replication.</li></ol><h2 id="Synchronous-Multimaster-Replication"><a href="#Synchronous-Multimaster-Replication" class="headerlink" title="Synchronous Multimaster Replication"></a>Synchronous Multimaster Replication</h2><ol><li>Each server can accept write requests, and modified data is transmitted from the original server to every other server before each transaction commits. </li><li>Heavy write activity can cause excessive locking, leading to poor performance, often worse than that of a single server.</li><li>Read requests can be sent to any server.</li><li>Synchronous multimaster replication is best for mostly read workloads.</li><li>though its big advantage is that any server can accept write requests — there is no need to partition workloads between master and standby servers.</li><li>Because the data changes are sent from one server to another, there is no problem with non-deterministic functions like random().</li><li>PostgreSQL does not offer this type of replication, though PostgreSQL two-phase commit (PREPARE TRANSACTION and COMMIT PREPARED) can be used to implement this in application code or middleware.</li></ol><h2 id="Data-Partitioning"><a href="#Data-Partitioning" class="headerlink" title="Data Partitioning"></a>Data Partitioning</h2><ol><li>Data partitioning splits tables into data sets. </li><li>Each set can be modified by only one server.</li><li>If queries combining data from different servers are necessary, an application can query both servers, or master&#x2F;standby replication can be used to keep a read-only copy of the other data of server on each server.</li></ol><h2 id="Multiple-Server-Parallel-Query-Execution"><a href="#Multiple-Server-Parallel-Query-Execution" class="headerlink" title="Multiple-Server Parallel Query Execution"></a>Multiple-Server Parallel Query Execution</h2><p>This solution allows multiple servers to work concurrently on a single query.</p><ol><li>It is usually accomplished by splitting the data among servers and having each server execute its part of the query and return results to a central server where they are combined and returned to the user. </li><li><code>Pgpool-II</code> has this capability. </li><li>Also, this can be implemented using the <code>PL/Proxy</code> tool set.</li></ol>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Recovery procedure of Postgresql</title>
    <link href="/2015/2015-08-02-recovery-procedure-of-postgresql/"/>
    <url>/2015/2015-08-02-recovery-procedure-of-postgresql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Any operation is from the view of <code>standby</code> server.    </p><h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><p>Execute <code>restore_command</code> to restore xlog to <code>pg_xlog</code> folder from archive folder.<br>If either streaming replication disabled, disconnected or recovery failed, go to <code>4</code>.     </p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><p>If <code>xlog</code> found,try to restore any available WAL in <code>pg_xlog</code> folder since current last valid record until last available data consistent point int WAL.<br>Otherwise go to <code>3</code>.    </p><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><p>If streaming enabled, Standby will try to connect to primary and start streaming WAL and recovery since last valid record found in  <code>pg_xlog</code> folder.<br>Otherwise go to <code>1</code>  </p><h2 id="4"><a href="#4" class="headerlink" title="4"></a>4</h2><p>If the above procedure repeated for several times or <code>trigger</code> file is created, recovery cancelled.    </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Setup static IP in ubuntu</title>
    <link href="/2015/2015-08-17-Setup-static-IP-in-ubuntu/"/>
    <url>/2015/2015-08-17-Setup-static-IP-in-ubuntu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Under certain circumstance you need to specify a static IP address.  There are 2 different ways you can achieve this.  </p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ifconfig eth0 [the.ip.you.want]<br></code></pre></td></tr></table></figure><p>This command effect is temporary so the change will be swiped after ubuntu reboot or restart of network.</p><h2 id="Interface-file"><a href="#Interface-file" class="headerlink" title="Interface file"></a>Interface file</h2><p>In Ubuntu OS, what you need to do is to modify <code>/etc/network/interfaces</code>:  </p><pre><code class="hljs">auto loiface lo inet loopbackauto eth0iface eth0 inet staticaddress [the ip you want]netmask [real net mask]network [network]gateway [gateway]</code></pre><p>Change the interface name <code>eth0</code> if you wish to modify other interfaces.<br>After edition, you need to restart your network.<br>You can simply reboot ubuntu or use <a href="!--swig%EF%BF%BC1--">network restart</a>.<br>Notice by editing interface file, the change are permanent and will also be effective after reboot.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker unable to access website</title>
    <link href="/2015/2015-07-28-docker-unable-to-access-website/"/>
    <url>/2015/2015-07-28-docker-unable-to-access-website/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>After came to my girlfriend’s home, I find my docker unable to access website.<br>I could not ping by domain name, I thought it is the problem of my gf’s router.<br>Any ping could only return <code>unknown host XXXXXX</code>, this seems not the problem of network connection but something else.  </p><p>Today I find the problem is in domain name resolution.  A similar <a href="https://github.com/docker/docker/issues/541">issue</a> on github.<br>Accroding to this page, I modified <code>/etc/resolv.conf</code> as my host machine’s, then DNS problem solved.  </p><p>The reason of this problem is that, I created this docker container in my home, which has different DNS from my gf home’s.  But docker container unable to detect the change after I came here.  </p><p>Thanks to <a href="http://ilz.me/">lz</a>, his idea of examing DNS reminds me.  </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>network</tag>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql streaming replication</title>
    <link href="/2015/2015-07-20-postgresql-streaming-replication/"/>
    <url>/2015/2015-07-20-postgresql-streaming-replication/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Base-information-for-both-primary-and-standby"><a href="#Base-information-for-both-primary-and-standby" class="headerlink" title="Base information for both primary and standby"></a>Base information for both primary and standby</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">PGDATA=/var/lib/postgresql/9.3/main<br>PGCONF=/etc/postgresql/9.3/main    <br>master=192.168.1.100:5432<br>standby=192.168.1.101:5432<br></code></pre></td></tr></table></figure><h2 id="Primary-Server"><a href="#Primary-Server" class="headerlink" title="Primary Server"></a>Primary Server</h2><h3 id="Create-user-dedicate-for-replication"><a href="#Create-user-dedicate-for-replication" class="headerlink" title="Create user dedicate for replication"></a>Create user dedicate for replication</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">--you can specify any user name and password<br>--the &#x27;replication&#x27; privilege is important<br>create user r replication password &#x27;1&#x27;;<br></code></pre></td></tr></table></figure><h3 id="Grant-connection-accessibility"><a href="#Grant-connection-accessibility" class="headerlink" title="Grant connection accessibility"></a>Grant connection accessibility</h3><p>After creation of user, you need to modify the <code>$PGCONF/pg_hba.conf</code> file to explicitly grant connection accessibility for the user <code>r</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">You can choose any of the authentication method you like</span><br>echo &quot;host    replication    r    $standby_ip/32    md5&quot; &gt;&gt; $PGCONF/pg_hba.conf<br></code></pre></td></tr></table></figure><h3 id="WAL-setting"><a href="#WAL-setting" class="headerlink" title="WAL setting"></a>WAL setting</h3><p>According to <a href="http://www.postgresql.org/docs/current/static/runtime-config-wal.html">Official Document</a>, we need to set <code>wal_level</code> to <code>hot_standby</code> so that PostgreSQL will generate WAL that contains enough information for standby to reconstruct the status of running transactions from the WAL.<br>We also need to set <code>max_wal_senders</code> to a positive number to accept connection from replicators. This is the number of sender process to send streaming data, so it is better to put a bigger number like 5 or 10.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;wal_level = hot_standby&quot; &gt;&gt; $PGCONF/postgresql.conf  <br>echo &quot;max_wal_senders = 3&quot; &gt;&gt; $PGCONF/postgresql.conf  <br></code></pre></td></tr></table></figure><h3 id="Restart-primary-server"><a href="#Restart-primary-server" class="headerlink" title="Restart primary server"></a>Restart primary server</h3><p>To enable streaming function, we need to restart Postgresql server, this will also reload the <code>pg_hba.conf</code> so that remote replicator could connect to this server.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service postgresql restart<br></code></pre></td></tr></table></figure><p>Now your primary server is ready to accept streaming replication connection.</p><h3 id="Extra-notice"><a href="#Extra-notice" class="headerlink" title="Extra notice"></a>Extra notice</h3><p>For beginner who does not know about connecting to remote server, please refer to this <a href="!--swig%EF%BF%BC8--">article</a>.</p><hr><h2 id="Standby-Server"><a href="#Standby-Server" class="headerlink" title="Standby Server"></a>Standby Server</h2><h3 id="Restore-base-data-files"><a href="#Restore-base-data-files" class="headerlink" title="Restore base data files"></a>Restore base data files</h3><p>To achieve this, it is better to use <code>pg_basebackup</code> as it is more convenient than scp them manually.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_basebackup -U r -h $master_ip --format=plain -vxP  -D  $PGDATA<br></code></pre></td></tr></table></figure><p>After a while, you will find the primary server data folder is replicated to standby server.</p><h3 id="Recovery-configuration"><a href="#Recovery-configuration" class="headerlink" title="Recovery configuration"></a>Recovery configuration</h3><p>The most important configuration comes, you need to create a <code>recovery.conf</code> file in you <code>$PGDATA</code> folder.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Notice the single quote around (on)</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">This will instruct this server to <span class="hljs-keyword">do</span> standby work</span><br>echo &quot;standby_mode = &#x27;on&#x27;&quot;&gt;&gt;$PGDATA/recovery.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">The libpg connection string specified here allows standby connecting to primary</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Hence those information should be consistent with primary</span><br>echo &quot;primary_conninfo = &#x27;host=$master_ip port=5432 user=r password=1&#x27;&quot;&gt;&gt;$PGDATA/recovery.conf<br></code></pre></td></tr></table></figure><p>Up to now, the standby server could start replication if you restart it. But this standby server is not connectable, which means no connection allowed to this standby server, thus if you try to connect to it, you will get:  </p><pre><code class="hljs">psql: FATAL:  the database system is starting upFATAL:  the database system is starting up</code></pre><p>But be easy, even it is not connectable from you, it could replicate content from primary and also dispatch them to slavers depending on your configuration.  </p><h3 id="Hot-standby-server"><a href="#Hot-standby-server" class="headerlink" title="Hot standby server"></a>Hot standby server</h3><p>So to allow connections to standby server rather than leave it unconnectable, you need to modify or add one configuration in standby server, refer to <a href="http://www.postgresql.org/docs/current/static/hot-standby.html">Official Document</a>: </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;hot_standby = on&quot; &gt;&gt; $PGCONF/postgresql.conf<br></code></pre></td></tr></table></figure><p>You can find this entry under <code>standby</code> section. This attribute means to allow connection and run read-only queries while the server is in archive recovery or standby mode. In our case, in standby mode but accepts read only connection.<br>Such configuration could also be used as failover setting, which I will introduce later on.  </p><hr><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Now try to create some tables or do some DML on Primary server and see if they will be synchronized to Standby server.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Those configuration above are the minimum for launch a streaming replication between primary and standby.<br>For more high availability information, please refer to <a href="http://www.postgresql.org/docs/current/static/warm-standby-failover.html">failover</a>, <a href="http://www.postgresql.org/docs/current/static/continuous-archiving.html">WAL archive</a>, <a href="!--swig%EF%BF%BC9--">HA</a>.<br>I will keep posting tutorial. </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql Point In Time Recovery</title>
    <link href="/2015/2015-07-18-postgresql-recovery/"/>
    <url>/2015/2015-07-18-postgresql-recovery/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Enable-archive-setting"><a href="#Enable-archive-setting" class="headerlink" title="Enable archive setting"></a>Enable archive setting</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Set WAL to either hot_standby or archive</span><br>echo &quot;wal_level= hot_standby&quot; &gt; postgresql.conf <br><span class="hljs-meta prompt_">#</span><span class="language-bash">keep archiving old WAL</span><br>echo &quot;archive_mode=on&quot; &gt; postgresql.conf  <br><span class="hljs-meta prompt_">#</span><span class="language-bash">specify archive <span class="hljs-built_in">command</span> to backup old WAL</span><br>echo &quot;archive_command=&#x27;test ! -f /opt/archive/%f  &amp;&amp; cp %p /opt/archive/%f&#x27; &quot; &gt; postgresql.conf<br></code></pre></td></tr></table></figure><h2 id="Origin-data"><a href="#Origin-data" class="headerlink" title="Origin data"></a>Origin data</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">--This table will be included in base backup.<br>create table test1(id int4 primary key, name varchar(20));<br>--CREATE TABLE<br></code></pre></td></tr></table></figure><h2 id="Base-backup"><a href="#Base-backup" class="headerlink" title="Base backup"></a>Base backup</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pg_basebackup -U postgres -h 127.0.0.1 --format=tar -xzP  -D backup<br></code></pre></td></tr></table></figure><p>Use this command to create a base backup tar file.<br>Recovery work will start from the last check point of this base backup file.<br>For more backup methods, please refer to my <a href="!--swig%EF%BF%BC9--">post</a>.  </p><h2 id="More-data-after-backup"><a href="#More-data-after-backup" class="headerlink" title="More data after backup"></a>More data after backup</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">create table test2(id int4 primary key, name varchar(20));<br>--CREATE TABLE<br>insert into test2 values (1, &#x27;Rugal&#x27;), (2, &#x27;Bernstein&#x27;), (3, &#x27;Tenjin&#x27;), (4, &#x27;Descend&#x27;);<br>--INSERT 0 4<br>select pg_switch_xlog(); -- force xlog switch to simulate normal log shift<br>--test2 table will be included in archived xlog<br>create table test3(id int4 primary key, name varchar(20));<br>--CREATE TABLE<br>--test3 table is in current xlog, so this table will not be recovered if current xlog is not backuped<br></code></pre></td></tr></table></figure><h2 id="Emulate-server-crash"><a href="#Emulate-server-crash" class="headerlink" title="Emulate server crash"></a>Emulate server crash</h2><p>You can use any method to make this happens. Like shutdown your server by power off or <code>kill</code>.  </p><blockquote><p>kill postgresql</p></blockquote><p>Backup latest unarchived <code>xlog</code>, if you could.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp -r $PGDATA/pg_xlog $HOME<br></code></pre></td></tr></table></figure><h2 id="Emulate-data-files-loss"><a href="#Emulate-data-files-loss" class="headerlink" title="Emulate data files loss."></a>Emulate data files loss.</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">Delete all data file</span> <br>rm -r $PGDATA  <br></code></pre></td></tr></table></figure><hr><p>Now it is time to restore database.  </p><h2 id="restore-base-file"><a href="#restore-base-file" class="headerlink" title="restore base file"></a>restore base file</h2><p>What we need to do is just unzip and move all files into <code>$PGDATA</code> folder.   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxf base.tar.gz<br>mv * $PGDATA<br></code></pre></td></tr></table></figure><p>Now if you start postgresql, you will find data restore to the point of base backup.<br>But now we need to recover till to most recent valid archieve state.   </p><h2 id="Setup-recovery-file"><a href="#Setup-recovery-file" class="headerlink" title="Setup recovery file"></a>Setup recovery file</h2><p>Create a file <code>recovery.conf</code> under you <code>$PGDATA</code>.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;restore_command = &#x27;cp /opt/archive/%f %p&#x27;&quot; &gt; $PGDATA/recovery.conf<br></code></pre></td></tr></table></figure><p>Since you have your archived WAL, if you start postgresql, database will recovering process till the <code>last</code> valid segment that was <code>archived</code>.<br>But if you want to recover to the last valid moment right before crash, maybe that latest segment has not yet been archived, so you need to copy all <code>pg_xlog</code> files in original <code>$PGDATA</code> folder, that is why I said it is better to backup <code>$PGDATA/pg_xlog</code> even with you enabled <code>archive_mode</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp  -r $HOME/pg_xlog $PGDATA<br></code></pre></td></tr></table></figure><p>If recovery is finished, the <code>recovery.conf</code> file will be renamed to <code>recovery.done</code> to avoid further recovery.   </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>complexity level problem</title>
    <link href="/2015/2015-07-17-complexity-level-problem/"/>
    <url>/2015/2015-07-17-complexity-level-problem/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="http://www.geeksforgeeks.org/np-completeness-set-1/">Geeks for Geeks</a>  </p><h1 id="P"><a href="#P" class="headerlink" title="P"></a>P</h1><p>Such like <code>Negtive weight cycle detection</code> problem.<br>Exists a polynomial algorithm to solve this problem.<br>is set of problems that can be solved by a <a href="!--swig%EF%BF%BC0--">deterministic Turing machine</a> in Polynomial time.  </p><h1 id="NP"><a href="#NP" class="headerlink" title="NP"></a>NP</h1><p>Such as <code>Tetrics</code> problem.<br>Exists a polynomial algorithm to verify this problem.<br>is set of decision problems that can be solved by a <a href="!--swig%EF%BF%BC1--">Non-deterministic Turing Machine</a> in Polynomial time.<br>Informally, NP is set of decision problems which can be solved by a polynomial time via a “Lucky Algorithm”, a magical algorithm that always makes a right guess among the given set of choices.<br>Hence NP is the super set of P.  </p><h1 id="NP-Complete"><a href="#NP-Complete" class="headerlink" title="NP-Complete"></a>NP-Complete</h1><p>Such like <code>SAT</code>, <code>Mine sweep</code>, <code>Sudoku</code>, <code>Travel sales path</code> problem.  </p><ol><li>Is an NP problem.</li><li>any NP problem could be reduced to this problem.</li></ol><h1 id="NP-hard"><a href="#NP-hard" class="headerlink" title="NP-hard"></a>NP-hard</h1><p>Such as <code>Tetrics</code> problem.  </p><ol><li>any NP problem could be reduced to this problem.</li></ol><p>Hence NP-Hard is the super set of NP-Complete.  </p><h1 id="EXP"><a href="#EXP" class="headerlink" title="EXP"></a>EXP</h1><p>Such as <code>Chess</code> problem.<br>Means could solve a problem in exponetial time.<br>Apparantly EXP is the super set of NP.  </p><h1 id="R"><a href="#R" class="headerlink" title="R"></a>R</h1><p>The problem is recursive problem, which means it could be solved in finite time.<br>But unfortunately most of problems are not in R, for example <code>halting</code> problem is not in R.<br>Apparantly R is the super set of EXP.  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>concurrent read level</title>
    <link href="/2015/2015-07-17-concurrent-read-level/"/>
    <url>/2015/2015-07-17-concurrent-read-level/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Assume we have 2 transactions execute concurrently.  </p><h1 id="possible-problem"><a href="#possible-problem" class="headerlink" title="possible problem"></a>possible problem</h1><h2 id="dirty-read"><a href="#dirty-read" class="headerlink" title="dirty read"></a>dirty read</h2><p>Transaction 1 reads uncommitted data from transaction 2. Uncommitted means these data could be removed or changed somehow, that results into read inconsistency.  </p><table><thead><tr><th>-</th><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>begin</td><td>begin</td></tr><tr><td>2</td><td>read</td><td></td></tr><tr><td>3</td><td></td><td>update</td></tr><tr><td>4</td><td>commit</td><td></td></tr><tr><td>5</td><td></td><td>rollback</td></tr></tbody></table><p>Session A unnecessarily read data from B.  </p><h2 id="Non-repeatable-reads"><a href="#Non-repeatable-reads" class="headerlink" title="Non-repeatable reads"></a>Non-repeatable reads</h2><p>Read operation within one single transaction must stay same even if another transaction is updating data.<br>Transaction 1 reads different data from rows as transaction 2 updates and commits those rows before.  </p><table><thead><tr><th>-</th><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>begin</td><td></td></tr><tr><td>2</td><td>read</td><td></td></tr><tr><td>3</td><td></td><td>update</td></tr><tr><td>4</td><td>read</td><td></td></tr><tr><td>5</td><td>commit</td><td></td></tr></tbody></table><p>Session A read 2 times, each read different data within same transaction.  </p><h2 id="Phantom-reads"><a href="#Phantom-reads" class="headerlink" title="Phantom reads"></a>Phantom reads</h2><p>Transaction 1 reads different number of row because transaction 2 inserts or deletes on this table</p><table><thead><tr><th>-</th><th>A</th><th>B</th></tr></thead><tbody><tr><td>1</td><td>begin</td><td></td></tr><tr><td>2</td><td>read</td><td></td></tr><tr><td>3</td><td></td><td>insert</td></tr><tr><td>4</td><td>read</td><td></td></tr><tr><td>5</td><td>commit</td><td></td></tr></tbody></table><p>Session A read 2 times in a transaction, but get different number of row in result</p><h1 id="method-to-deal"><a href="#method-to-deal" class="headerlink" title="method to deal"></a>method to deal</h1><table><thead><tr><th>Isolation Level</th><th>Dirty Read</th><th>Nonrepeatable Read</th><th>Phantom Read</th><th>Serialization Anomaly</th></tr></thead><tbody><tr><td>Read uncommitted</td><td>Allowed, but not in PG</td><td>Possible</td><td>Possible</td><td>Possible</td></tr><tr><td>Read committed</td><td>Not possible</td><td>Possible</td><td>Possible</td><td>Possible</td></tr><tr><td>Repeatable read</td><td>Not possible</td><td>Not possible</td><td>Allowed, but not in PG</td><td>Possible</td></tr><tr><td>Serializable</td><td>Not possible</td><td>Not possible</td><td>Not possible</td><td>Not possible</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
      <tag>database</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>email agent protocals</title>
    <link href="/2015/2015-07-17-email-agent-protocals/"/>
    <url>/2015/2015-07-17-email-agent-protocals/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Mail-user-agent"><a href="#Mail-user-agent" class="headerlink" title="Mail user agent"></a>Mail user agent</h2><p>user program that used for sending and receiving email. Like foxmail… webmail also count on.</p><h2 id="Mail-transfer-agent"><a href="#Mail-transfer-agent" class="headerlink" title="Mail transfer agent"></a>Mail transfer agent</h2><p>transfer email from one server to another</p><h2 id="Mail-delivery-agent"><a href="#Mail-delivery-agent" class="headerlink" title="Mail delivery agent"></a>Mail delivery agent</h2><p>receive mail from server to client program</p><h2 id="Mail-submission-agent"><a href="#Mail-submission-agent" class="headerlink" title="Mail submission agent"></a>Mail submission agent</h2><p>send mail from client program to server, usually combined with MTA.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mail</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql backup</title>
    <link href="/2015/2015-07-15-postgresql-backup/"/>
    <url>/2015/2015-07-15-postgresql-backup/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="logical-backup"><a href="#logical-backup" class="headerlink" title="logical backup"></a>logical backup</h1><p>Logical backup extract metadata(with SQL) from postgresql.<br>Its advantages includes human readable text and better transplantability.  </p><h2 id="pg-dump"><a href="#pg-dump" class="headerlink" title="pg_dump"></a>pg_dump</h2><p>Dump objects or single <code>database</code> into file. </p><blockquote><p>pg_dump [connection-option…] [option…] [dbname]  </p></blockquote><h3 id="plain-format"><a href="#plain-format" class="headerlink" title="plain format"></a>plain format</h3><p>Just in one file, long if database becomes big.  </p><blockquote><p>backup: <code>pg_dump -U postgres -h 127.0.0.1 -t test &gt; test.sql</code><br>restore: <code>psql -U postgres -h 127.0.0.1  -f test.sql</code>  </p></blockquote><h3 id="non-plain-format"><a href="#non-plain-format" class="headerlink" title="non-plain format"></a>non-plain format</h3><p>Directory organized, data and table separated, cleaner and easier to manage.<br>Might use more storage. Transplantability not as good as plain format.  </p><blockquote><p>backup: <code>pg_dump -U postgres -h 127.0.0.1 --format=tar -t test &gt; test.tar</code><br>restore: <code>pg_restore -U postgres -h 127.0.0.1 --dbname=postgres test.tar</code>  </p></blockquote><h2 id="pg-dumpall"><a href="#pg-dumpall" class="headerlink" title="pg_dumpall"></a>pg_dumpall</h2><p>Dump whole postgresql <code>cluster</code> into file.<br>This command actually calling <code>pg_dump</code> and dump each database in this cluster one by one.  </p><blockquote><p>backup: <code>pg_dump -U postgres -h 127.0.0.1&gt; pg.sql</code><br>restore: <code>psql -U postgres -h 127.0.0.1  -f pg.sql</code>  </p></blockquote><h1 id="physical-backup"><a href="#physical-backup" class="headerlink" title="physical backup"></a>physical backup</h1><p>Physical backup somehow copies files that related with database directly.<br>Only physical backup could use <code>PITR</code> technique. If you need to use <code>PITR</code>, please enable <code>WAL</code> and <code>archive log</code>. For this part, please refer to my <a href="!--swig%EF%BF%BC0--">post</a>;  </p><h2 id="pg-basebackup"><a href="#pg-basebackup" class="headerlink" title="pg_basebackup"></a>pg_basebackup</h2><p>This command will copy files under <code>$PGDATA</code> as well as tablespace files that outside this folder.<br>Beware this not includes <code>archived WAL</code> files. You need to backup them up manually.  </p><blockquote><p>backup: <code>pg_basebackup -U postgres -h 127.0.0.1 --format=tar -xz  -P  -D backup</code><br>restore: Just copy and unzip required tar files to specific path.  </p></blockquote><p>You can also use system commands like <code>cp</code> to manually copy and compress files. But if you do so, you need to stop postgresql cluster first to ensure data consistency in database.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>psql session level parameters for logging</title>
    <link href="/2015/2015-07-08-psql-session-level-parameters-for-logging/"/>
    <url>/2015/2015-07-08-psql-session-level-parameters-for-logging/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>When you open <code>psql</code>, the information it provide to you is just for notification of command completion. If you need more idea about how parse tree, execution plan and internal debug log are, you need to turn on those parameters in psql.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs sql">\<span class="hljs-keyword">set</span> VERBOSITY verbose<br><span class="hljs-comment">--psql parameter</span><br><span class="hljs-comment">--show real function location in source file</span><br><br><span class="hljs-keyword">set</span> client_min_messages<span class="hljs-operator">=</span>log;<br><span class="hljs-comment">--feedback information</span><br><span class="hljs-comment">--Available values: debug5, debug4, debug3, debug2, debug1, log, notice, warning, error.</span><br><br><span class="hljs-keyword">set</span> debug_pretty_print <span class="hljs-operator">=</span> <span class="hljs-keyword">on</span>;<br><span class="hljs-comment">--format parse tree information</span><br><br><span class="hljs-keyword">set</span> debug_print_parse<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;<br><span class="hljs-comment">--print parse tree</span><br><br><span class="hljs-keyword">set</span> debug_print_rewritten <span class="hljs-operator">=</span> <span class="hljs-keyword">on</span>; <br><span class="hljs-comment">--print rewritten parse tree</span><br><br><span class="hljs-keyword">set</span> debug_print_plan <span class="hljs-operator">=</span> <span class="hljs-keyword">on</span>;<br><span class="hljs-comment">--print execution plan</span><br><br><span class="hljs-keyword">set</span> trace_locks<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;<br><span class="hljs-comment">--print trace for locks</span><br><br><span class="hljs-keyword">set</span> wal_debug<span class="hljs-operator">=</span><span class="hljs-keyword">on</span>;<br><span class="hljs-comment">--log information for WAL</span><br></code></pre></td></tr></table></figure><p>You can also put <code>.psqlrc</code> file in your home folder to enable user specific psql configuration.<br>You can even put this file in <code>pg_config --sysconfdir</code> to enable system wide psql configuration.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql system columns explain</title>
    <link href="/2015/2015-07-03-postgresql-system-columns-explain/"/>
    <url>/2015/2015-07-03-postgresql-system-columns-explain/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><ol><li><code>xmin</code><br>Transaction ID for insertion. For identifying different transactions.<br>Will changes after new transaction(Whether <code>Insert</code>&#x2F;<code>Update</code>) commits.  </li><li><code>xmax</code><br>Transaction ID for deletion. Not being 0 means this row is not yet committed or rollbacked.  </li><li><code>cmin</code><br>Command ID for one transaction.<br>Identify different commands in one transaction.  Start from 0.  </li><li><code>cmax</code><br>Command identifier for deletion transaction. In source code, it is the same with <code>cmin</code>.</li><li><code>ctid</code><br>Similar to Oracle <code>rowid</code>, but will this ID will change as transactions on current row take effect. So it is better not always use this column to access rows.</li></ol><hr><h2 id="How-PG-MVCC-works"><a href="#How-PG-MVCC-works" class="headerlink" title="How PG MVCC works"></a>How PG MVCC works</h2><p>Suppose we have 2 sessions, accessing the same table <code>test</code> with some rows.   </p><ol><li>Session 1 starts transaction</li><li>Session 1 updates 1 row <ol><li>PG allocates an <code>XID</code> for this new transaction</li><li>PG replicates the original row.<br> Now the origin row named as old version and the new one is called new version</li><li>PG sets <code>xmin</code> of new row version to the fresh allocated <code>XID</code>, say 2 for example</li><li>PG sets the <code>xmax</code> of old version to the <code>XID</code> of new transaction</li><li>PG updates that new row version with new value from session 1.</li></ol></li><li>Session 2 accesses that row<ol><li>PG searches row that has max value in <code>xmax</code>, indicating latest consistent row version<br> This will get the old version</li></ol></li><li>Session 1 commits<ol><li>PG sets the <code>xmax</code> of old version to 0</li></ol></li><li>Session 2 accesses that row again<ol><li>Again PG searches row that has max value in <code>xmax</code>. But they are all 0.</li><li>PG finds there is no transaction operating on this row.<br> Fetches the version with max <code>xmin</code> value, indicating latest consistent version.<br> This will get the new version</li></ol></li></ol><hr><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 1</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test (id <span class="hljs-type">int</span>, name <span class="hljs-type">character</span> <span class="hljs-type">varying</span>(<span class="hljs-number">10</span>));<br><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Rugal&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Rugal&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> test <span class="hljs-keyword">values</span>(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;Rugal&#x27;</span>);<br><span class="hljs-keyword">END</span>; <span class="hljs-comment">--COMMIT</span><br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name<br><span class="hljs-comment">-------+------+------+------+-------+----+-------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span>    <span class="hljs-number">2</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Rugal<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure><p>We can find that these 3 rows share the same <code>xmin=20775</code>, this means they are in the same transaction.<br>From <code>cmin</code> and <code>cmax</code> we could find are executed in certain order.    </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 1</span><br><span class="hljs-keyword">begin</span>;<br><span class="hljs-keyword">update</span> test <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Tenjin&#x27;</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br><span class="hljs-comment">--do not commit at this time</span><br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span>  name<br><span class="hljs-comment">-------+------+------+------+-------+----+--------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">4</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Tenjin<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure><p>Notice <code>xmin</code> for <code>id=3</code> increases, this is because it is involved in another transaction, while its <code>xmax</code> does not change.<br>Also the <code>ctid</code> of this row is set to 0, which means the first command of transaction.<br>MVCC of PostgreSQL reserves all rows before vacuum, this row is actually newly inserted.<br>The old row version is still kept in table, but its <code>xmax</code> is updated to the <code>XID</code> of new transaction. By doing so, other sessions that accessing this row will know it is involved in a transaction, so as to ensure transactional consistency.   </p><p>The view from another session is different.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 2</span><br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax  <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name<br><span class="hljs-comment">-------+-------+------+------+-------+----+-------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>     <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>     <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Rugal<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure><p>The <code>xmax</code> column indicates this row is involved in transaction 20776.<br>This is because PG notice we are query a row that is involved in a transaction, so PG will get the row with old version.<br>Because session 1 has not committed, we can not see newer version. In this way, MVCC in PostgreSQL ensures transactional consistency.   </p><p>Let’s do some more operation in session 1.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 1</span><br><span class="hljs-keyword">update</span> test <span class="hljs-keyword">set</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Adel&#x27;</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span>  name<br><span class="hljs-comment">-------+------+------+------+-------+----+--------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">5</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Adel<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">4</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Tenjin<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure><p>As we can see, row <code>id=2</code> has added in transaction 20776 and its <code>cmin</code> is set to 1 because it is the second command in this transaction.   </p><p>Session witnesses the change on row <code>id=2</code>.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 2</span><br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax  <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span> name<br><span class="hljs-comment">-------+-------+------+------+-------+----+-------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>     <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">2</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Rugal<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure><p>After commit of session 1, both sessions could see the same version of row.  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 1</span><br><span class="hljs-keyword">END</span>;<br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span>  name<br><span class="hljs-comment">-------+------+------+------+-------+----+--------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">5</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Adel<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">4</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Tenjin<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--session 2</span><br><span class="hljs-keyword">SELECT</span> xmin, xmax, cmin, cmax, ctid,  <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> test <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id;<br> xmin  <span class="hljs-operator">|</span> xmax <span class="hljs-operator">|</span> cmin <span class="hljs-operator">|</span> cmax <span class="hljs-operator">|</span> ctid  <span class="hljs-operator">|</span> id <span class="hljs-operator">|</span>  name<br><span class="hljs-comment">-------+------+------+------+-------+----+--------</span><br> <span class="hljs-number">20775</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Rugal<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span>    <span class="hljs-number">1</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">5</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span> Adel<br> <span class="hljs-number">20776</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span>    <span class="hljs-number">0</span> <span class="hljs-operator">|</span> (<span class="hljs-number">0</span>,<span class="hljs-number">4</span>) <span class="hljs-operator">|</span>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span> Tenjin<br>(<span class="hljs-number">3</span> <span class="hljs-keyword">rows</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql lock introduction</title>
    <link href="/2015/2015-07-02-postgresql-lock-introduction/"/>
    <url>/2015/2015-07-02-postgresql-lock-introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>For official documentation, please refer to <a href="http://www.postgresql.org/docs/9.4/static/explicit-locking.html">Postgresql</a>.  </p><h2 id="Table-level"><a href="#Table-level" class="headerlink" title="Table level"></a>Table level</h2><p>Once acquired, a lock is normally held till end of transaction.<br>But if a lock is acquired after establishing a savepoint, the lock is released immediately if the savepoint is rolled back to.<br>This is consistent with the principle that ROLLBACK cancels all effects of the commands since the savepoint.<br>The same holds for locks acquired within a PL&#x2F;pgSQL exception block: an error escape from the block releases locks acquired within it.  </p><ol><li><p>ACCESS SHARE<br>Conflicts with the <code>ACCESS EXCLUSIVE</code> lock mode only.<br>The <code>SELECT</code> command acquires a lock of this mode on referenced tables.<br>In general, any query that only reads a table and does not modify it will acquire this lock mode.</p></li><li><p>ROW SHARE<br>Conflicts with the <code>EXCLUSIVE</code> and <code>ACCESS EXCLUSIVE</code> lock modes.<br>The <code>SELECT FOR UPDATE</code> and <code>SELECT FOR SHARE</code> commands acquire a lock of this mode on the target table(s) (in addition to <code>ACCESS SHARE</code> locks on any other tables that are referenced but not selected <code>FOR UPDATE</code>&#x2F;<code>FOR SHARE</code>).</p></li><li><p>ROW EXCLUSIVE<br>Conflicts with the <code>SHARE</code>, <code>SHARE ROW EXCLUSIVE</code>, <code>EXCLUSIVE</code>, and <code>ACCESS EXCLUSIVE</code> lock modes.<br>The commands <code>UPDATE</code>, <code>DELETE</code>, and <code>INSERT</code> acquire this lock mode on the target table (in addition to <code>ACCESS SHARE</code> locks on any other referenced tables).<br>In general, this lock mode will be acquired by any command that modifies data in a table.</p></li><li><p>SHARE UPDATE EXCLUSIVE<br>Conflicts with the <code>SHARE UPDATE EXCLUSIVE</code>, <code>SHARE</code>, <code>SHARE ROW EXCLUSIVE</code>, <code>EXCLUSIVE</code>, and <code>ACCESS EXCLUSIVE</code> lock modes.<br>This mode protects a table against concurrent schema changes and <code>VACUUM</code> runs.<br>Acquired by <code>VACUUM</code> (without FULL), <code>ANALYZE</code>, <code>CREATE INDEX CONCURRENTLY</code>, and <code>ALTER TABLE VALIDATE</code> and other <code>ALTER TABLE</code> variants (for full details see <a href="http://www.postgresql.org/docs/9.4/static/sql-altertable.html">ALTER TABLE</a>).</p></li><li><p>SHARE<br>Conflicts with the <code>ROW EXCLUSIVE</code>, <code>SHARE UPDATE EXCLUSIVE</code>, <code>SHARE ROW EXCLUSIVE</code>, <code>EXCLUSIVE</code>, and <code>ACCESS EXCLUSIVE</code> lock modes.<br>This mode protects a table against concurrent data changes.<br>Acquired by <code>CREATE INDEX</code> (without <code>CONCURRENTLY</code>).</p></li><li><p>SHARE ROW EXCLUSIVE<br>Conflicts with the <code>ROW EXCLUSIVE</code>, <code>SHARE UPDATE EXCLUSIVE</code>, <code>SHARE</code>, <code>SHARE ROW EXCLUSIVE</code>, <code>EXCLUSIVE</code>, and <code>ACCESS EXCLUSIVE</code> lock modes.<br>This mode protects a table against concurrent data changes, and is self-exclusive so that only one session can hold it at a time.<br>This lock mode is not automatically acquired by any PostgreSQL command.</p></li><li><p>EXCLUSIVE<br>Conflicts with the <code>ROW SHARE</code>, <code>ROW EXCLUSIVE</code>, <code>SHARE UPDATE EXCLUSIVE</code>, <code>SHARE</code>, <code>SHARE ROW EXCLUSIVE</code>, <code>EXCLUSIVE</code>, and <code>ACCESS EXCLUSIVE</code> lock modes.<br>This mode allows only concurrent <code>ACCESS SHARE</code> locks, i.e., only reads from the table can proceed in parallel with a transaction holding this lock mode.<br>Acquired by <code>REFRESH MATERIALIZED VIEW CONCURRENTLY</code>.</p></li><li><p>ACCESS EXCLUSIVE<br>Conflicts with locks of all modes (<code>ACCESS SHARE</code>, <code>ROW SHARE</code>, <code>ROW EXCLUSIVE</code>, <code>SHARE UPDATE EXCLUSIVE</code>, <code>SHARE</code>, <code>SHARE ROW EXCLUSIVE</code>, <code>EXCLUSIVE</code>, and <code>ACCESS EXCLUSIVE</code>).<br>This mode guarantees that the holder is the only transaction accessing the table in any way.<br>Acquired by the <code>DROP TABLE</code>, <code>TRUNCATE</code>, <code>REINDEX</code>, <code>CLUSTER</code>, and <code>VACUUM FULL</code> commands.<br>Many forms of <code>ALTER TABLE</code> also acquire a lock at this level (see <a href="http://www.postgresql.org/docs/9.4/static/sql-altertable.html">ALTER TABLE</a>).<br>This is also the default lock mode for <code>LOCK TABLE</code> statements that do not specify a mode explicitly.</p></li></ol><hr><h2 id="Row-level"><a href="#Row-level" class="headerlink" title="Row level"></a>Row level</h2><p>PostgreSQL doesn’t remember any information about modified rows in memory, so there is no limit on the number of rows locked at one time. However, locking a row might cause a disk write, e.g., SELECT FOR UPDATE modifies selected rows to mark them locked, and so will result in disk writes.  </p><ol><li><p>FOR UPDATE<br>This prevents them from being locked, modified or deleted by other transactions until the current transaction ends.<br>That is, other transactions that attempt <code>UPDATE</code>, <code>DELETE</code>, <code>SELECT FOR UPDATE</code>, <code>SELECT FOR NO KEY UPDATE</code>, <code>SELECT FOR SHARE</code> or <code>SELECT FOR KEY SHARE</code> of these rows will be blocked until the current transaction ends;<br>conversely, <code>SELECT FOR UPDATE</code> will wait for a concurrent transaction that has run any of those commands on the same row, and will then lock and return the updated row (or no row, if the row was deleted).</p></li><li><p>FOR NO KEY UPDATE<br>Behaves similarly to FOR UPDATE, except that the lock acquired is weaker: this lock will not block <code>SELECT FOR KEY SHARE</code> commands that attempt to acquire a lock on the same rows.<br>This lock mode is also acquired by any <code>UPDATE</code> that does not acquire a <code>FOR UPDATE</code> lock.  </p></li><li><p>FOR SHARE<br>Behaves similarly to <code>FOR NO KEY UPDATE</code>, except that it acquires a shared lock rather than exclusive lock on each retrieved row.<br>A shared lock blocks other transactions from performing <code>UPDATE</code>, <code>DELETE</code>, <code>SELECT FOR UPDATE</code> or <code>SELECT FOR NO KEY UPDATE</code> on these rows, but it does not prevent them from performing <code>SELECT FOR SHARE</code> or <code>SELECT FOR KEY SHARE</code>.  </p></li><li><p>FOR KEY SHARE<br>Behaves similarly to <code>FOR SHARE</code>, except that the lock is weaker: <code>SELECT FOR UPDATE</code> is blocked, but not <code>SELECT FOR NO KEY UPDATE</code>.<br>A key-shared lock blocks other transactions from performing <code>DELETE</code> or any <code>UPDATE</code> that changes the key values, but not other <code>UPDATE</code>, and neither does it prevent <code>SELECT FOR NO KEY UPDATE</code>, <code>SELECT FOR SHARE</code>, or <code>SELECT FOR KEY SHARE</code>.</p></li></ol><hr><h2 id="Page-level"><a href="#Page-level" class="headerlink" title="Page level"></a>Page level</h2><p>In addition to table and row locks, page-level share&#x2F;exclusive locks are used to control read&#x2F;write access to table pages in the shared buffer pool.<br>These locks are released immediately after a row is fetched or updated. Application developers normally need not be concerned with page-level locks, but they are mentioned here for completeness.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tutorial to use google speech API</title>
    <link href="/2015/2015-05-16-tutorial-to-use-google-speech-api/"/>
    <url>/2015/2015-05-16-tutorial-to-use-google-speech-api/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I spent a long time searching for a good framework or API to do my oral programming work, yesterday I finally find a good way to do that.<br>First you need to use <a href="https://www.google.com/intl/en/chrome/demos/speech.html">google speech api</a>, and even before using this, you need to activate speech API privilege and generate a APIkey for youself.<br>I disclaim here first that google speech API is <code>not</code> an public and official API so it is <code>not</code> recommended to use it in product environment. Also, I encourage everyone to obtain your own APIkey in case of harassing other developers’ usage quota(who knows when will google starts to restrain it?).</p><h2 id="create-api-key"><a href="#create-api-key" class="headerlink" title="create api key"></a>create api key</h2><p>For those who want to apply a api-key, please follow <a href="http://www.chromium.org/developers/how-tos/api-keys">this page</a>:<br>Following is my personal experience on 2014&#x2F;05&#x2F;16. Notice this instruction and google console might change by time, so always keep updated.  </p><ol><li>Join <a href="https://groups.google.com/a/chromium.org/forum/?fromgroups#!forum/chromium-dev">chromium</a> google user group, otherwise you can not see the special API in google console.</li><li>Go to <a href="https://console.developers.google.com/">google-console</a>.</li><li>use a project or create one if you don’t have one.</li><li>Click on <code>APIs &amp; auth -&gt; APIs</code>, search for <code>speech</code> and enable this API(make sure you finished step 1 otherwise you are unable to see this entry).</li><li>Click <code>APIs &amp; auth -&gt; Credential</code>, on the right panel you can see there will have a button named <code>create new key</code>, click it.</li><li>Create a <code>browser key</code>. The referrers option is up to you.</li></ol><h2 id="quick-test-API"><a href="#quick-test-API" class="headerlink" title="quick test API"></a>quick test API</h2><ol start="7"><li>You can download sample audio file from <a href="https://github.com/gillesdemey/google-speech-v2">here</a> for your convenience.</li><li>use <code>API key</code> to call google speech API use <a href="!--swig%EF%BF%BC2--">curl</a> if you are using linux, this will save you a lot of time to see a quick result:  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X POST --data-binary @./good-morning-google.flac --header &#x27;Content-Type: audio/x-flac; rate=44100;&#x27; &#x27;https://www.google.com/speech-api/v2/recognize?output=json&amp;lang=en-us&amp;key=yourkey&#x27;<br></code></pre></td></tr></table></figure>After a second two json data will return:</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">&#123;&quot;result&quot;:[]&#125;<br>&#123;&quot;result&quot;:[&#123;&quot;alternative&quot;:[&#123;&quot;transcript&quot;:&quot;good morning Google how are you feeling today&quot;,&quot;confidence&quot;:0.987629&#125;],&quot;final&quot;:true&#125;],&quot;result_index&quot;:0&#125;<br></code></pre></td></tr></table></figure><p>A little bit of weird because there are 2 json with the first one is empty.  </p><h3 id="Now-just-do-anything-you-want"><a href="#Now-just-do-anything-you-want" class="headerlink" title="Now just do anything you want!"></a>Now just do anything you want!</h3>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reason that handler execute in invert order in ring wrapper</title>
    <link href="/2015/2015-05-06-reason-that-handler-execute-in-invert-order-in-ring-wrapper/"/>
    <url>/2015/2015-05-06-reason-that-handler-execute-in-invert-order-in-ring-wrapper/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>the <code>middleware</code> in <a href="https://github.com/ring-clojure/ring/wiki/Concepts#middleware">ring</a> provides another way to understand function that return function.<br>Here I am gonno explain a little bit.<br>The code below comes from <a href="http://stackoverflow.com/a/19456920/1242236">stackoverflow</a>.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">let</span></span> [post-wrap (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [handler]<br>                  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [request]<br>                    (<span class="hljs-name"><span class="hljs-built_in">str</span></span> (<span class="hljs-name">handler</span> request) <span class="hljs-string">&quot;, post-wrapped&quot;</span>)))<br><span class="hljs-comment">;this function will call handler first, then to form string</span><br>      pre-wrap  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [handler]<br>                  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [request]<br>                    (<span class="hljs-name">handler</span> (<span class="hljs-name"><span class="hljs-built_in">str</span></span> request <span class="hljs-string">&quot;, pre-wrapped&quot;</span>))))<br><span class="hljs-comment">;this function will form string first, then to call handler</span><br>      around    (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [handler]<br>                  (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [request]<br>                    (<span class="hljs-name"><span class="hljs-built_in">str</span></span> (<span class="hljs-name">handler</span> (<span class="hljs-name"><span class="hljs-built_in">str</span></span> request <span class="hljs-string">&quot;, pre-around&quot;</span>)) <span class="hljs-string">&quot;, post-around&quot;</span>)))<br><span class="hljs-comment">;this function will first form a string, then call handler,</span><br><span class="hljs-comment">;and append another string lastly</span><br>      handler   (<span class="hljs-name"><span class="hljs-built_in">-&gt;</span></span> <br>                  (<span class="hljs-name">pre-wrap</span> identity)<br>                  post-wrap<br>                  around) ]<br><span class="hljs-comment">;this can be rewritten as (around (post-wrap (pre-wrap identity)))</span><br>     (<span class="hljs-name">println</span> (<span class="hljs-name">handler</span> <span class="hljs-string">&quot;(Rugal Bernstein)&quot;</span>)))<br></code></pre></td></tr></table></figure><blockquote><p>(Rugal Bernstein), pre-around, pre-wrapped, post-wrapped, post-around</p></blockquote><p>The most important thing is that each function in code will return a function and wait for one more parameter to activate the inner one.  </p><p>So after wrap, the <code>pre-wrap</code> function actually looks like this:  </p><pre><code class="hljs">(fn [request] (str (identity request) &quot;, post-wrapped&quot;))</code></pre><p>And <code>post-wrap</code> becomes:  </p><pre><code class="hljs">(fn [request] (str (pre-wrap request) &quot;, post-wrapped&quot;))</code></pre><p>So as <code>around</code>:  </p><pre><code class="hljs">(fn [request] (str (post-wrap (str request &quot;, pre-around&quot;)) &quot;, post-around&quot;))</code></pre><p>After this, when we call <code>(handler &quot;(Rugal Bernstein)&quot;)</code>, of course it will be a invert order execution.<br>This is a good example for non-funtional programmer to think from the perspective of functional programming.<br>Try to understand it by yourself, you will learn more than just copying.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verification for C variable pointer</title>
    <link href="/2015/2015-05-06-verification-for-c-variable-pointer/"/>
    <url>/2015/2015-05-06-verification-for-c-variable-pointer/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Well, since the first time I got in touch with pointer in C, this guy has confused me a little bit. About three years ago I made a experiment to clarify its properties, but in another blog.<br>I am gonna rewrite a better version in here.  </p><h2 id="int"><a href="#int" class="headerlink" title="int"></a>int</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//This test is quite straight forward</span><br>    <span class="hljs-type">int</span> data=<span class="hljs-number">123</span>;<br>    <span class="hljs-type">int</span>* p=&amp;data;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of variable: %d\n&quot;</span>,data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of variable: %p\n&quot;</span>,&amp;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer:  %p\n&quot;</span>,p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer:  %d\n&quot;</span>,*p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of pointer:  %p\n&quot;</span>,&amp;data);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Content of variable: 123<br>Address of variable: 0x7fffa0916f64<br>Content of pointer:  0x7fffa0916f64<br>Derefer of pointer:  123<br>Address of pointer:  0x7fffa0916f64</p></blockquote><h2 id="array"><a href="#array" class="headerlink" title="array[]"></a>array[]</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//You can see from this test</span><br>    <span class="hljs-comment">//The address of first element is the address of variable</span><br>    <span class="hljs-comment">//The distance between elements is determined by the type of element.</span><br>    <span class="hljs-comment">//So 4 for int, 1 for char</span><br>    <span class="hljs-type">int</span> data[]=&#123;<span class="hljs-number">98</span>,<span class="hljs-number">33</span>,<span class="hljs-number">10</span>&#125;;<br>    <span class="hljs-type">int</span>* p=data;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer:  %d\n&quot;</span>,*p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer:  %d\n&quot;</span>,*(p+<span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer:  %d\n&quot;</span>,*(p+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of variable: %p\n&quot;</span>,&amp;data);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of variable: %p\n&quot;</span>,&amp;data[<span class="hljs-number">0</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of variable: %p\n&quot;</span>,&amp;data[<span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer:  %p\n&quot;</span>,p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer:  %p\n&quot;</span>,(p+<span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer:  %p\n&quot;</span>,(p+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of pointer:  %p\n&quot;</span>,&amp;p);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Derefer of pointer:  98<br>Derefer of pointer:  98<br>Derefer of pointer:  33<br>Address of variable: 0x7fffba6fa500<br>Address of variable: 0x7fffba6fa500<br>Address of variable: 0x7fffba6fa504<br>Content of pointer:  0x7fffba6fa500<br>Content of pointer:  0x7fffba6fa500<br>Content of pointer:  0x7fffba6fa504<br>Address of pointer:  0x7fffba6fa4f8</p></blockquote><h2 id="char"><a href="#char" class="headerlink" title="char*"></a>char*</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//You can imagine there is a type called string</span><br>    <span class="hljs-comment">//string data=&quot;rugal&quot;;</span><br>    <span class="hljs-comment">//then every thing feels like them same as what have mentioned above</span><br>    <span class="hljs-type">char</span>* p=<span class="hljs-string">&quot;rugal&quot;</span>;<br>    <span class="hljs-comment">//the %s option is different from others, it auto-derefer the data</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of string : %s\n&quot;</span>,p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer: %c\n&quot;</span>,*p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer: %c\n&quot;</span>,*(p+<span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Derefer of pointer: %c\n&quot;</span>,*(p+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer: %p\n&quot;</span>,p);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer: %p\n&quot;</span>,(p+<span class="hljs-number">0</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer: %p\n&quot;</span>,(p+<span class="hljs-number">1</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of pointer: %p\n&quot;</span>,&amp;p);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>Content of string : rugal<br>Derefer of pointer: r<br>Derefer of pointer: r<br>Derefer of pointer: u<br>Content of pointer: 0x400904<br>Content of pointer: 0x400904<br>Content of pointer: 0x400905<br>Address of pointer: 0x7ffff11f1eb8</p></blockquote><h2 id="function"><a href="#function" class="headerlink" title="function*"></a>function*</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdbool.h&gt;</span></span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">t1</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;T1 %d\n&quot;</span>,data);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">t2</span><span class="hljs-params">(<span class="hljs-type">int</span> data)</span><br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;T2 %d\n&quot;</span>,data);<br>&#125;<br><span class="hljs-type">void</span> (*function)(<span class="hljs-type">int</span>);<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    function=&amp;t1;<br>    function(<span class="hljs-number">6</span>);<br>    function=&amp;t2;<br>    function(<span class="hljs-number">232</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of t1     :%p\n&quot;</span>,t1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of t2     :%p\n&quot;</span>,t2);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of t1     :%p\n&quot;</span>,&amp;t1);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of t2     :%p\n&quot;</span>,&amp;t2);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Content of pointer:%p\n&quot;</span>,function);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Address of pointer:%p\n&quot;</span>,&amp;function);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>T1 6<br>T2 232<br>Content of t1     :0x4007fd<br>Content of t2     :0x40081e<br>Address of t1     :0x4007fd<br>Address of t2     :0x40081e<br>Content of pointer:0x40081e<br>Address of pointer:0x601048</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NERDTree basic usage</title>
    <link href="/2015/2015-04-23-nerdtree-basic-usage/"/>
    <url>/2015/2015-04-23-nerdtree-basic-usage/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Here I list same commands I think is most useful.  </p><ul><li><code>?</code>     help</li><li><code>C</code>     move into this folder</li><li><code>u</code>     move to parent folder</li><li><code>cd</code>    similar as <code>cd</code> in shell, change <code>PWD</code> into this folder</li><li><code>m</code>     open NERDTree menu</li><li><code>I</code>     Toggle hidden files</li><li><code>r</code>     Refresh file list</li></ul>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apply and map in clojure</title>
    <link href="/2015/2015-04-26-apply-and-map-in-clojure/"/>
    <url>/2015/2015-04-26-apply-and-map-in-clojure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It is a very confusing comparison between <code>map</code> and <code>apply</code>.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-comment">; data preparation</span><br>(<span class="hljs-keyword">def</span> <span class="hljs-title">data</span>  [[<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span>]<span class="hljs-punctuation">,</span>[<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>]<span class="hljs-punctuation">,</span>[<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span>]])<br></code></pre></td></tr></table></figure><p>The famous function <code>map</code> means to call function provided to each element in collection once at a time.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">map</span></span> println data)<br><br><span class="hljs-comment">;[1 2 3]</span><br><span class="hljs-comment">;[1 3 4]</span><br><span class="hljs-comment">;[1 5 6]</span><br><span class="hljs-comment">;(nil nil nil)</span><br></code></pre></td></tr></table></figure><p>There are 3 elements in <code>data</code>, <code>map</code> calls <code>println</code> for each element.  </p><p>Whereas <code>appy</code> just call function once, but extract all elements from collection before calling.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">apply</span></span> println data)<br><br><span class="hljs-comment">;[1 2 3] [1 3 4] [1 5 6]</span><br><span class="hljs-comment">;nil</span><br></code></pre></td></tr></table></figure><p>Here only has 1 line of printing.  </p><p>Some more experiments:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">apply</span></span> map println data)<br><br><span class="hljs-comment">;1 1 1</span><br><span class="hljs-comment">;2 3 5</span><br><span class="hljs-comment">;3 4 6</span><br><span class="hljs-comment">;(nil nil nil)</span><br></code></pre></td></tr></table></figure><p>Obviously, apply extracts elements from collection.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">eval</span></span> `(<span class="hljs-name"><span class="hljs-built_in">map</span></span> println ~@data))<br><span class="hljs-comment">;this is equivalent to </span><br>(<span class="hljs-name"><span class="hljs-built_in">map</span></span> println [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">2</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span>] [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">3</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>] [<span class="hljs-number">1</span><span class="hljs-punctuation">,</span><span class="hljs-number">5</span><span class="hljs-punctuation">,</span><span class="hljs-number">6</span>])<br><br><span class="hljs-comment">;1 1 1</span><br><span class="hljs-comment">;2 3 5</span><br><span class="hljs-comment">;3 4 6</span><br><span class="hljs-comment">;(nil nil nil)</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop HDFS Connection Refused</title>
    <link href="/2015/2015-04-14-hadoop-hdfs-connection-refused/"/>
    <url>/2015/2015-04-14-hadoop-hdfs-connection-refused/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Today I encounter a problem about connection refused by HDFS, not because of the firewall or something, but because of the <code>/etc/hosts</code> configuration in ubuntu.<br>By default, the there will have an entry  </p><pre><code class="hljs">127.0.1.1   domain.name</code></pre><p>It is this entry that direct access back to <code>127.0.1.1</code>, so the network setup only for local access.<br>Just removing this entry or replacing the <code>127.0.1.1</code> with your ip address could tackle this problem.<br>More diagnostic, please refer to <a href="https://wiki.apache.org/hadoop/ConnectionRefused">apache</a>.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDFS Permission denied</title>
    <link href="/2015/2015-04-14-hdfs-permission-denied/"/>
    <url>/2015/2015-04-14-hdfs-permission-denied/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>While developing hadoop or using HDFS, I want to access HDFS without permission problem for convenience.<br>So we could add one property in <code>conf/hdfs-site.xml</code> file.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.permissions<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>So that any access will not be block, but you need to disable this feature in product enviornment!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spark over YARN</title>
    <link href="/2015/2015-04-14-spark-over-yarn/"/>
    <url>/2015/2015-04-14-spark-over-yarn/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I don’t know why a lot of people start using <code>Spark</code>, but it is very easy to integrate it with <code>YARN</code>.  </p><ol><li><p>Deploy you <code>Yarn</code> and <code>HDFS</code> as usual, let’s say configuration folder is at <code>$HADOOP_HOME/conf</code> where <code>core_site.xml</code> and other files could be found.  </p></li><li><p>Unzip you <code>Spark</code> binary file and set the <code>$HADOOP_CONF_DIR</code> variables correctly in <code>conf/spark-env.sh</code>.  </p><pre><code class="hljs"> export HADOOP_HOME=/path/to/hadoop   export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop</code></pre></li><li><p>Yeah, configuration completed, easy isn’t it?</p></li><li><p>Test, use command and example jar file in spark</p><pre><code class="hljs"> ./bin/spark-submit --class org.apache.spark.examples.SparkPi \     --master yarn-cluster \     --num-executors 3 \     --driver-memory 4g \     --executor-memory 2g \     --executor-cores 1 \     lib/spark-examples*.jar \     10</code></pre></li></ol><p>It is really nice and easy!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>latex on ubuntu</title>
    <link href="/2015/2015-01-19-latex-on-ubuntu/"/>
    <url>/2015/2015-01-19-latex-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Development-Environment"><a href="#Development-Environment" class="headerlink" title="Development Environment"></a>Development Environment</h2><pre><code class="hljs">sudo apt-get install texlive-latex-base  texlive-latex-extra xzdec</code></pre><h2 id="Package-Management"><a href="#Package-Management" class="headerlink" title="Package Management"></a>Package Management</h2><p>Init <code>tlmgr</code> with command:  </p><pre><code class="hljs">tlmgr init-usertree</code></pre><p>Then you can install packages by:  </p><pre><code class="hljs">tlmgr install &lt;name&gt;</code></pre><p>But sometimes you could not find a package by this command, you need to search <a href="http://ctan.org/pkg/">here</a>  to see the container.<br>Yet, the recommend way is to install full package in <code>apt-get</code>.  </p><h2 id="Sample-Content"><a href="#Sample-Content" class="headerlink" title="Sample Content"></a>Sample Content</h2><figure class="highlight latex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs latex"><span class="hljs-keyword">\documentclass</span>[12pt]&#123;article&#125;<br><span class="hljs-keyword">\usepackage</span>&#123;fullpage,times,mathptmx,times,url&#125;<br><br><span class="hljs-keyword">\title</span>&#123;Sample&#125;<br><span class="hljs-keyword">\author</span>&#123;Due dates: January 8, 2015, 12 Noon <span class="hljs-keyword">\textbf</span>&#123;and&#125; January 22, 2015, 12 Noon&#125;<br><span class="hljs-keyword">\date</span>&#123;&#125;<br><br><span class="hljs-keyword">\begin</span>&#123;document&#125;<br><br><span class="hljs-keyword">\maketitle</span><br><span class="hljs-keyword">\thispagestyle</span>&#123;empty&#125;<br><br><span class="hljs-keyword">\textbf</span>&#123;Objective&#125;: Write a survey of Related Work.<br><br><span class="hljs-keyword">\bigskip</span><br><br><span class="hljs-keyword">\textbf</span>&#123;Detailed Instructions&#125;:<br><br><span class="hljs-keyword">\textbf</span>&#123;Part A&#125;: Outline of related work.<br><br>Submit a PDF file <span class="hljs-keyword">\textbf</span>&#123;only&#125; to D2L.  Please name your file <span class="hljs-keyword">\texttt</span>&#123;A4aLastNameFirstName.pdf&#125;<br>(e.g., I would submit a file called <span class="hljs-keyword">\texttt</span>&#123;A4aBruceNeil.pdf&#125;).   Part A is due on January 8 at 12 Noon.<br><br><span class="hljs-keyword">\pagebreak</span><br><br><span class="hljs-keyword">\textbf</span>&#123;Part B&#125;: Survey of related work.<br><br>Part B is due on January 22 at 12 Noon.<br><br><span class="hljs-keyword">\end</span>&#123;document&#125;<br></code></pre></td></tr></table></figure><h2 id="Compile"><a href="#Compile" class="headerlink" title="Compile"></a>Compile</h2><pre><code class="hljs">latex sample.tex</code></pre><h2 id="PDF-Reader"><a href="#PDF-Reader" class="headerlink" title="PDF Reader"></a>PDF Reader</h2><p>There is <code>okular</code> in KDE.</p><pre><code class="hljs">okular sample.pdf</code></pre>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>latex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>X11 forward, Xorg is C/S based</title>
    <link href="/2015/2015-01-16-X11-forward-Xorg-is-CS-based/"/>
    <url>/2015/2015-01-16-X11-forward-Xorg-is-CS-based/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It has been a very long time that I came into such feeling: <code>How could that be???</code>.<br>Yes, You may encounter such situation that you need to invoke an application than needs <code>Xorg</code> or desktop support connecting from remote server, but you are just using terminal emulator such like <code>putty</code>, how to do that?<br>Well long before I realize this thing, I know Xorg is actually a <code>C/S</code> architecture software, the remote server is <code>S</code>, which provide all applications you need; your local implementation is client, such as ‘Xming’ in windows.  </p><p>First of all you need to install <code>Xming</code> if you are using <code>Win</code>, do not forget to launch it.  </p><p>Now configure the <code>putty</code> in session configuration window followed by <code>Connection-&gt;SSH-&gt;X11</code>, under that tab, check on <code>enable X11 forwarding</code> and mark the forwarding location(Which I will explain later).  </p><p>If you do not know the display location, you could just by trying to launch an desktop application, say, in my situation, first I let the <code>location</code> blanked because I do not know its address, but checked the <code>enable</code>:  </p><pre><code class="hljs">$ matlabWarning: Unable to open display &#39;localhost:10.0&#39;.  You will not be able to display graphics on the screen.</code></pre><p>Or you could:  </p><pre><code class="hljs">echo $DISPLAY</code></pre><p>But I don’t know why I could only set this address as <code>localhost:0.0</code> to make it work! Anyone could give some assistance?  </p><p>How could that happen? Recalling the Xorg is <code>C/S</code> based, your <code>Xming</code> is a implementation of client of <code>Xorg</code>, this explained everything!<br>It is Magical, isn’t it? Have a good day!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bash completion</title>
    <link href="/2015/2015-01-16-bash-completion/"/>
    <url>/2015/2015-01-16-bash-completion/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Nowadays it is unimaginable using shell without <code>auto completion</code>, yum and apt-get tool is different from each other.  </p><p>when using yum:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">yum install bash_completion<br>echo &quot;source /etc/bash_completion&quot; &gt;&gt;/etc/bashrc<br></code></pre></td></tr></table></figure><hr><p>when using apt-get</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install bash_completion<br>vim /etc/bash.rc<br></code></pre></td></tr></table></figure><p>go to the <code>bash_completion</code> line and remove the comment notation there.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>change keyboard layout in linux</title>
    <link href="/2015/2015-01-16-change-keyboard-layout-in-linux/"/>
    <url>/2015/2015-01-16-change-keyboard-layout-in-linux/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>If it was not <code>Dvorak</code> is much better than <code>qwerty</code> I wont mention this post.<br>Yes you could do almost everything in command line, even change keyboard layout or printing.  </p><pre><code class="hljs">setxkbmap dvorksetxkbmap ussetxkbmap spanish</code></pre><p>Thats all, Easy piecy!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>execute and import python in python shell</title>
    <link href="/2015/2015-01-16-execute-and-import-python-in-python-shell/"/>
    <url>/2015/2015-01-16-execute-and-import-python-in-python-shell/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">import</span> moduleName<br></code></pre></td></tr></table></figure><h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-keyword">from</span> moduleName <span class="hljs-keyword">import</span> function/*<br></code></pre></td></tr></table></figure><h2 id="build-in-command"><a href="#build-in-command" class="headerlink" title="build in command"></a>build in command</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-built_in">exec</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;filename.py&#x27;</span>).read())<br>&gt;&gt;&gt;execfile(<span class="hljs-string">&#x27;filename.py&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle internal table</title>
    <link href="/2015/2015-01-16-oracle-internal-table/"/>
    <url>/2015/2015-01-16-oracle-internal-table/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="internal-RDBMS-table"><a href="#internal-RDBMS-table" class="headerlink" title="internal RDBMS table"></a>internal RDBMS table</h2><blockquote><p>X$ : encrypted, sysdba only, fundation of internal mechanism.<br>example: <code>X$KVIT</code>  </p></blockquote><h2 id="Data-dictionary-table"><a href="#Data-dictionary-table" class="headerlink" title="Data dictionary(table)"></a>Data dictionary(table)</h2><blockquote><p>%$ : for storing database structure and definition, created by <code>sql.bsp</code> and <code>$ORACLE_HOME/rdbms/admin</code><br>example: <code>OBJ$</code></p></blockquote><h2 id="static-data-dictionary-view"><a href="#static-data-dictionary-view" class="headerlink" title="static data dictionary(view)"></a>static data dictionary(view)</h2><blockquote><p>more stable than DD, based on <code>X$%</code> and <code>%$</code>.<br>A user have different levels of SDD.  </p></blockquote><table><thead><tr><th>type</th><th></th><th>desc</th><th></th><th>example</th></tr></thead><tbody><tr><td>user_%</td><td></td><td>objects that belong to user own</td><td></td><td>user_tables</td></tr><tr><td>all_%</td><td></td><td>objects that not belong to user but could access to</td><td></td><td>all_tables</td></tr><tr><td>dba_%</td><td></td><td>all table, only for sysdba role</td><td></td><td>dba_users</td></tr></tbody></table><h2 id="dynamic-performance-view-view"><a href="#dynamic-performance-view-view" class="headerlink" title="dynamic performance view(view)"></a>dynamic performance view(view)</h2><p>Including and reflect performance of system, dynamic, based on <code>X$%</code>  </p><table><thead><tr><th>type</th><th></th><th>desc</th><th></th><th>example</th></tr></thead><tbody><tr><td>GV$%</td><td></td><td>including all instances</td><td></td><td>GV$METRIC</td></tr><tr><td>V$%</td><td></td><td>local instance only</td><td></td><td>V$METRIC</td></tr></tbody></table><hr><p>order of accessing</p><ol><li>analyse object name</li><li>the table and view of user own</li><li>private synonym</li><li>public synonym</li><li>throw <code>ORA-00942</code>(cannot find object)</li></ol>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>oracle lock mode</title>
    <link href="/2015/2015-01-16-oracle-lock-mode/"/>
    <url>/2015/2015-01-16-oracle-lock-mode/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>By <code>v$lock</code>, we could have a look at lock in every session. Lock have a lot of mode:  </p><p>mode|name||desc<br>–|–||–<br>0|none|<br>1|null|<br>2|Row-S||row sharing lock: share row<br>3|Row-X||row exclusive lock: for modify row<br>4|Share||share lock: block other DML<br>5|S&#x2F;Row-X ||shared row exclusive lock: block other transaction<br>6|exclusive||exclusive lock: independently access and use</p><hr><p>lock type:</p><ul><li>TM lock for parallel accessing table</li><li>TX transaction lock or row lock for parallel accessing row</li><li>MR media recover lock means database online</li><li>ST space transaction lock means due to bad file structure, some segments in database in increase or shrink <code>SMON</code> or merging free space nearby.</li></ul>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Oracle login script</title>
    <link href="/2015/2015-01-16-oracle-login-script/"/>
    <url>/2015/2015-01-16-oracle-login-script/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Add edit file <code>glogin.sql</code> in <code>sqlplus</code> folder.<br>Better than nothing:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">define</span> _editor<span class="hljs-operator">=</span>vim<br><span class="hljs-keyword">set</span> serverout <span class="hljs-keyword">on</span> size <span class="hljs-number">100000</span><br><span class="hljs-keyword">set</span> trimspool <span class="hljs-keyword">on</span><br><span class="hljs-keyword">set</span> long <span class="hljs-number">5000</span><br><span class="hljs-keyword">set</span> linesize <span class="hljs-number">100</span><br><span class="hljs-keyword">set</span> pagesize <span class="hljs-number">9999</span><br><span class="hljs-keyword">column</span> plan_plus_exp <span class="hljs-keyword">for</span> a80<br><span class="hljs-keyword">column</span> global_name   new_value gname<br><span class="hljs-keyword">set</span> termout off<br><span class="hljs-keyword">define</span> gname<span class="hljs-operator">=</span>idle<br><span class="hljs-keyword">column</span> global_name new_value gname<br><span class="hljs-keyword">select</span>  <span class="hljs-built_in">lower</span>(<span class="hljs-keyword">user</span>)<span class="hljs-operator">||</span><span class="hljs-string">&#x27;@&#x27;</span><span class="hljs-operator">||</span>substr(global_name,<span class="hljs-number">1</span>,decode(dot,<span class="hljs-number">0</span>,length(global_name),dot<span class="hljs-number">-1</span>))global_name <br><span class="hljs-keyword">from</span>(<br>    <span class="hljs-keyword">select</span>  global_name, instr(global_name,<span class="hljs-string">&#x27;.&#x27;</span>) dot <br>    <span class="hljs-keyword">from</span> global_name);<br><span class="hljs-keyword">set</span> sqlprompt <span class="hljs-string">&#x27;&amp;gname&gt; &#x27;</span><br><span class="hljs-keyword">set</span> termout <span class="hljs-keyword">on</span><br><span class="hljs-keyword">set</span> autotrace traceonly<br><span class="hljs-keyword">set</span> timing <span class="hljs-keyword">on</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>printing under command line</title>
    <link href="/2015/2015-01-16-printing-under-command-line/"/>
    <url>/2015/2015-01-16-printing-under-command-line/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Long time no see! Today I am going to have a very exciting thing:<br><code>printing under command line in linux</code><br>Which is very useful if you need to do the work very fluently!<br>First install <code>cups</code> and its pdf converter by:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install cups  cups-pdf<br></code></pre></td></tr></table></figure><p>After this, you should have both <code>lpstat</code> and <code>lp</code> commands.<br>if your computer get right connected with printer(cups will install some printer drivers on your PC).<br>Now let us see what printers you can access to.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo lpstat  -p #show printer with their working status<br></code></pre></td></tr></table></figure><pre><code class="hljs">[rugal@domba-06 mnt]&gt; sudo lpstat  -pprinter cms is idle.  enabled since Mon 11 Aug 2014 01:59:05 PM CDTprinter Coral is idle.  enabled since Fri 16 Jan 2015 01:26:41 PM CST    Data file sent successfullyprinter Diamond is idle.  enabled since Fri 16 Jan 2015 02:01:54 PM CST    Data file sent successfullyprinter Emerald is idle.  enabled since Fri 16 Jan 2015 02:07:52 PM CST    Data file sent successfullyprinter Fluorite is idle.  enabled since Wed 23 Sep 2009 05:05:04 PM CDTprinter Mail is idle.  enabled since Tue 08 Jan 2013 01:24:36 PM CSTprinter Opal is idle.  enabled since Fri 16 Jan 2015 09:58:30 AM CST    Data file sent successfullyprinter Zircon is idle.  enabled since Thu 15 Jan 2015 12:08:59 PM CST</code></pre><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo lpstat  -s #show printer with URI<br></code></pre></td></tr></table></figure><pre><code class="hljs">no system default destinationdevice for cms: socket://130.179.25.7:9100device for Coral: pacups-lpd://coral/device for Diamond: pacups-lpd://diamond/device for Emerald: pacups-lpd://emerald/device for Fluorite: pacups-socket://fluorite/device for Mail: mailto://cs.umanitoba.ca/application/pdfdevice for Opal: pacups-lpd://opal/device for Zircon: pacups-socket://zircon/</code></pre><p>Take instance if you want to print something with <code>Diamond</code> printer, you need to:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lp -d Diamond filename<br></code></pre></td></tr></table></figure><p>Also in <code>lp</code> you could specify a lot of printing options, for instance do <code>two side</code> printing if your printer supported:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">lp -o sides=two-sided-long-edge -d Diamond filename<br></code></pre></td></tr></table></figure><p>But the bad thing is, you could only print <code>txt</code> and <code>pdf</code> files, still a long way to go!<br>I cannot wait to use it! Have a try!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu setup default language</title>
    <link href="/2015/2015-01-16-ubuntu-setup-default-language/"/>
    <url>/2015/2015-01-16-ubuntu-setup-default-language/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Edit <code>/etc/default/locale</code>  file:  </p><pre><code class="hljs">LANG=”en_US.UTF-8″LANGUAGE=”en_US:en”</code></pre><p>Then generate locale:  </p><pre><code class="hljs">$ locale-gen -en_US:en</code></pre><p>You need log out to make this language activated.  </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>load jar in repl</title>
    <link href="/2014/2014-12-15-load-jar-in-repl/"/>
    <url>/2014/2014-12-15-load-jar-in-repl/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I have been studying <code>clojure</code> for a few days, but I need to write test code in files before using <code>lein run</code> to test it, which is definitely productiveless.<br>One way to load a jar in <code>repl</code>    </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">require</span> &#x27;[clojure.data.json <span class="hljs-symbol">:as</span> json])<br></code></pre></td></tr></table></figure><p>New version of clojure deprecated the <code>use</code>  to make it more consistant to import a package.<br>Since loading all functions into current namespace will result into a bunch of confliction problems.<br>So it is recommended to use <code>require</code>.  </p><p>By using <code>require</code> with <code>:refer</code> and <code>:all</code> options, you could achieve the same work in a more flexible and consistant way.  </p><hr><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-comment">;Also write some tips for loading `.clj` files manully.</span><br><span class="hljs-comment">;; file located at src/address_book/core.clj</span><br>(<span class="hljs-name"><span class="hljs-built_in">load</span></span> <span class="hljs-string">&quot;address_book/core&quot;</span>) <span class="hljs-comment">;just need class name with slash</span><br>(<span class="hljs-name">load-file</span> <span class="hljs-string">&quot;src/address_book/core.clj&quot;</span>)<span class="hljs-comment">;need canonical name and full clj extention</span><br><span class="hljs-comment">;remove namespace from current one</span><br>(<span class="hljs-name">remove-ns</span> &#x27;my-new-namespace)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>map incomplete fields to class in hibernate</title>
    <link href="/2014/2014-12-12-map-incomplete-fields-to-class-in-hibernate/"/>
    <url>/2014/2014-12-12-map-incomplete-fields-to-class-in-hibernate/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Sometimes you just want to partially use columns or fields in <code>HQL</code> but still want to map them into a class by Hibernate.<br>Well I also encounter this situation.<br>I have a entity class <code>Word</code> which has 5 fields:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Entity(name = &quot;word&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Word</span><br>&#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Basic(optional = false)</span><br>    <span class="hljs-meta">@Column(nullable = false)</span><br>    <span class="hljs-keyword">private</span> String word;<br><br>    <span class="hljs-meta">@Column(length = 10)</span><br>    <span class="hljs-keyword">private</span> String pinyin;<br><br>    <span class="hljs-meta">@Column(length = 5)</span><br>    <span class="hljs-keyword">private</span> String initial;<br><br>    <span class="hljs-meta">@Column(length = 5)</span><br>    <span class="hljs-keyword">private</span> String vowel;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> count;<br>    <span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>But my <code>Criteria</code> method only has two:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List <span class="hljs-title function_">groupByInitial</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">Criteria</span> <span class="hljs-variable">criteria</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">super</span>.createCriteria();<br>    criteria.setProjection(Projections.projectionList()<br>        .add(Projections.sum(<span class="hljs-string">&quot;count&quot;</span>).as(<span class="hljs-string">&quot;count&quot;</span>))<br>        .add(Projections.groupProperty(<span class="hljs-string">&quot;initial&quot;</span>).as(<span class="hljs-string">&quot;initial&quot;</span>))<br>    );<br>    criteria.add(Restrictions.neOrIsNotNull(<span class="hljs-string">&quot;pinyin&quot;</span>, <span class="hljs-string">&quot;&quot;</span>));<br>    <span class="hljs-keyword">return</span> criteria.list();<br>&#125;<br></code></pre></td></tr></table></figure><p>You will surely get a Exception:  </p><pre><code class="hljs">java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to rugal.entity.Word</code></pre><p>To solve this we need a transform class, namely:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StatsWord</span><br>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> count;<br><br>    <span class="hljs-keyword">private</span> String initial;<br>    <span class="hljs-comment">//...</span><br></code></pre></td></tr></table></figure><p>This could just be a POJO, with the number and same alias in you <code>Criteria</code> method.<br>Then we need to register it in <code>Criteria</code> method, say:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">criteria.setResultTransformer(Transformers.aliasToBean(StatsWord.class));<br></code></pre></td></tr></table></figure><p>Now have a try if this is workable or not!</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Postgresql allows any connection</title>
    <link href="/2014/2014-12-12-postgresql-allows-any-connection/"/>
    <url>/2014/2014-12-12-postgresql-allows-any-connection/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>For development usage, I would rather allow any connection to postgresql:  </p><p>First you need to add one line in <code>pg_hba.conf</code></p><pre><code class="hljs">host    all             all             0.0.0.0/0            md5</code></pre><p>Which means allow any connection from any IP using password.</p><p>Next is to make sure the <code>listen_addresses</code> in <code>postgresql.conf</code> listening to any incoming connections as well:</p><pre><code class="hljs">listen_addresses = &#39;*&#39;</code></pre><p>After the changes you have to reload the configuration (as a superuser):</p><pre><code class="hljs">SELECT pg_reload_conf();</code></pre><p>Or you could restart postgres server .</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop Connection refused no further information</title>
    <link href="/2014/2014-12-05-hadoop-Connection-refused-no-further-information/"/>
    <url>/2014/2014-12-05-hadoop-Connection-refused-no-further-information/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>When using eclipse on window to connect to remote hadoop server in Linux.<br>But when add a new location: <code>Cannot connect to the Map/Reduce location: </code>  </p><pre><code class="hljs">Call to 172.18.3.198/172.18.3.198:9001 failed on connection exception: java.net.ConnectException: Connection refused: no further information.</code></pre><hr><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>Modify the <code>core-site.xml</code>, <code>mapred-site.xml</code> files for their localhost into the server IP ! Everything is good bless.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java scanner chinese character</title>
    <link href="/2014/2014-12-05-java-scanner-chinese-character/"/>
    <url>/2014/2014-12-05-java-scanner-chinese-character/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I just find it is difficult to scan Chinese character in Java.<br>For reading <code>UTF-8</code> chinese character by <code>Scanner</code>, you need to identify the char-set.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(file, <span class="hljs-string">&quot;utf-8&quot;</span>);<br></code></pre></td></tr></table></figure><p>Or <code>sc,hasNext()</code> will end inaccidently.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cyclic code definitions</title>
    <link href="/2014/2014-11-04-cyclic-code-definitions/"/>
    <url>/2014/2014-11-04-cyclic-code-definitions/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><h2 id="cyclic-subspace"><a href="#cyclic-subspace" class="headerlink" title="cyclic subspace"></a>cyclic subspace</h2><p>A subspace $S$ of $V_n(F)$ is a cyclic subspace if whenever  </p><p>$$<br>(a_1a_2a_3a_4…a_n) \in S \text{ then } (a_na_1a_2a_3…a_n-1) \in S<br>$$  </p><p>In other words, $S$ is a subspace and for each vector $a \in S$, every <code>cyclic shift</code> of a is also in $S$.</p><h2 id="cyclic-code"><a href="#cyclic-code" class="headerlink" title="cyclic code"></a>cyclic code</h2><p>A linear code $C$ is a cyclic code if $C$ is a cyclic subspace.<br>Examples:</p><ol><li>$S&#x3D;{(0000)} \subseteq V_4(Z_2)$</li><li>$S&#x3D;{(0000),(1111)} \subseteq V_4(Z_2)$</li><li>$S&#x3D;{(0000),(1111),(1100),(0110),(0011),(1001),(1010),(0101)} \subseteq V_4(Z_2)$</li></ol>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>group theory definition</title>
    <link href="/2014/2014-11-04-group-theory-definition/"/>
    <url>/2014/2014-11-04-group-theory-definition/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><p>Before introduce group definition, let me list those properties mentioned.  </p><ol><li><code>Closure</code>:<br>For all $a, b \in G$, the relation $a \bullet b \in G$ holds.</li><li><code>associative:</code><br>For all $a, b, c \in G$, the equation $(a \bullet b) \bullet c &#x3D; a \bullet (b \bullet c)$ holds.</li><li><code>Commutative</code><br>For all $a, b \in G$, $a \bullet b &#x3D; b \bullet a$.</li><li><code>Identity element</code>:<br>There exists an element $e \in G$, such that for all elements $a \in G$, the equation $e \bullet a &#x3D; a$ holds.</li><li><code>Inversible</code>:<br>For each $a \in G$, there exists an element $a^{-1} \in G$ such that $a \bullet a^{-1} &#x3D; e$, where $e$ is the identity element. </li><li><code>Distributive</code>:<br>For all $a, b, c \in G$, the equation $(a+b) \bullet c&#x3D;a \bullet c+b \bullet c$ holds.</li></ol><hr><h2 id="group-G-•"><a href="#group-G-•" class="headerlink" title="group(G,•)"></a>group(G,•)</h2><p>consists of a set of elements together with an operation $\bullet$ such that:  </p><table><thead><tr><th>property</th><th></th><th align="right">$\bullet$</th></tr></thead><tbody><tr><td>clojure</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>associative</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>identity</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>inversible</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>commutative</td><td></td><td align="right">$\times$</td></tr><tr><td>distributive</td><td></td><td align="right">$\times$</td></tr></tbody></table><hr><h2 id="abelian-group-A-•"><a href="#abelian-group-A-•" class="headerlink" title="abelian group (A, •)"></a>abelian group (A, •)</h2><p>Abelian group is a <code>group</code>, but also have one additional property:</p><table><thead><tr><th>property</th><th></th><th align="right">$\bullet$</th></tr></thead><tbody><tr><td>clojure</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>associative</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>identity</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>inversible</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>commutative</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>distributive</td><td></td><td align="right">$\times$</td></tr></tbody></table><hr><h2 id="rings"><a href="#rings" class="headerlink" title="rings"></a>rings</h2><p>A commutative ring with unity $(R,+,*)$ is an algebraic structure consisting of a set of elements R together with two binary operations denoted <code>+</code> and <code>*</code> which satisfy the follow properties for all elements in <code>R</code>:  </p><table><thead><tr><th>property</th><th align="right">$+$</th><th align="right">$*$</th></tr></thead><tbody><tr><td>clojure</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>associative</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>commutative</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>identity</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>inversible</td><td align="right">$\checkmark$</td><td align="right">N&#x2F;A</td></tr><tr><td>distributive</td><td align="right">$\times$</td><td align="right">$\checkmark$</td></tr></tbody></table><hr><h2 id="ideal-ring"><a href="#ideal-ring" class="headerlink" title="ideal ring"></a>ideal ring</h2><p>Let $(R,+,*)$ be a ring; A non-empty subset $I$ of $R$ called a <code>ideal</code> of the ring if:</p><ol><li>$(I,+)$ is a group.</li><li>$i*r \in I$ for all $i \in I$ and $r \in R$.</li></ol><table><thead><tr><th>property</th><th></th><th align="right">$+$</th></tr></thead><tbody><tr><td>clojure</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>associative</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>identity</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>inversible</td><td></td><td align="right">$\checkmark$</td></tr><tr><td>commutative</td><td></td><td align="right">$\times$</td></tr><tr><td>distributive</td><td></td><td align="right">$\times$</td></tr></tbody></table><hr><h2 id="field"><a href="#field" class="headerlink" title="field"></a>field</h2><p>field is a set of elements which is closed under two binary operations, which we denote by $+$ and $\times$.</p><table><thead><tr><th>property</th><th align="right">$+$</th><th align="right">$\times$</th></tr></thead><tbody><tr><td>clojure</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>associative</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>commutative</td><td align="right">$\checkmark$</td><td align="right">$\checkmark$</td></tr><tr><td>identity</td><td align="right">0</td><td align="right">1</td></tr><tr><td>inversible</td><td align="right">$\checkmark$</td><td align="right">!0</td></tr><tr><td>distributive</td><td align="right">$\times$</td><td align="right">$\checkmark$</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>introduction to font family</title>
    <link href="/2014/2014-11-04-introduction-to-font-family/"/>
    <url>/2014/2014-11-04-introduction-to-font-family/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Serif"><a href="#Serif" class="headerlink" title="Serif"></a>Serif</h2><p>In typography, a serif <code>/ˈsɛrɪf/</code> is a small line attached to the end of a stroke in a letter or symbol, such as when handwriting is separated into distinct units for a typewriter or typesetter.<br>A typeface with serifs is called a serif typeface (or serifed typeface).</p><h2 id="sans-serif"><a href="#sans-serif" class="headerlink" title="sans-serif"></a>sans-serif</h2><p>In typography, a sans-serif, sans serif, gothic, san serif or simply sans typeface is one that does not have the small projecting features called “serifs” at the end of strokes.<br>The term comes from the French word sans, meaning “without”.</p><h2 id="Monospaced"><a href="#Monospaced" class="headerlink" title="Monospaced"></a>Monospaced</h2><p>A monospaced font, also called a fixed-pitch, fixed-width or non-proportional font, is a font whose letters and characters each occupy the same amount of horizontal space.<br>This contrasts with variable-width fonts, where the letters differ in size from one another, as do spacings in between many letters.</p><h2 id="handwriting"><a href="#handwriting" class="headerlink" title="handwriting"></a>handwriting</h2><p>Also called script typefaces, are based upon the varied and often fluid stroke created by handwriting.<br>They are organized into highly regular formal types similar to cursive writing and looser, more casual scripts.</p><h2 id="display"><a href="#display" class="headerlink" title="display"></a>display</h2><p>Display type refers to the use of type at large sizes, perhaps 30 points or larger.<br>Some typefaces are considered useful solely at display sizes, and hence are known as display faces.<br>For typefaces used across a wide range of sizes, in the days of metal type, each size was cut individually, or even if pantographically scaled would often have adjustments made to the design for larger or smaller sizes, making a “display” face have distinct differences.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>font</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Optimal Substructure</title>
    <link href="/2014/2014-09-24-optimal-substructure/"/>
    <url>/2014/2014-09-24-optimal-substructure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="Optimal-Substructure"><a href="#Optimal-Substructure" class="headerlink" title="Optimal Substructure"></a>Optimal Substructure</h2><p>if optimal solution of the given problem can be obtained by using optimal solutions of its subproblems.<br>For example the shortest path problem has following optimal substructure property: If a node <code>x</code> lies in the shortest path from a source node <code>u</code> to destination node <code>v</code> then the shortest path from <code>u</code> to <code>v</code> is combination of shortest path from <code>u</code> to <code>x</code> and shortest path from <code>x</code> to <code>v</code>.  </p><p>The standard All Pair Shortest Path algorithms like <code>Floyd–Warshall</code> and <code>Bellman–Ford</code> are typical examples of Dynamic Programming.  </p><p>On the other hand the Longest path problem doesn’t have the Optimal Substructure property. Here by Longest Path we mean longest simple path (path without cycle) between two nodes.<br>Consider the following unweighted graph given in the <code>CLRS</code> book.<br>There are two longest paths from <code>q</code> to <code>t</code>: <code>q-&gt;r-&gt;t</code> and <code>q -&gt;s-&gt;t</code>. Unlike shortest paths, these longest paths do not have the optimal substructure property.<br><img src="http://geeksforgeeks.org/wp-content/uploads/LongestPath.gif" alt="pattern"><br>For example, the longest path <code>q-&gt;r-&gt;t</code> is not a combination of longest path from <code>q</code> to <code>r</code> and longest path from <code>r</code> to <code>t</code>, because the longest path from <code>q</code> to <code>r</code> is <code>q-&gt;s-&gt;t-&gt;r</code>.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Overlapping Subproblems</title>
    <link href="/2014/2014-09-24-overlapping-subproblems/"/>
    <url>/2014/2014-09-24-overlapping-subproblems/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="Divide-and-Conquer"><a href="#Divide-and-Conquer" class="headerlink" title="Divide and Conquer"></a>Divide and Conquer</h1><ol><li><code>Useful</code> when solutions of same subproblems are needed again and again, Like Divide and Conquer, Dynamic Programming combines solutions to sub-problems. like <code>Fibonacci Numbers</code></li><li><code>Not useful</code> when there are no common (overlapping) subproblems because there is no point storing the solutions if they are not needed again. For example, <code>Binary Search</code> doesn’t have common subproblems</li></ol><hr><p>There are two ways to store values so that these values can be reused and I will also show two instances of dynamic programming by <code>Fibonacci</code>:</p><h2 id="Memoization-Top-Down"><a href="#Memoization-Top-Down" class="headerlink" title="Memoization (Top Down)"></a>Memoization (Top Down)</h2><p>try to touch from top to bottom, calculate and store value whenever this value is not found in our, otherwise just use it.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Memoization</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>   <span class="hljs-keyword">if</span>(lookup[n] == NIL)<br>   &#123;<br>    <span class="hljs-keyword">if</span> ( n &lt;= <span class="hljs-number">1</span> )<br>      lookup[n] = n;<br>    <span class="hljs-keyword">else</span><br>      lookup[n] = fib(n<span class="hljs-number">-1</span>) + fib(n<span class="hljs-number">-2</span>);<br>   &#125;<br>   <span class="hljs-keyword">return</span> lookup[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>In Memoized version, table is filled on demand, unlike the tabulated version, all entries of the lookup table are not necessarily filled in memoized version.  </p><h2 id="Tabulation-Bottom-Up"><a href="#Tabulation-Bottom-Up" class="headerlink" title="Tabulation (Bottom Up)"></a>Tabulation (Bottom Up)</h2><p>try to touch from bottom to top, calculate, calculate and store value.  </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//Tabulation</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">fib</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span><br>&#123;<br>  <span class="hljs-type">int</span> f[n+<span class="hljs-number">1</span>];<br>  <span class="hljs-type">int</span> i;<br>  f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;   f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>; <br>  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">2</span>; i &lt;= n; i++)<br>      f[i] = f[i<span class="hljs-number">-1</span>] + f[i<span class="hljs-number">-2</span>];<br>  <span class="hljs-keyword">return</span> f[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>While in tabulated version, starting from the first entry, all entries are filled one by one.   </p><hr><p>Both <code>tabulated</code> and <code>Memoized</code> store the solutions of subproblems.<br>For example, memoized solution of <code>LCS</code> problem doesn’t necessarily fill all entries.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Italiano Glossary</title>
    <link href="/2014/2014-09-14-italiano-glossary/"/>
    <url>/2014/2014-09-14-italiano-glossary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><table><thead><tr><th>word</th><th></th><th align="right">value</th></tr></thead><tbody><tr><td>arrivederci</td><td></td><td align="right">goodbye</td></tr><tr><td>bene</td><td></td><td align="right">ok</td></tr><tr><td>bello</td><td></td><td align="right">nice</td></tr><tr><td>grazie</td><td></td><td align="right">thanks</td></tr><tr><td>ciao</td><td></td><td align="right">hello</td></tr><tr><td>Requiescat in pace</td><td></td><td align="right">dead in peace</td></tr><tr><td>excusa</td><td></td><td align="right">excuse me</td></tr><tr><td>questo</td><td></td><td align="right">this</td></tr><tr><td>quello</td><td></td><td align="right">that one</td></tr><tr><td>vorrei</td><td></td><td align="right">would like</td></tr><tr><td>per favore</td><td></td><td align="right">please</td></tr><tr><td>Io</td><td></td><td align="right">I</td></tr><tr><td>Il</td><td></td><td align="right">The</td></tr><tr><td>conto</td><td></td><td align="right">bill</td></tr><tr><td>acqua</td><td></td><td align="right">water</td></tr><tr><td>naturale</td><td></td><td align="right">natural</td></tr><tr><td>O</td><td></td><td align="right">or</td></tr><tr><td>e</td><td></td><td align="right">and</td></tr><tr><td>andare</td><td></td><td align="right">To go</td></tr><tr><td>A</td><td></td><td align="right">To</td></tr><tr><td>ristorante</td><td></td><td align="right">restaurant</td></tr><tr><td>Qui</td><td></td><td align="right">Here</td></tr><tr><td>Li</td><td></td><td align="right">There,them</td></tr><tr><td>bagno</td><td></td><td align="right">restroom</td></tr><tr><td>Quant’e</td><td></td><td align="right">how much</td></tr><tr><td>Un</td><td></td><td align="right">a,one</td></tr><tr><td>C’e</td><td></td><td align="right">There is</td></tr><tr><td>presto</td><td></td><td align="right">very quick,soon</td></tr><tr><td>amico</td><td></td><td align="right">friend</td></tr><tr><td>buongiorno</td><td></td><td align="right">good morning&#x2F;day</td></tr><tr><td>buonasera</td><td></td><td align="right">good evening</td></tr><tr><td>buonanotte</td><td></td><td align="right">good night</td></tr><tr><td>come sta?</td><td></td><td align="right">how are you?</td></tr><tr><td>come stai?</td><td></td><td align="right">how are you?</td></tr><tr><td>sto bene</td><td></td><td align="right">I am fine</td></tr><tr><td>prego</td><td></td><td align="right">you are welcome</td></tr><tr><td>e lei?</td><td></td><td align="right">and you?</td></tr><tr><td>anch’io</td><td></td><td align="right">me too</td></tr><tr><td>piacere</td><td></td><td align="right">Nice to meet you</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clojure lazy sequence</title>
    <link href="/2014/2014-09-04-clojure-lazy-sequence/"/>
    <url>/2014/2014-09-04-clojure-lazy-sequence/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I asked a question in <code>SO</code> some months ago, to get a explaination towards <a href="http://stackoverflow.com/questions/24523488/how-lazy-sequence-run-in-this-code">lazy sequence</a>:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">def</span> <span class="hljs-title">fib-seq</span> (<span class="hljs-name">lazy-cat</span> [<span class="hljs-number">0</span> <span class="hljs-number">1</span>]  (<span class="hljs-name"><span class="hljs-built_in">map</span></span> + (<span class="hljs-name"><span class="hljs-built_in">rest</span></span> fib-seq) fib-seq )))<br></code></pre></td></tr></table></figure><hr><p>Thanks <code>@omiel</code> provide many useful information, but still did not touch the most sensitive point, after thinking a while, I figure out what happened in the generation of lazy sequence.<br>May clojure sage in SO please correct me if I am actually wrong.   </p><p>What I mean step by step actually foci on the generation of lazy-sequence item one by one, I already know some of the logic of clojure language.  </p><p>As we know the <code>fib-seq</code> is defined as a <code>lazy-seq</code> and its first two items is 0 and 1, the rest of its items still left unevaluated, which is the most interesting feature of clojure.<br>While it is rather easy to understand that accessing the first two item just means to touch those two things, and they are in memory or cached, thus they could be directly return and print out.  </p><p>As <code>fib-seq</code> do not have third item for now, it need to generate it when thread need to accessing the 3rd item, here is where my assumption start:  </p><h1 id="stem"><a href="#stem" class="headerlink" title="stem"></a>stem</h1><p>Since <code>(map + (rest fib-seq) fib-seq )</code> is a <code>lazy-seq</code> itself, it contain no item in it currently and waiting for calling <code>more</code> command on it.<br>Here calling the 3rd item of <code>fib-seq</code> means calling the first item of lazy sequence <code>(map...)</code>, hence it need to generate and real execute the code.<br>By simply replace variable name with list, the code of map seems like this:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">map</span></span> + (<span class="hljs-name"><span class="hljs-built_in">rest</span></span> [<span class="hljs-number">0</span> <span class="hljs-number">1</span> ..]) [<span class="hljs-number">0</span> <span class="hljs-number">1</span> ..] )<span class="hljs-comment">; the &#x27;..&#x27; means it is a lazy sequence</span><br></code></pre></td></tr></table></figure><p>then this code is become below after <code>rest</code> executed:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">map</span></span> + [<span class="hljs-number">1</span> ..] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> ..] )<br></code></pre></td></tr></table></figure><p>As <code>map</code> generate lazy sequence, it is instructed to generate the first item of it, so by <code>map</code> these two lists, we got an item <code>1=(+ 1 0)</code> which is the result of both the first item of these two lists add together.<br>Then the <code>map</code> stop generate item as it have no instruction to do so.  Now after generate the new item <code>1</code> and concatenate it with <code>[0 1]</code>, our <code>fib-seq</code> now look like this:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">[<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1</span> ..]<br></code></pre></td></tr></table></figure><p>Pretty good. Now let’s touch the 4th item of <code>fib-seq</code> by <code>(nth fib-seq 4)</code>.<br>fib-seq find it contain no item with index <code>4</code>, but it found the third is cached so it will generate the <code>4th</code> item from <code>3rd</code> one.</p><p>Now thread move to <code>(map ...)</code> function and instruct map to hand out the second item of it.<br>map found it did not have No.2 item so it have to generate it.  and replace  <code>fib-seq</code> with real lazy seq:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">map</span></span> + (<span class="hljs-name"><span class="hljs-built_in">rest</span></span> [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1.</span>.]) [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1.</span>.] )<br></code></pre></td></tr></table></figure><p>Then of course <code>rest</code> get the rest of seq:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">map</span></span> + [<span class="hljs-number">1</span> <span class="hljs-number">1.</span>.] [<span class="hljs-number">0</span> <span class="hljs-number">1</span> <span class="hljs-number">1.</span>.] )<br></code></pre></td></tr></table></figure><p>Here the most tricky thing happened I think.<br><code>Map</code> add both the second rather than the first item of these lists:  </p><pre><code class="hljs">(map + [1 1..] [0 1 1..] )          ^       ^          | ----- |              |              +              2</code></pre><p>So the map could return <code>2</code> as its 2nd item so as to complete the instruction.  </p><p>The <code>lazy-seq</code> follow the same strategy in the follow item while instructed, and cache every generated item in memory for faster accessibility.</p><p>For this <code>Fibonacci number generator</code>, it just shift two list and add them one by one and recursively to generate required Fibonacci number like below:  </p><pre><code class="hljs">0 1 1 2 3 5 ..   1 1 2 3 5 ..</code></pre><p>Which of course is a very deft way to generate <code>Fibo</code>.  </p><h1 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h1><p>To sum up, from human’s view, lazy seq will generate item always from its last status&#x2F;position rather than starting from its initial state.</p><p>Please correct me if I am wrong, I am a newbie in <code>clojure</code> and I am eagerly to learn it well.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>good glossary</title>
    <link href="/2014/2014-09-04-good-glossary/"/>
    <url>/2014/2014-09-04-good-glossary/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Words below are some good English words that I think can used for replacing old style words.  </p><table><thead><tr><th>word</th><th align="right">explaination</th></tr></thead><tbody><tr><td>outstrip</td><td align="right">surpass; more than</td></tr><tr><td>matriculate</td><td align="right">admission by</td></tr><tr><td>quotidian</td><td align="right">daily life</td></tr><tr><td>repudiate</td><td align="right">reject</td></tr><tr><td>perfunctory</td><td align="right">casual</td></tr><tr><td>moratorium</td><td align="right">pause; suspend</td></tr><tr><td>gargantuan</td><td align="right">huge; vast</td></tr><tr><td>pulchritude</td><td align="right">gorgeous</td></tr><tr><td>defray</td><td align="right">pay money</td></tr><tr><td>ambivalent</td><td align="right">conflicted</td></tr><tr><td>veracious</td><td align="right">sincere</td></tr><tr><td>voracious</td><td align="right">greed</td></tr><tr><td>prowess</td><td align="right">outstanding bravery</td></tr><tr><td>subsidy</td><td align="right">allowance</td></tr><tr><td>wizen</td><td align="right">blight</td></tr><tr><td>vituperate</td><td align="right">revile scold rebuke</td></tr><tr><td>exult</td><td align="right">delight rejoice</td></tr><tr><td>riveting</td><td align="right">engaging fascinating absorbing</td></tr><tr><td>resurgence</td><td align="right">resurrection  reincarnation</td></tr><tr><td>slovenly</td><td align="right">casual unkempt seedy</td></tr><tr><td>supplicate</td><td align="right">entreat beg appeal</td></tr><tr><td>ubiquitous</td><td align="right">omnipresent, everywhere</td></tr><tr><td>beckon</td><td align="right">summon instruct</td></tr><tr><td>privation</td><td align="right">poor dearth</td></tr><tr><td>fret</td><td align="right">fuss agony</td></tr><tr><td>savant</td><td align="right">scholar</td></tr><tr><td>tentation</td><td align="right">hypothesis</td></tr><tr><td>penitent</td><td align="right">repentant  contrite remorseful</td></tr><tr><td>scoff</td><td align="right">jeer jibe gibe mock</td></tr><tr><td>deft</td><td align="right">nimble  dexterous proficient</td></tr><tr><td>conspire</td><td align="right">intrigue  collude</td></tr><tr><td>defray</td><td align="right">pay cover</td></tr><tr><td>inimical</td><td align="right">detrimental  antagonistic</td></tr><tr><td>malevolent</td><td align="right">malicious</td></tr><tr><td>unassailable</td><td align="right">impregnable  indisputable</td></tr><tr><td>stamina</td><td align="right">vigor   endurance</td></tr><tr><td>discreet</td><td align="right">careful  prudent</td></tr><tr><td>fallacious</td><td align="right">erroneous</td></tr><tr><td>ascendant</td><td align="right">advantage</td></tr><tr><td>crave</td><td align="right">desire</td></tr><tr><td>craven</td><td align="right">coward</td></tr><tr><td>temperate</td><td align="right">moderate</td></tr><tr><td>temper</td><td align="right">feeling</td></tr><tr><td>tempt</td><td align="right">lure entice seduce</td></tr><tr><td>tempest</td><td align="right">storm</td></tr><tr><td>tempo</td><td align="right">rhythm</td></tr><tr><td>vouch</td><td align="right">guarantee</td></tr><tr><td>euphoria</td><td align="right">happy felicitous</td></tr><tr><td>coddle</td><td align="right">pamper indulge</td></tr><tr><td>insomnia</td><td align="right">sleeplessness</td></tr><tr><td>somnolence</td><td align="right">drowsiness</td></tr><tr><td>inveigh</td><td align="right">castigate  denounce</td></tr><tr><td>inveigle</td><td align="right">coax  entrap</td></tr><tr><td>smatter</td><td align="right">know a little</td></tr><tr><td>address</td><td align="right">tackle cope combat resolve</td></tr><tr><td>surmise</td><td align="right">extrapolate</td></tr><tr><td>divulge</td><td align="right">leak</td></tr><tr><td>knotty</td><td align="right">difficult</td></tr><tr><td>pervade</td><td align="right">permeate diffuse</td></tr><tr><td>savory</td><td align="right">ambrosial</td></tr><tr><td>staunch</td><td align="right">reliable</td></tr><tr><td>munificent</td><td align="right">generous  bounteous</td></tr><tr><td>parry</td><td align="right">dodge</td></tr><tr><td>hie</td><td align="right">hasten rush</td></tr><tr><td>truculent</td><td align="right">aggressive</td></tr><tr><td>overt</td><td align="right">public</td></tr><tr><td>rectitude</td><td align="right">justice fair</td></tr><tr><td>belie</td><td align="right">conflict discrepancy</td></tr><tr><td>antiquated</td><td align="right">outdated obsolete</td></tr><tr><td>vicarious</td><td align="right">surrogate proxy agent</td></tr><tr><td>swindle</td><td align="right">cheat</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vim long line slowness</title>
    <link href="/2014/2014-09-04-vim-long-line-slowness/"/>
    <url>/2014/2014-09-04-vim-long-line-slowness/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Yes, it is very slow to have a long line copy or move within vim, which mostly due to the <code>syntax highlight</code> procedure as <a href="http://superuser.com/questions/302186/vim-scrolls-very-slow-when-a-line-is-to-long">explained</a><br>Just as mentioned, three enhancement methods are:  </p><ol><li>Turn off syntax highlighting with <code>:syntax off</code>.</li><li>Limit syntax highlighting with <code>:set synmaxcol=150</code> or some other value.</li><li>Break down your long line in smaller chunks with <code>:s/\s&lt;a/&lt;C-v&gt;&lt;Enter&gt;&lt;a</code>.</li></ol><p>Method above could address the long line slowness problem, I tested it already.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu install wired network driver</title>
    <link href="/2014/2014-09-01-ubuntu-install-wired-network-driver/"/>
    <url>/2014/2014-09-01-ubuntu-install-wired-network-driver/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Since at the installation at I chose to use wireless network, seems Ubuntu did not install driver for my wired network card.<br>Here I would like to introduce a simplest way to install some general wired network card driver, just by:  </p><pre><code class="hljs">sudo apt-get install linux-firmware-nonfree</code></pre><p>I assume this package could tackle with some other hardware problems.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>network</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my steps towards italiano</title>
    <link href="/2014/2014-08-25-my-steps-towards-italiano/"/>
    <url>/2014/2014-08-25-my-steps-towards-italiano/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I have to say the <code>Assassin Creed</code> makes me to believe it is a world for real hero who determined with what he want.<br>For my own road of assassin, I want to learn more about the computer science theory especially in database field.<br>But there still another thing I like the most which come from the influence of <code>Assassin Creed</code>, <code>Italiano</code>.<br>I want to explore Italy if I have this capability with my dear Lulu.<br>But first I need to learn Italiano.  </p><hr><ol><li>when <code>r</code> in between 2 vowels, it pronounce more like <code>d</code></li></ol><p>A &#x3D;&#x3D; the<br>a + il &#x3D;&#x3D;&gt; Al<br>A + l’ &#x3D;&#x3D;&gt; All’  </p><p>il &#x3D;&#x3D; the<br>but if <code>il</code> followed by a word that start with a vowel, <code>il</code> will be transformed into <code>l&#39;</code>  </p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>language</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apache port forward</title>
    <link href="/2014/2014-08-24-apache-port-forward/"/>
    <url>/2014/2014-08-24-apache-port-forward/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>You have to use <code>http://localhost:port</code> to visit <code>http://localhost</code>, to help you omit the <code>port</code> part, now let us learn to configure <code>apache2</code>.  </p><p>First to install apache2.  </p><pre><code class="hljs">sudo apt-get install apache2</code></pre><p>Then to add some modules that are used.   </p><pre><code class="hljs">a2enmod proxya2enmod proxy_http</code></pre><p>So now apache2 could proxy HTTP request.  </p><p>Enter <code>$APACHE_HOME/sites-available</code> folder, create a file with content below:  </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># This is to capture all :80 port to here</span><br>&lt;<span class="hljs-attribute">VirtualHost</span> *:<span class="hljs-number">80</span>&gt;<br>    <span class="hljs-comment">#This means to capture this domain name</span><br>    ServerName your.domain.name<br>    ProxyRequests Off<br>    ProxyPreserveHost On<br>    &lt;Proxy *&gt;<br>        Order deny,allow<br>        Allow from all<br>    &lt;/Proxy&gt;<br>    <span class="hljs-comment">#This is to enable forward and backward proxy</span><br>    <span class="hljs-comment">#First line is to proxy all request from http://domain/ onto http://domain:port/</span><br>    <span class="hljs-comment">#ProxyPass /example http://yet.another.domain.name:port/other-example</span><br>    ProxyPass / http://yet.another.domain.name:port/  <br>    ProxyPassReverse / http://yet.another.domain.name:port/<br>    &lt;Location /webapp&gt;<br>        Order allow,deny<br>        Allow from all<br>    &lt;/Location&gt;<br>    ErrorLog  /var/log/apache2/myapp.err<br>    CustomLog /var/log/apache2/myapp.log  common<br>&lt;/VirtualHost&gt;<br></code></pre></td></tr></table></figure><p>Well seems we have done a lot, now you need to symbolic link this file to <code>$APACHE_HOME/sites-enabled</code>  </p><pre><code class="hljs">cd $APACHE_HOME/sites-enabledsudo ln -s ../sites-availables .</code></pre><p>Now just reload apache by:  </p><pre><code class="hljs">sudo service apache2 reload</code></pre><p>To see if it works!<br>Cong if you got it done, along integrated with <a href="/operation/2014/08/24/tomcat-domain-name-to-folder-mapping/"><code>tomcat folder mapping</code></a>, now we could use <code>http://domain.name</code> to visit our application which originally needs <code>http://localhost:port/appname/</code></p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>install local jar to local repository</title>
    <link href="/2014/2014-08-24-install-local-jar-to-local-repository/"/>
    <url>/2014/2014-08-24-install-local-jar-to-local-repository/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Well it sometimes useful to install jar files that create or download directly to local maven repository.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn install:install-file \<br>        -Dfile=&lt;path-to-file&gt; \<br>        -DgroupId=&lt;group-id&gt; \<br>        -DartifactId=&lt;artifact-id&gt; \<br>        -Dversion=&lt;version&gt; \<br>        -Dpackaging=&lt;packaging&gt; \<br>        -DgeneratePom=true<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tomcat domain name to folder mapping</title>
    <link href="/2014/2014-08-24-tomcat-domain-name-to-folder-mapping/"/>
    <url>/2014/2014-08-24-tomcat-domain-name-to-folder-mapping/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>If not set domain name mapping, we could only use <code>localhost:port/appbase/path</code> to access our web application.<br>Here the domain name is mapped onto path, which is the root folder of our application.  </p><p>You need to add a <code>Host</code> tag just in the same level of the <code>localhost</code> one, or you could add an extra <code>Service</code> tag to use another port.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Host</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;you.domain.name&quot;</span>  <span class="hljs-attr">appBase</span>=<span class="hljs-string">&quot;the/path/to/app&quot;</span> <span class="hljs-attr">unpackWARs</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">autoDeploy</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">xmlValidation</span>=<span class="hljs-string">&quot;false&quot;</span> <span class="hljs-attr">xmlNamespaceAware</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--the appBase here is relative path, it use $CATALINA_HOME by default--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;.&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--deliberately use empty path to set specified folder as root rather than ROOT folder--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Valve</span> <span class="hljs-attr">className</span>=<span class="hljs-string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="hljs-attr">directory</span>=<span class="hljs-string">&quot;logs&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">prefix</span>=<span class="hljs-string">&quot;access_log.&quot;</span> <span class="hljs-attr">suffix</span>=<span class="hljs-string">&quot;.log&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%h %l %u %t <span class="hljs-symbol">&amp;quot;</span>%r<span class="hljs-symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Host</span>&gt;</span><br></code></pre></td></tr></table></figure><p>After this, deploy your application just right at the <code>appBase</code> attribution indicated, for instance, I deploy my application <code>rugal</code> under <code>$CATALINA_HOME/webapps</code>, hence the appBase is <code>webapps/rugal</code></p><p>Now make sure everything on the go then restart tomcat.<br>Here, of course you have to point the A record of you domain name to specific IP, I mean, the machine you have just configured.<br>See if <code>you.domain.name:port/path</code> could get the right app?  It is domain name mapping that help you implicitly map onto <code>the/path/to/app</code> so you could omit the <code>app</code> in original URL.  </p><p>But this still need to specify the <code>port</code>, to address it, you could either configure <code>port</code> attribution of <code>Service</code> tag with <code>80</code> if not occupied already, or with some <a href="!--swig%EF%BF%BC1--">port forward</a> .</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>farewell state street global advisor</title>
    <link href="/2014/2014-07-31-farewell-state-street-global-advisor/"/>
    <url>/2014/2014-07-31-farewell-state-street-global-advisor/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Dear Friends:</p><p>As many of you may know today is my last day at <code>SSgA</code>. I had a wonderful run for the past 8 months working with most talented group of people, it is very fortunate to have this opportunity to work with some of the heaviest projects during this time. I am very proud to be part of you.<br>As my first job in my life, it is rather impressive to have such a harmony working environment to work in, everyone wears gentle and warm smile. I feel release and crave for working here.<br>I have met so many great people in the past time; I want to send my sincerest gratitude to you, my manager: Wei Biao, you are so experienced and considered as expert; my helpful and enthusiastic colleagues Wang Xin, Tao ShuangLiang, Ding Han, cherubic Celia, my CRS team, the QA team for all the great support. Thank you so much for giving me the opportunity to be part of this great team. It is you that make me believe there must be such a perfect place that filled with gentle people like you.   </p><p>Each person has a disparate fate and destiny. With my own belief, I am destined and willing to tackle with harsh dilemmas in my life, which many people may considered as <code>crazy</code>.<br>I never reckon high salary or best facilities could do any benefit for the realization of my personal ideal in China, compare with those above, I prefer things that seems hard to deal with but will eventually purify and upgrade me, like “DBA” and “Study abroad”.  </p><p>I personally love the feel of reincarnation, again and over again, which is to know the higher mountain, the broader horizon, the cleverer and more ambitious people that I can meet, the larger data set I could address in the future, to surprise me each day when I wake up with better impression to this world. It is this feeling that drives me persevering endeavors over years.<br>Now it is the time to continue this trip, for the glory liberty, for the spectacular dream.  </p><p>Bookmark and visit <a href="http://rugal.ga/">rugal.ga</a> for my quotidian updates if you do like me, it carries almost all my basic contact information and recent meditation.<br>I do not like to use so many prevalent IM softwares except for QQ (<code>359788955</code>).<br>Hence it is best to keep in touch via <a href="mailto:ryujinwrath">gmail</a>, I would check mailbox frequently.  </p><p>Farewell my friend, I will miss you all; wish you all the best for the future, to pursue your dream, be you own.  </p><hr><p>Sincere  </p><p>Rugal Bernstein  </p><p>2014-07-31 </p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>java remote invoke</title>
    <link href="/2014/2014-07-30-java-remote-invoke/"/>
    <url>/2014/2014-07-30-java-remote-invoke/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Since <code>IPC</code> was first mentioned, many methods and protocals that involving <code>inter-process call</code> published, like <code>RPC</code>, <code>Web Service</code> etc.,<br>But actually, those are all another format of <code>IPC</code>, the difference is the <code>processes</code> that will be invoked is remote or local.<br>Here I want to make a summary, especially in Java:  </p><h3 id="RPC-is-a-kind-of-IPC"><a href="#RPC-is-a-kind-of-IPC" class="headerlink" title="RPC is a kind of IPC"></a>RPC is a kind of IPC</h3><p>When program statements that use RPC are compiled into an executable program, a stub is included in the compiled code that acts as the representative of the remote procedure code.<br>When the program is run and the procedure call is issued, the stub receives the request and forwards it to a client runtime program in the local computer. The client runtime program has the knowledge of how to address the remote computer and server application and sends the message across the network that requests the remote procedure.<br>Similarly, the server includes a runtime program and stub that interface with the remote procedure itself. Results are returned the same way.</p><h3 id="JMI"><a href="#JMI" class="headerlink" title="JMI"></a>JMI</h3><p>Java also provide such kind of remote invocation, <code>JMI</code> means to invoke a Java method in remote side. This technique are used in <code>EJB</code> suite, which ius treated as a very heavy method.  </p><h3 id="Web-Service"><a href="#Web-Service" class="headerlink" title="Web Service"></a>Web Service</h3><p>With the introduction of <code>Web Service</code>, developers enable to remotely invoke method in a easy way.  </p><h3 id="Java-Web-Service"><a href="#Java-Web-Service" class="headerlink" title="Java Web Service"></a>Java Web Service</h3><ol><li>big web service: <code>JAX-WS</code> : <code>javax.xml.ws</code><ol><li><code>SOAP</code> (An XML architecture) based.</li><li>Using <code>JAX-WS</code> to determine <code>Java-to-WSDL</code> Mapping.</li><li>Publish <code>WSDL</code> as syntactical definition interface.</li></ol></li><li>RESTful web service:  <code>JAX-RS</code><ol><li>HTTP based.</li><li>Using <code>JAX-RS</code> to easy binding.</li><li>Far lightweight and easy integrating.</li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>install and configure hbase</title>
    <link href="/2014/2014-07-28-install-and-configure-hbase/"/>
    <url>/2014/2014-07-28-install-and-configure-hbase/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="premise"><a href="#premise" class="headerlink" title="premise"></a>premise</h1><p>I already installed hadoop 2.4.0 with yarn, with hadoop configuration in <code>core-site.xml</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.default.name<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="download"><a href="#download" class="headerlink" title="download"></a>download</h1><p><a href="http://www.apache.org/dyn/closer.cgi/hbase/">hbase</a>  </p><h1 id="install"><a href="#install" class="headerlink" title="install"></a>install</h1><p>Move to installation path</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxf hbase-0.98.4-hadoop2-bin.tar.gz<br>sudo mv hbase-0.98.4-hadoop2-bin  /usr/local/hbase<br>cd /usr/local/hbase<br></code></pre></td></tr></table></figure><p>Set runtime environment</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64<br>export HADOOP_INSTALL=/usr/local/hadoop<br>export HADOOP_MAPRED_HOME=$HADOOP_INSTALL<br>export HADOOP_COMMON_HOME=$HADOOP_INSTALL<br>export HADOOP_HDFS_HOME=$HADOOP_INSTALL<br>export YARN_HOME=$HADOOP_INSTALL<br>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_INSTALL/lib/native<br>export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_INSTALL/lib&quot;<br>export PATH=$PATH:$HADOOP_INSTALL/bin:$HADOOP_INSTALL/sbin<br><br>export HBASE_HOME=/usr/local/hbase<br>export PATH=$HBASE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><h1 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h1><p>My goal is to setup a pseudo distributed type with only one node but connected with HDFS.<br>So I need to fill with HDFS port and path to connect with HDFS.<br>In <code>conf/hbase-site.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.zookeeper.property.dataDir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/opt/zookeeper<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.cluster.distributed<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hbase.rootdir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://localhost:9000/user/hbase<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>HBase use <code>ZooKeeper</code> to manage cluster and resouce state, you need to specify the <code>ZK</code> temporary file to store voting status. Here my zookeeper path is <code>/opt/zookeeper</code><br>As you can see that my hbase path in <code>HDFS</code> is <code>/user/hbase</code>, hence we need to create and grant write privilege on this path for hbase.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hadoop fs -mkdir /user/zookeeper<br>hadoop fs -chmod 775  /user/zookeeper<br></code></pre></td></tr></table></figure><p>Now our simplest single node distributed hbase completed.</p><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><p>Of course you need HDFS started, which I skip here.  </p><pre><code class="hljs">start-hbase.sh</code></pre><p>If everything runs smoothly, this will command with only output few lines, but you could find log file in your <code>$HBASE_HOME/logs</code></p><pre><code class="hljs">[master:localhost:60000] master.HMaster: Master has completed initialization</code></pre><p>Log above means the success of startup of HBase, cong!</p><h1 id="basic-usage"><a href="#basic-usage" class="headerlink" title="basic usage"></a>basic usage</h1><p>Now just use few command to get in touch with hbase.<br>Since hbase is column oriented nosql database, you have to adjust to its column family style of organization of data.  </p><pre><code class="hljs">hbase shell</code></pre><p>Now you are able to enter hbase shell, let us rock.  </p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;cf&#x27;</span>  --<span class="hljs-keyword">create</span> table named test <span class="hljs-keyword">under</span> default <span class="hljs-keyword">namespace</span>, <span class="hljs-keyword">and</span> column family named cf<br><br>list <span class="hljs-string">&#x27;test&#x27;</span>  -- <span class="hljs-keyword">show</span> available table<br><br>put <span class="hljs-string">&#x27;test&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;cf:1&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>  --<span class="hljs-keyword">Insert</span> one record <span class="hljs-keyword">into</span> table<br>--Note the <span class="hljs-keyword">first</span> parameter <span class="hljs-keyword">is</span> of course table name<br>--The next one <span class="hljs-keyword">is</span> just the <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span><br>--The third one <span class="hljs-keyword">is</span> column family <span class="hljs-keyword">key</span>, which <span class="hljs-keyword">is</span> <span class="hljs-keyword">to</span> specify which column family this column belong <span class="hljs-keyword">to</span>, <span class="hljs-keyword">as</span> you declared <span class="hljs-keyword">in</span> table definition that this column <span class="hljs-keyword">is</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> cf<br>--You must put name that <span class="hljs-keyword">is</span> <span class="hljs-keyword">start</span> <span class="hljs-keyword">with</span> what column definition <span class="hljs-keyword">is</span>, here <span class="hljs-keyword">is</span> cf:  <br>--<span class="hljs-keyword">Then</span> the <span class="hljs-keyword">last</span> one <span class="hljs-keyword">is</span> the <span class="hljs-keyword">value</span> of this row <br><br>scan <span class="hljs-string">&#x27;test&#x27;</span> --scan whole table <span class="hljs-keyword">right</span> away<br><br>get <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>  --get row data of a table<br><br>--<span class="hljs-keyword">To</span> <span class="hljs-keyword">drop</span> a table, you need <span class="hljs-keyword">to</span> <span class="hljs-keyword">do</span> <span class="hljs-keyword">like</span> this<br>disable <span class="hljs-string">&#x27;test&#x27;</span><br>enable <span class="hljs-string">&#x27;test&#x27;</span><br></code></pre></td></tr></table></figure><p>Press <code>CTRL+C</code> for exit hbase shell.  </p><p>execute command below to stop hbase server, this will automatically stop zookeeper either.</p><pre><code class="hljs">stop-hbase.sh</code></pre>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>install and configure hive</title>
    <link href="/2014/2014-07-28-install-and-configure-hive/"/>
    <url>/2014/2014-07-28-install-and-configure-hive/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Personally, the configuration procedure of Hive is much easier than Hbase.  </p><h1 id="download"><a href="#download" class="headerlink" title="download"></a>download</h1><p><a href="http://www.apache.org/dyn/closer.cgi/hive/">hive</a>  </p><h1 id="install"><a href="#install" class="headerlink" title="install"></a>install</h1><p>Move to installation folder, copy configuration files  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxf apache-hive-0.13.1-bin.tar.gz<br>mv apache-hive-0.13.1 /usr/local/hive<br>cd /usr/local/hive/conf<br>cp hive-default.xml.template hive-site.xml<br>cp hive-log4j.properties.template hive-log4j.properties<br></code></pre></td></tr></table></figure><p>update env var:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">export JAVA_HOME=/usr/lib/jvm/java-7-openjdk-amd64<br>export HADOOP_INSTALL=/usr/local/hadoop<br>export PATH=$PATH:$HADOOP_INSTALL/bin:$HADOOP_INSTALL/sbin<br>export HADOOP_MAPRED_HOME=$HADOOP_INSTALL<br>export HADOOP_COMMON_HOME=$HADOOP_INSTALL<br>export HADOOP_HDFS_HOME=$HADOOP_INSTALL<br>export YARN_HOME=$HADOOP_INSTALL<br>export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_INSTALL/lib/native<br>export HADOOP_OPTS=&quot;-Djava.library.path=$HADOOP_INSTALL/lib&quot;<br><br>export HIVE_HOME=/usr/local/hive<br>export PATH=$HIVE_HOME/bin:$PATH<br></code></pre></td></tr></table></figure><h1 id="configure"><a href="#configure" class="headerlink" title="configure"></a>configure</h1><p>Actually this configuration comprise of two parts, first one is call <code>metastore</code>, in which the data structure and definition stored.<br>Another is the so called data stored in HDFS.  </p><p>Hive treat <code>metastore</code> into RDBMS, here I want to use <code>postgresql</code>.  </p><p>setup hive to store metadata into <code>postgresql</code>, edit <code>$HIVE_HOME/conf/hive-site.xml</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionURL<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>jdbc:postgresql://localhost:5432/postgres<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>JDBC connect string for a JDBC metastore<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionDriverName<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>org.postgresql.Driver<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Driver class name for a JDBC metastore<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>javax.jdo.option.ConnectionPassword<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>123456<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>password to use against metastore database<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>hive.metastore.warehouse.dir<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>/user/hive/warehouse<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>location of default database for the warehouse<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><p>create related tables in postgresql.<br>This schema file is under <code>$HIVE_HOME/scripts</code>, find the one that fit your requirement.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">psql -Upostgres -h127.0.0.1 -f hive-schema-0.9.0.postgres.sql<br></code></pre></td></tr></table></figure><p>Download the JDBC driver for postgresql and move it into <code>$HIVE_HOME/lib</code></p><p>Now just create folders.<br>Create directories on HDFS for HIVE.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$</span><span class="language-bash">HADOOP_HOME/bin/hadoop fs -mkidr /tmp</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">HADOOP_HOME/bin/hadoop fs -mkidr /user/hive/warehouse</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">HADOOP_HOME/bin/hadoop fs -<span class="hljs-built_in">chmod</span> g+w /tmp</span><br><span class="hljs-meta prompt_">$</span><span class="language-bash">HADOOP_HOME/bin/hadoop fs -<span class="hljs-built_in">chmod</span> g+w /user/hive/warehouse</span><br></code></pre></td></tr></table></figure><h1 id="start"><a href="#start" class="headerlink" title="start"></a>start</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">startup metastore service</span><br>hive --service metastore &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">startup hive server</span><br>hive --service hiveserver &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">launch hive interactive client</span><br>hive shell<br></code></pre></td></tr></table></figure><h1 id="basic-usage"><a href="#basic-usage" class="headerlink" title="basic usage"></a>basic usage</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">hive&gt; </span><span class="language-bash">CREATE TABLE student (name string, value string);</span><br><span class="hljs-meta prompt_">hive&gt; </span><span class="language-bash">LOAD DATA LOCAL INPATH <span class="hljs-string">&#x27;/home/rugal/data/data.txt&#x27;</span> OVERWRITE INTO TABLE t_hive ;</span><br></code></pre></td></tr></table></figure><p>After the creation of table and the import, now check the HDFS for imported data.  </p><pre><code class="hljs">hadoop fs -cat /user/hive/warehouse/t_hive/t_hive.txt</code></pre><p>Seems good, Cong!<br>For further steps, please visit <a href="http://hive.apache.org/">official</a>.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hadoop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>regularized learning algorthm</title>
    <link href="/2014/2014-07-27-regularized-learning-algorthm/"/>
    <url>/2014/2014-07-27-regularized-learning-algorthm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><p>There will have many problems when training machine learning algorithm.  </p><ol><li><code>under fitting problem</code><br> Feature Polynomial too low for fitting target training set, unable to meet training set’s performance, let alone future data.  </li><li><code>overfitting problem</code><br> Feature polynomial too high for fitting target training set, means fit training set’s performance too well, but unable to predict future data.</li></ol><p>Regularization could ameliorate or to reduce over-fitting problem.  </p><h3 id="premise"><a href="#premise" class="headerlink" title="premise"></a>premise</h3><ol><li>$m$ is the number of training set records.</li><li>$n$ is the number of features</li><li>$\lambda$ is penality value for reducing high polynomial features’ effect, with larger this value is, smaller the effect is, but learning algorithm turn out to under fitting if $\lambda$ too high.</li></ol><hr><h2 id="regularized-Linear-regression"><a href="#regularized-Linear-regression" class="headerlink" title="regularized Linear regression"></a>regularized Linear regression</h2><blockquote><p>Cost function</p></blockquote><p>$$<br>J(\theta)&#x3D;\frac{1}{2m}\left[ \sum^{m}<em>{i&#x3D;1} (h</em>{\theta}(x^{(i)})-y^{(i)})^2 + \lambda \sum^{n}_{j&#x3D;1} \theta^2_j  \right]<br>$$</p><blockquote><p>Gradient descend</p></blockquote><p>$$<br>\begin{aligned}<br>\theta_0 &amp;:&#x3D;\theta_0-\alpha \frac{1}{m}\sum^{m}<em>{i&#x3D;1}(h</em>{\theta}(x^{(i)})-y^{(i)})x^{(i)}<em>0 \<br>\theta_j &amp;:&#x3D;\theta_j-\alpha \left[\frac{1}{m}\sum^{m}</em>{i&#x3D;1}(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}_j + \frac{\lambda}{m}\theta_j \right] \quad \text{(j&#x3D;1,2,3…,n)}<br>\end{aligned}<br>$$</p><h2 id="regularized-logistic-regression"><a href="#regularized-logistic-regression" class="headerlink" title="regularized logistic regression"></a>regularized logistic regression</h2><blockquote><p>Cost function</p></blockquote><p>$$<br>J(\theta)&#x3D;-\left[ \frac{1}{m} \sum^{m}<em>{i&#x3D;1} y^{(i)}  \log h_\theta(x^{(i)})+(1-y^{(i)}) \log(1-h_\theta(x^{(i)})) \right] + \frac{\lambda}{2m}\sum^{n}</em>{j&#x3D;1} \theta^2_j<br>$$</p><blockquote><p>Gradient descend</p></blockquote><p>$$<br>\begin{aligned}<br>\theta_0 &amp;:&#x3D;\theta_0-\alpha \frac{1}{m}\sum^{m}<em>{i&#x3D;1}(h</em>{\theta}(x^{(i)})-y^{(i)})x^{(i)}<em>0 \<br>\theta_j &amp;:&#x3D;\theta_j-\alpha \left[\frac{1}{m}\sum^{m}</em>{i&#x3D;1}(h_{\theta}(x^{(i)})-y^{(i)})x^{(i)}<em>j + \frac{\lambda}{m}\theta_j \right] \quad \text{(j&#x3D;1,2,3…,n)} \<br>\end{aligned} \<br>h</em>{\theta}(x)&#x3D;\frac{1}{1+e^{-\theta^{T}x}}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>logistic regression</title>
    <link href="/2014/2014-07-17-logistic-regression/"/>
    <url>/2014/2014-07-17-logistic-regression/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script><script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script><h2 id="Given"><a href="#Given" class="headerlink" title="Given"></a>Given</h2><p>We have training data set </p><p>$$<br>\begin{aligned}<br>&amp;(x^{(1)}, y^{(1)}) \<br>&amp;(x^{(2)}, y^{(2)}) \<br>&amp;(x^{(3)}, y^{(3)}) \<br>&amp;……\<br>&amp;(x^{(m)}, y^{(m)})<br>\end{aligned}<br>$$</p><p>Here the super script $(i)$ denoted as i-th traininng example.</p><p>We want to train a model with appropriate $w$ and $b$ so that the prediction $\hat{y}^{(i)} \approx y^{(i)}$</p><h2 id="Hypothesis"><a href="#Hypothesis" class="headerlink" title="Hypothesis"></a>Hypothesis</h2><p>We define it as linear model<br>$$<br>z^{(i)} &#x3D; w^Tx^{(i)} + b<br>$$</p><p>We use <code>sigmoid</code> function to converge in between 0 and 1<br>$$<br>sigmoid(z) &#x3D; \frac{1}{1 + e^{-z}}<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">z</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Compute the sigmoid of z</span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    z -- A scalar or numpy array of any size.</span><br><span class="hljs-string">    Return:</span><br><span class="hljs-string">    s -- sigmoid(z)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br><br>    <span class="hljs-comment">### START CODE HERE ### (≈ 1 line of code)</span><br>    s = <span class="hljs-number">1</span> / (<span class="hljs-number">1</span> + np.exp(-<span class="hljs-number">1</span> * z))<br>    <span class="hljs-comment">### END CODE HERE ###</span><br>    <span class="hljs-keyword">return</span> s<br></code></pre></td></tr></table></figure><h2 id="Initialize-parameter"><a href="#Initialize-parameter" class="headerlink" title="Initialize parameter"></a>Initialize parameter</h2><p>Set both $w$ and $b$ to $0$<br>Note that <code>w.shape = [m, 1]</code>, where <code>m</code> is the number of training example.<br>So <code>w</code> is a <code>m</code> by <code>1</code> matrix</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">initialize_with_zeros</span>(<span class="hljs-params">dim</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This function creates a vector of zeros of shape (dim, 1) for w and initializes b to 0.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Argument:</span><br><span class="hljs-string">    dim -- size of the w vector we want (or number of parameters in this case)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    w -- initialized vector of shape (dim, 1)</span><br><span class="hljs-string">    b -- initialized scalar (corresponds to the bias)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    <span class="hljs-comment">### START CODE HERE ### (≈ 1 line of code)</span><br>    w = np.zeros([dim, <span class="hljs-number">1</span>])<br>    b = <span class="hljs-number">0</span><br>    <span class="hljs-comment">### END CODE HERE ###</span><br><br>    <span class="hljs-keyword">assert</span>(w.shape == (dim, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">assert</span>(<span class="hljs-built_in">isinstance</span>(b, <span class="hljs-built_in">float</span>) <span class="hljs-keyword">or</span> <span class="hljs-built_in">isinstance</span>(b, <span class="hljs-built_in">int</span>))<br>    <br>    <span class="hljs-keyword">return</span> w, b<br></code></pre></td></tr></table></figure><h2 id="Predict-Value"><a href="#Predict-Value" class="headerlink" title="Predict Value"></a>Predict Value</h2><p>This is the predict value from current model<br>$$<br>\hat{y}^{(i)} &#x3D; sigmoid(z^{(i)})<br>$$</p><p>Also here we note that<br>$$<br>\frac{\partial \hat{y}}{\partial z} &#x3D; \hat{y} (1 - \hat{y})<br>$$</p><h2 id="Loss-Function"><a href="#Loss-Function" class="headerlink" title="Loss Function"></a>Loss Function</h2><p>Now we need to calculate the difference between actual and expected values, here we define the function to compute the different by using $\log$ in logistic regression, rather than <code>square difference</code>. This is because in <code>optimization phase</code>, the <code>square difference equation</code> will result into many local optimal problem.</p><p>$$<br>\mathcal{L}(\hat{y}^{(i)}, y^{(i)}) &#x3D; \left{<br>  \begin{array}{l l}<br>    -\log(\hat{y}^{(i)}) &amp; \quad \text{if $y &#x3D; 1$  } \<br>    -\log(1-\hat{y}^{(i)})   &amp;\quad \text{if $y &#x3D; 0$ } \<br>  \end{array} \right.<br>$$</p><p>The equation above can be simplified as below:</p><p>$$<br>\mathcal{L}(\hat{y}^{(i)}, y^{(i)}) &#x3D; - (y^{(i)} \log  \hat{y}^{(i)} + (1 - y^{(i)}) \log (1 - \hat{y}^{(i)}))<br>$$</p><h2 id="Cost-Function"><a href="#Cost-Function" class="headerlink" title="Cost Function"></a>Cost Function</h2><p>Now we have the loss value for each training example, we want to sum them so that we have an overall estimation about how much it cost for this model</p><p>$$<br>J &#x3D; \frac{1}{m} \sum^{m}_{i &#x3D; 1} \mathcal{L}(\hat{y}^{(i)}, y^{(i)})<br>$$<br>By doing this we know the average loss of this model</p><h2 id="Propagation"><a href="#Propagation" class="headerlink" title="Propagation"></a>Propagation</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">propagate</span>(<span class="hljs-params">w, b, X, Y</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Implement the cost function and its gradient for the propagation explained above</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    w -- weights, a numpy array of size (num_px * num_px * 3, 1)</span><br><span class="hljs-string">    b -- bias, a scalar</span><br><span class="hljs-string">    X -- data of size (num_px * num_px * 3, number of examples)</span><br><span class="hljs-string">    Y -- true &quot;label&quot; vector (containing 0 if non-cat, 1 if cat) of size (1, number of examples)</span><br><span class="hljs-string"></span><br><span class="hljs-string">    Return:</span><br><span class="hljs-string">    cost -- negative log-likelihood cost for logistic regression</span><br><span class="hljs-string">    dw -- gradient of the loss with respect to w, thus same shape as w</span><br><span class="hljs-string">    db -- gradient of the loss with respect to b, thus same shape as b</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Tips:</span><br><span class="hljs-string">    - Write your code step by step for the propagation. np.log(), np.dot()</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    m = X.shape[<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-comment"># FORWARD PROPAGATION (FROM X TO COST)</span><br>    <span class="hljs-comment">### START CODE HERE ### (≈ 2 lines of code)</span><br>    <span class="hljs-comment">#w.shape = [num, 1] X.shape = [num, NOE]</span><br>    A = sigmoid(np.dot(w.T, X) + b).T        <span class="hljs-comment">#A.shape = [NOE, 1]  # compute activation</span><br>    <span class="hljs-comment"># Y.shape = [1, NOE]</span><br>    cost = (np.dot(Y, np.log(A)) + np.dot((<span class="hljs-number">1</span> - Y), np.log(<span class="hljs-number">1</span> - A))) / m * -<span class="hljs-number">1</span>   <span class="hljs-comment"># compute cost</span><br>    <span class="hljs-comment">### END CODE HERE ###</span><br>    <br>    <span class="hljs-comment"># BACKWARD PROPAGATION (TO FIND GRAD)</span><br>    <span class="hljs-comment">### START CODE HERE ### (≈ 2 lines of code)</span><br>    dw = np.dot(X, (A.T - Y).T) / m<br>    db = np.dot(A.T - Y, np.ones([m])) / m<br>    <span class="hljs-comment">### END CODE HERE ###</span><br><br>    <span class="hljs-keyword">assert</span>(dw.shape == w.shape)<br>    <span class="hljs-keyword">assert</span>(db.dtype == <span class="hljs-built_in">float</span>)<br>    cost = np.squeeze(cost)<br>    <span class="hljs-keyword">assert</span>(cost.shape == ())<br>    <br>    grads = &#123;<span class="hljs-string">&quot;dw&quot;</span>: dw,<br>             <span class="hljs-string">&quot;db&quot;</span>: db&#125;<br>    <br>    <span class="hljs-keyword">return</span> grads, cost<br></code></pre></td></tr></table></figure><h3 id="Forward"><a href="#Forward" class="headerlink" title="Forward"></a>Forward</h3><p>We move forward by computing the loss function and cost function.</p><h3 id="Backward"><a href="#Backward" class="headerlink" title="Backward"></a>Backward</h3><p>In order to compute backward, we need to calculate the derivitive from loss function and moving backward.<br>Here we add some mathematical explanation for the equation above:</p><p>$$<br>\begin{aligned}<br>d\hat{y} &amp;&#x3D; \frac{\partial \mathcal{L}(\hat{y}, y)}{\partial \hat{y}} \<br>&amp;&#x3D; \frac{1-y}{1 - \hat{y}} -\frac{y}{\hat{y}}<br>\end{aligned}<br>$$</p><p>Here we use chain rule to calculate the $dz$</p><p>$$<br>\begin{aligned}<br>dz &amp;&#x3D; \frac{\partial \mathcal{L}(\hat{y}, y)}{\partial z} \<br>&amp;&#x3D; \frac{\partial \mathcal{L}(\hat{y}, y)}{\partial \hat{y}}  \times  \frac{\partial \hat{y}}{\partial z} \<br>&amp;&#x3D; (\frac{1-y}{1 - \hat{y}} -\frac{y}{\hat{y}}) \times [\hat{y} (1 - \hat{y})] \<br>&amp;&#x3D; \hat{y} - y<br>\end{aligned}<br>$$</p><p>We do the same to calculate $dw$</p><p>$$<br>\begin{aligned}<br>dw_i &amp;&#x3D; \frac{\partial \mathcal{L}(\hat{y}, y)}{\partial w_i} \<br>&amp;&#x3D; x_i \times  dz\<br>\therefore dw &amp;&#x3D; \frac{1}{m} X(\hat{Y}-Y)^T<br>\end{aligned}<br>$$</p><p>Same technique applies to $db$ as well</p><p>$$<br>\begin{aligned}<br>db &amp;&#x3D; \frac{\partial \mathcal{L}(\hat{y}, y)}{\partial b} \<br>&amp;&#x3D; dz \<br>\therefore db &amp;&#x3D; \frac{1}{m} \sum^{m}_{i&#x3D;1} (\hat{y}^{(i)} - y^{(i)})<br>\end{aligned}<br>$$</p><h2 id="Optimization"><a href="#Optimization" class="headerlink" title="Optimization"></a>Optimization</h2><p>Here we apply the <code>learning rate</code> to $dw$ and $db$ so that they move toward the optimal value</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">optimize</span>(<span class="hljs-params">w, b, X, Y, num_iterations, learning_rate, print_cost = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    This function optimizes w and b by running a gradient descent algorithm</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    w -- weights, a numpy array of size (num_px * num_px * 3, 1)</span><br><span class="hljs-string">    b -- bias, a scalar</span><br><span class="hljs-string">    X -- data of shape (num_px * num_px * 3, number of examples)</span><br><span class="hljs-string">    Y -- true &quot;label&quot; vector (containing 0 if non-cat, 1 if cat), of shape (1, number of examples)</span><br><span class="hljs-string">    num_iterations -- number of iterations of the optimization loop</span><br><span class="hljs-string">    learning_rate -- learning rate of the gradient descent update rule</span><br><span class="hljs-string">    print_cost -- True to print the loss every 100 steps</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    params -- dictionary containing the weights w and bias b</span><br><span class="hljs-string">    grads -- dictionary containing the gradients of the weights and bias with respect to the cost function</span><br><span class="hljs-string">    costs -- list of all the costs computed during the optimization, this will be used to plot the learning curve.</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Tips:</span><br><span class="hljs-string">    You basically need to write down two steps and iterate through them:</span><br><span class="hljs-string">        1) Calculate the cost and the gradient for the current parameters. Use propagate().</span><br><span class="hljs-string">        2) Update the parameters using gradient descent rule for w and b.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    costs = []<br>    <br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_iterations):<br>        <br>        <br>        <span class="hljs-comment"># Cost and gradient calculation (≈ 1-4 lines of code)</span><br>        <span class="hljs-comment">### START CODE HERE ### </span><br>        grads, cost = propagate(w, b, X, Y)<br>        <span class="hljs-comment">### END CODE HERE ###</span><br>        <br>        <span class="hljs-comment"># Retrieve derivatives from grads</span><br>        dw = grads[<span class="hljs-string">&quot;dw&quot;</span>]<br>        db = grads[<span class="hljs-string">&quot;db&quot;</span>]<br>        <br>        <span class="hljs-comment"># update rule (≈ 2 lines of code)</span><br>        <span class="hljs-comment">### START CODE HERE ###</span><br>        w = w - learning_rate * dw<br>        b = b - learning_rate * db<br>        <span class="hljs-comment">### END CODE HERE ###</span><br>        <br>        <span class="hljs-comment"># Record the costs</span><br>        <span class="hljs-keyword">if</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            costs.append(cost)<br>        <br>        <span class="hljs-comment"># Print the cost every 100 training iterations</span><br>        <span class="hljs-keyword">if</span> print_cost <span class="hljs-keyword">and</span> i % <span class="hljs-number">100</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;Cost after iteration %i: %f&quot;</span> %(i, cost))<br>    <br>    params = &#123;<span class="hljs-string">&quot;w&quot;</span>: w,<br>              <span class="hljs-string">&quot;b&quot;</span>: b&#125;<br>    <br>    grads = &#123;<span class="hljs-string">&quot;dw&quot;</span>: dw,<br>             <span class="hljs-string">&quot;db&quot;</span>: db&#125;<br>    <br>    <span class="hljs-keyword">return</span> params, grads, costs<br></code></pre></td></tr></table></figure><h2 id="Predict"><a href="#Predict" class="headerlink" title="Predict"></a>Predict</h2><p>Once we are comfortable with the trained model, now is to test the performance of this one with test data.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">w, b, X</span>):<br>    <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    Predict whether the label is 0 or 1 using learned logistic regression parameters (w, b)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    w -- weights, a numpy array of size (num_px * num_px * 3, 1)</span><br><span class="hljs-string">    b -- bias, a scalar</span><br><span class="hljs-string">    X -- data of size (num_px * num_px * 3, number of examples)</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    Y_prediction -- a numpy array (vector) containing all predictions (0/1) for the examples in X</span><br><span class="hljs-string">    &#x27;&#x27;&#x27;</span><br>    <br>    m = X.shape[<span class="hljs-number">1</span>]<br>    Y_prediction = np.zeros((<span class="hljs-number">1</span>,m))<br>    w = w.reshape(X.shape[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>)<br>    <br>    <span class="hljs-comment"># Compute vector &quot;A&quot; predicting the probabilities of a cat being present in the picture</span><br>    <span class="hljs-comment">### START CODE HERE ### (≈ 1 line of code)</span><br>    A = sigmoid(np.dot(w.T, X) + b)  <span class="hljs-comment">#A.shape = [NOE, 1]</span><br>    <span class="hljs-comment">### END CODE HERE ###</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(A.shape[<span class="hljs-number">1</span>]):<br>        <br>        <span class="hljs-comment"># Convert probabilities A[0,i] to actual predictions p[0,i]</span><br>        <span class="hljs-comment">### START CODE HERE ### (≈ 4 lines of code)</span><br>        Y_prediction[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span> <span class="hljs-keyword">if</span> A[<span class="hljs-number">0</span>][i] &gt; <span class="hljs-number">0.5</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        <span class="hljs-comment">### END CODE HERE ###</span><br>    <br>    <span class="hljs-keyword">assert</span>(Y_prediction.shape == (<span class="hljs-number">1</span>, m))<br>    <br>    <span class="hljs-keyword">return</span> Y_prediction<br></code></pre></td></tr></table></figure><h2 id="Together"><a href="#Together" class="headerlink" title="Together"></a>Together</h2><p>Now let’s have everything combine together.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">model</span>(<span class="hljs-params">X_train, Y_train, X_test, Y_test, num_iterations = <span class="hljs-number">2000</span>, learning_rate = <span class="hljs-number">0.5</span>, print_cost = <span class="hljs-literal">False</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Builds the logistic regression model by calling the function you&#x27;ve implemented previously</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Arguments:</span><br><span class="hljs-string">    X_train -- training set represented by a numpy array of shape (num_px * num_px * 3, m_train)</span><br><span class="hljs-string">    Y_train -- training labels represented by a numpy array (vector) of shape (1, m_train)</span><br><span class="hljs-string">    X_test -- test set represented by a numpy array of shape (num_px * num_px * 3, m_test)</span><br><span class="hljs-string">    Y_test -- test labels represented by a numpy array (vector) of shape (1, m_test)</span><br><span class="hljs-string">    num_iterations -- hyperparameter representing the number of iterations to optimize the parameters</span><br><span class="hljs-string">    learning_rate -- hyperparameter representing the learning rate used in the update rule of optimize()</span><br><span class="hljs-string">    print_cost -- Set to true to print the cost every 100 iterations</span><br><span class="hljs-string">    </span><br><span class="hljs-string">    Returns:</span><br><span class="hljs-string">    d -- dictionary containing information about the model.</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <br>    <span class="hljs-comment">### START CODE HERE ###</span><br>    <br>    <span class="hljs-comment"># initialize parameters with zeros (≈ 1 line of code)</span><br>    w, b = initialize_with_zeros(X_train.shape[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-comment"># Gradient descent (≈ 1 line of code)</span><br>    parameters, grads, costs = optimize(w, b, X_train, Y_train, num_iterations, learning_rate)<br>    <br>    <span class="hljs-comment"># Retrieve parameters w and b from dictionary &quot;parameters&quot;</span><br>    w = parameters[<span class="hljs-string">&quot;w&quot;</span>]<br>    b = parameters[<span class="hljs-string">&quot;b&quot;</span>]<br>    <br>    <span class="hljs-comment"># Predict test/train set examples (≈ 2 lines of code)</span><br>    Y_prediction_test = predict(w, b, X_test)<br>    Y_prediction_train = predict(w, b, X_train)<br><br>    <span class="hljs-comment">### END CODE HERE ###</span><br><br>    <span class="hljs-comment"># Print train/test Errors</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;train accuracy: &#123;&#125; %&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">100</span> - np.mean(np.<span class="hljs-built_in">abs</span>(Y_prediction_train - Y_train)) * <span class="hljs-number">100</span>))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test accuracy: &#123;&#125; %&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-number">100</span> - np.mean(np.<span class="hljs-built_in">abs</span>(Y_prediction_test - Y_test)) * <span class="hljs-number">100</span>))<br><br>    <br>    d = &#123;<span class="hljs-string">&quot;costs&quot;</span>: costs,<br>         <span class="hljs-string">&quot;Y_prediction_test&quot;</span>: Y_prediction_test, <br>         <span class="hljs-string">&quot;Y_prediction_train&quot;</span> : Y_prediction_train, <br>         <span class="hljs-string">&quot;w&quot;</span> : w, <br>         <span class="hljs-string">&quot;b&quot;</span> : b,<br>         <span class="hljs-string">&quot;learning_rate&quot;</span> : learning_rate,<br>         <span class="hljs-string">&quot;num_iterations&quot;</span>: num_iterations&#125;<br>    <br>    <span class="hljs-keyword">return</span> d<br></code></pre></td></tr></table></figure><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ol><li>Conjugate gradient</li><li>BFGS</li><li>L-BFGS</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unicode and UTF-8</title>
    <link href="/2014/2014-07-17-unicode-and-utf8/"/>
    <url>/2014/2014-07-17-unicode-and-utf8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>There are many discrepancy towards <code>unicode</code> and <code>UTF=8</code>, for very long time I did tno figure out what the difference between thiese two things.  </p><hr><h1 id="character-set"><a href="#character-set" class="headerlink" title="character set"></a>character set</h1><p>Also known as <code>char set</code>, defined some specific word or character on this world into sequential number.<br>There ever have some sort of <code>char set</code> in this world:  </p><ul><li><code>Universal Character Set</code>(UCS)<br>  Which is obsoleted</li><li><code>Unicode</code><br>  This is currently prominent</li><li><code>ASCII</code><br>  Ancient but still affect current <code>charset</code></li></ul><p>But what on Earth is the word <code>char set</code>?<br>Just as I have mentioned at the begining of this chapter, <code>char set</code> is just to define a map in which sequential number and any word or character in this world.  </p><h3 id="ASCII"><a href="#ASCII" class="headerlink" title="ASCII"></a>ASCII</h3><p>At ancient time, <a href="http://en.wikipedia.org/wiki/ASCII"><code>ASCII</code></a> was first introduced on the meeting of the American Standards Association’s (ASA) X3.2 subcommittee, to include all alphabetic character and digit character, as well as some other control characters. <code>ASCII</code> unified the character set at that time, even today, <code>ASCII</code> still affecting our new generation character set like <code>Unicode</code>.<br>ASCII use <code>7</code> bits to represent <code>128</code> characters.  </p><h4 id="sample-ASCII-character-set-table"><a href="#sample-ASCII-character-set-table" class="headerlink" title="sample ASCII character set table"></a>sample <code>ASCII</code> character set table</h4><table><thead><tr><th>Binary</th><th>Oct</th><th>Dec</th><th>Hex</th><th>Glyph</th></tr></thead><tbody><tr><td>010 0100</td><td>044</td><td>36</td><td>24</td><td>$</td></tr><tr><td>100 0000</td><td>100</td><td>64</td><td>40</td><td>@</td></tr><tr><td>100 0001</td><td>101</td><td>65</td><td>41</td><td>A</td></tr><tr><td>110 0001</td><td>141</td><td>97</td><td>61</td><td>a</td></tr><tr><td>011 0000</td><td>060</td><td>48</td><td>30</td><td>0</td></tr></tbody></table><p>But as you can also image, ASCII character set can not fit current requirement for much larger words and characters, thus we have to emplify and fill more character into a new generation character set.  </p><h3 id="UNICODE"><a href="#UNICODE" class="headerlink" title="UNICODE"></a>UNICODE</h3><p><a href="http://en.wikipedia.org/wiki/Unicode">Unicode</a> is a prominent and new generation character set for today, it try alot hard to include almost all characters and words in this world, since its versatile representation capability, more companies and organization keen on it as their main character set.  </p><p>Just like <code>ASCII</code>, <code>Unicode</code> not only provide all ASCII character set with its original position for better compatibility with legacy charset, but also extends many more characters like Chinese, Japanese, Indian and others.<br>Unicode use <code>24</code> bits to represent, that is almost 3 bytes.</p><h4 id="sample-UNICODE-character-set-table"><a href="#sample-UNICODE-character-set-table" class="headerlink" title="sample UNICODE character set table"></a>sample <code>UNICODE</code> character set table</h4><table><thead><tr><th>Dec</th><th>Hex</th><th>Glyph</th></tr></thead><tbody><tr><td>36</td><td>U+0024</td><td>$</td></tr><tr><td>163</td><td>U+00A2</td><td>¢</td></tr><tr><td>8364</td><td>U+20AC</td><td>€</td></tr></tbody></table><hr><h1 id="character-encoding"><a href="#character-encoding" class="headerlink" title="character encoding"></a>character encoding</h1><p>In this chapter I just want to talk about <code>encoding</code> with <code>Unicode</code> for simplicity.  </p><p>After defining all those available characters as a set, what I do in information transmission?  Of course you can throw those 3 three bytes onto network or hard disk, but there could have a better project.<br>You may find that alphabets and digits are used much more frequently than other rare characters, since <code>Huffman Coding</code> already give us a great practice, we can reduce cost or transmission burden by shorten encoding of different character for disparate length.<br>For instance, since <code>A</code> is used so frequently than <code>Chinese</code> character, we could encoding <code>A</code> in one byte or 8 bits, but encoding <code>Chinese</code> in 4 bytes.  </p><p>That is how and why character encoding works:  </p><h2 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h2><p><a href="http://en.wikipedia.org/wiki/UTF-8">UTF-8</a> is a <code>variable-width</code> encoding that can represent every character in the Unicode character set.<br>For original <code>ASCII</code> character, <code>UTF-8</code> obey its originality, use only one byte to shorten encoding.<br>While spend more byte for unicode’s larger and less frequently used character.   </p><table><thead><tr><th>Bits of code point</th><th>First code point</th><th>Last code point</th><th>Bytes in sequence</th><th>Byte 1</th><th>Byte 2</th><th>Byte 3</th><th>Byte 4</th><th>Byte 5</th><th>Byte 6</th></tr></thead><tbody><tr><td>7</td><td>U+0000</td><td>U+007F</td><td>1</td><td>0xxxxxxx</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>11</td><td>U+0080</td><td>U+07FF</td><td>2</td><td>110xxxxx</td><td>10xxxxxx</td><td></td><td></td><td></td><td></td></tr><tr><td>16</td><td>U+0800</td><td>U+FFFF</td><td>3</td><td>1110xxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td></td><td></td><td></td></tr><tr><td>21</td><td>U+10000</td><td>U+1FFFFF</td><td>4</td><td>11110xxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td></td><td></td></tr><tr><td>26</td><td>U+200000</td><td>U+3FFFFFF</td><td>5</td><td>111110xx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td></td></tr><tr><td>31</td><td>U+4000000</td><td>U+7FFFFFFF</td><td>6</td><td>1111110x</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td><td>10xxxxxx</td></tr></tbody></table><p>So use this binary code point table along with Unicode character set, we can now have better performed encoding system:  </p><h4 id="sample-UTF-8-mapping-table"><a href="#sample-UTF-8-mapping-table" class="headerlink" title="sample UTF-8  mapping table"></a>sample <code>UTF-8</code>  mapping table</h4><table><thead><tr><th>Glyph</th><th>unicode</th><th>Binary code point</th><th>Binary UTF-8</th><th>Hexadecimal UTF-8</th></tr></thead><tbody><tr><td>$</td><td>U+0024</td><td>0100100</td><td>00100100</td><td>24</td></tr><tr><td>¢</td><td>U+00A2</td><td>000 10100010</td><td>11000010</td><td>10100010</td></tr><tr><td>€</td><td>U+20AC</td><td>00100000 10101100</td><td>11100010 10000010 10101100</td><td>E2 82 AC</td></tr></tbody></table><h4 id="Some-languages"><a href="#Some-languages" class="headerlink" title="Some languages"></a>Some languages</h4><table><thead><tr><th>Language</th><th>Range</th></tr></thead><tbody><tr><td>Chinese</td><td>u4e00-u9fa5</td></tr><tr><td>Korean</td><td>x3130-x318F</td></tr><tr><td>Korean</td><td>xAC00-xD7A3</td></tr><tr><td>Japaness</td><td>u0800-u4e00</td></tr></tbody></table><h2 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h2><p>UTF-16 is a fix-width encoding, any character set from Unicode is literally copied onto UTF-16 mapping table.<br>I will skip this paragraph since this is much simpler than <code>UTF-8</code>.  </p><h3 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h3><p><code>Do you understand what the disparity between Unicode and UTF-8?</code><br>You need to ask yourself, what about the other <code>charset</code> and <code>encoding</code>?</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>charset</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linear regression</title>
    <link href="/2014/2014-07-15-linear-regression/"/>
    <url>/2014/2014-07-15-linear-regression/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><h2 id="premise"><a href="#premise" class="headerlink" title="premise"></a>premise</h2><ol><li>$X$ is a <code>matrix</code> which has <code>m</code> rows and <code>n</code> columns, that means it is a $m \times n$ matrix, represents for training set.</li><li>$\theta$ is a $1 \times n$ <code>vector</code>, stands for hypothesis parameter.</li><li>$y$ is a $m \times 1$ <code>vector</code>, stands for real value of training set.</li><li>$\alpha$ named <code>learning rate</code> for defining learning or descending speed.</li><li>$S(X_j)$ means to get standard deviation of the j feature from training set.</li></ol><hr><h1 id="1-Hypothesis"><a href="#1-Hypothesis" class="headerlink" title="1. Hypothesis"></a>1. Hypothesis</h1><blockquote><p>Draw hypothesis of a pattern.</p></blockquote><p>$$<br>h_{\theta}(X) &#x3D; X \times \theta^T<br>$$</p><h1 id="2-Cost"><a href="#2-Cost" class="headerlink" title="2. Cost"></a>2. Cost</h1><blockquote><p>Calculate the Cost for single training point.</p></blockquote><p>$$Cost(X^{(i)},y^{(i)})&#x3D;[h_{\theta}(X^{(i)}) - y^{(i)}]^2$$</p><h1 id="3-Cost-function"><a href="#3-Cost-function" class="headerlink" title="3. Cost function"></a>3. Cost function</h1><blockquote><p>Draw cost function for iterating whole training set.</p></blockquote><p>$$<br>\begin{aligned}<br>J(\theta) &amp;&#x3D;\left(\frac{1}{2m}\right)\sum_{i&#x3D;1}^m Cost(X^{(i)},y^{(i)})    \<br>          &amp;&#x3D;\left(\frac{1}{2m}\right)\sum_{i&#x3D;1}^m[h_{\theta}(X^{(i)}) - y^{(i)}]^2<br>\end{aligned}<br>$$</p><h1 id="4-Get-optimized-parameter"><a href="#4-Get-optimized-parameter" class="headerlink" title="4. Get optimized parameter"></a>4. Get optimized parameter</h1><blockquote><p>Learn from training set to get optimized parameter for proposed algorithm.</p></blockquote><h3 id="Gradient-Descend"><a href="#Gradient-Descend" class="headerlink" title="Gradient Descend###"></a>Gradient Descend###</h3><blockquote><p>Complicate to implement.<br>suitable for any senario.  </p></blockquote><p>$$<br>\begin{aligned}<br>grad(j) &amp;&#x3D; \frac{\partial}{\partial \theta_j} J(\theta)  \<br>        &amp;&#x3D; \frac{1}{m}\sum_{i&#x3D;1}^m[(h_{\theta}(X^{(i)}) - y^{(i)}) X_{j}^{(i)}]<br>\end{aligned}<br>$$</p><p>$$\theta_j :&#x3D; \theta_j - \alpha \times grad(j) \quad \text{Repeat many times}  $$  </p><h3 id="Normal-equation"><a href="#Normal-equation" class="headerlink" title="Normal equation###"></a>Normal equation###</h3><blockquote><p>Convenient, but performance bad while <code>m</code> grow large than 100000.<br>Unable to conquer non-invertable matrix.  </p></blockquote><p>$$<br>\theta &#x3D; (X^{T}X)^{\prime}X^{T}y<br>$$</p><h2 id="Feature-scaling"><a href="#Feature-scaling" class="headerlink" title="Feature scaling"></a>Feature scaling</h2><blockquote><p>Use feature scaling to optimize training set.<br>Make gradient descend converge much faster.</p></blockquote><p>$$X_j&#x3D;\frac{X_j - \mu}{a}$$</p><p>$$<br>\begin{aligned}<br>a &amp;&#x3D; max(X_j)-min(X_j) \<br>  &amp;  or \<br>  &amp;&#x3D; S(X_j)<br>\end{aligned}<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>machine learning</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>how to configure transaction manager in spring</title>
    <link href="/2014/2014-07-06-how-to-configure-transaction-manager-in-spring/"/>
    <url>/2014/2014-07-06-how-to-configure-transaction-manager-in-spring/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I notice that many developers whom will encounter some bad exceptions while trying to integrate spring and hiberante.<br>Actually I somehow had them because they are very normal situation in progress of integration.<br>Here I want to clarify this <code>transaction</code> related problem.  </p><h2 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h2><p><code>org.hibernate.HibernateException: No Session found for current thread</code>  </p><p>This is pretty ambiguous because we think <code>Spring</code> will manage session, but there is something hidden in hibernate.<br>Hibernate need to explicitly <code>openSession</code> first in the <code>SessionFactory</code> to gain session and cache it in <code>CurrentSessionContext</code>(<code>ThreadLocal</code> by default) container. You can use <code>getCurrentSession</code> to get session from <code>ThreadLocal</code> or other <code>CurrentSessionContext</code> if it already created from previous <code>open</code> action.<br>By my experiment, you will get this <code>No Session found for current thread</code> exception when you trying to get session without explicitly <code>open</code> it.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sessionFactory.openSession();<br><span class="hljs-comment">//...</span><br><span class="hljs-comment">//You can got the opened session somewhere in this thread</span><br><span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sessionFactory.getCurrentSession();<br></code></pre></td></tr></table></figure><p>But you will receive Exception if <code>getCurrentSession</code> without invoking create session first.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Session</span> <span class="hljs-variable">session</span> <span class="hljs-operator">=</span> sessionFactory.getCurrentSession();<br><span class="hljs-comment">//Exception here</span><br></code></pre></td></tr></table></figure><p>After explaining the exception above, you now may know root cause of this problem so as to better understand its scheme.  </p><h2 id="Now"><a href="#Now" class="headerlink" title="Now"></a>Now</h2><p>let’s learn to configure transaction manager.  </p><p>There are two way of configuring transaction manager in spring integrated with hibernate.  </p><ol><li>programmatic</li><li>Declarative</li></ol><p>You can easily understand that the programmatic way of configuring transaction manager is to <code>beginTransaction</code> and <code>commit</code> manually in Java code, which is cumbersome but is actually ease your worries as everything are under your control.  This article will not introduce it at all.<br>I will not recommend it to you, because <code>Declarative</code> could still have very good control but much higher productivity and better code style by good modularization.   </p><h3 id="1-Add-Spring-transaction-manager-for-Hibernate"><a href="#1-Add-Spring-transaction-manager-for-Hibernate" class="headerlink" title="1. Add Spring transaction manager for Hibernate"></a>1. Add Spring transaction manager for Hibernate</h3><p>Add this bean in spring’s <code>applicationContext.xml</code> configuration file to enable spring delegate transaction manager functionality.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- transaction manager --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;transactionManager&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.springframework.orm.hibernate4.HibernateTransactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;sessionFactory&quot;</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;sessionFactory&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">bean</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2-Declare-transaction-points-and-transaction-configure"><a href="#2-Declare-transaction-points-and-transaction-configure" class="headerlink" title="2. Declare transaction points and transaction configure"></a>2. Declare transaction points and transaction configure</h3><p>The declaration for this could have three ways of configuring this step.<br>It is recommended to annotate <code>@Transactional</code> on <code>service layer</code> since service will handle most of business logic and could guarantee the overall business transactional consistency.<br>There is another thing to refer, the <code>propagation</code> of transaction mean to spread from invoker to invokee, rather passing from bilateral method, see examples:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//If this method somehow being transactional by inheritence or directly annotated</span><br><span class="hljs-comment">//if dao.save() and  dao.update() are annotated with @transactional respectively</span><br><span class="hljs-comment">//the invoked dao.save() then could get transaction that is opened by invoker saveRoot</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Address <span class="hljs-title function_">saveRoot</span><span class="hljs-params">(Address bean)</span><br>&#123;<br>    <span class="hljs-comment">//The transaction opened by saveRoot will pass to method in it</span><br>    <span class="hljs-comment">//This transaction is exactly the same one with saveRoot one</span><br>    <span class="hljs-comment">//So this transaction is consistent.</span><br>    dao.update(bean);<br>    <span class="hljs-comment">//So as this method.</span><br>    <span class="hljs-keyword">return</span> dao.save(bean);<br>    <span class="hljs-comment">//The whole saveRoot method is transactional consistent, and will commit if nothing bad happen, or just rollback automatically if exception thrown</span><br>&#125;<br><br><span class="hljs-comment">//another example for showing</span><br><span class="hljs-comment">//if dao.save() and  dao.update() are annotated with @transactional respectively</span><br><span class="hljs-comment">//notice there is no @Transactional on the doSave method</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doSave</span><span class="hljs-params">(Address bean)</span><br>&#123;<br>    <span class="hljs-comment">//The transaction opened by the first dao.save method</span><br>    dao.save(bean);<br>    <span class="hljs-comment">//That transaction will commit here</span><br><br>    <span class="hljs-comment">//So there is no transactional consistency.</span><br>    <span class="hljs-comment">//transaction will open separately for update</span><br>    dao.update(bean);<br>    <span class="hljs-comment">//Then update method transaction commited here.</span><br>    <span class="hljs-comment">//Thus operations will commit separately, which result in very bad transaction management</span><br>    <span class="hljs-comment">//like nothing useful</span><br>&#125;<br></code></pre></td></tr></table></figure><p>For more  please visit spring framework <a href="http://docs.spring.io/spring/docs/4.0.5.RELEASE/spring-framework-reference/htmlsingle/#transaction">reference</a>.  </p><h4 id="1-AOP-based"><a href="#1-AOP-based" class="headerlink" title="1. AOP based"></a>1. AOP based</h4><p>AOP based transaction is very clear and simple:  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- transaction manager advisor --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:advice</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tx:attributes</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;find*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;get*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;count*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> <span class="hljs-attr">read-only</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tx:method</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;*&quot;</span> <span class="hljs-attr">propagation</span>=<span class="hljs-string">&quot;REQUIRED&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tx:attributes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">tx:advice</span>&gt;</span><br><span class="hljs-comment">&lt;!-- AOP transaction inserter --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aop:config</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:pointcut</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> <span class="hljs-attr">expression</span>=<span class="hljs-string">&quot;execution(* rugal.sample.core.service.impl..*(..))&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">aop:advisor</span> <span class="hljs-attr">advice-ref</span>=<span class="hljs-string">&quot;txAdvice&quot;</span> <span class="hljs-attr">pointcut-ref</span>=<span class="hljs-string">&quot;txPointcut&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">aop:config</span>&gt;</span><br></code></pre></td></tr></table></figure><p>The <code>txAdvice</code> tells transaction manage how to make transaction propagation or some other transactional related metadata.<br><code>aop:config</code> is to create cut point aspect, then delivery this point to transaction manage to make transactional management, after completion of method invocation, AOP will cut a point to let <code>txManager</code> to <code>commit</code> or <code>rollback</code> so as to ensure transactional consistency.  </p><p>Beware you must configre AOP at the <code>implementation</code> class rather than <code>interface</code>.</p><h4 id="2-annotation-driven"><a href="#2-annotation-driven" class="headerlink" title="2. annotation driven"></a>2. annotation driven</h4><p>Add snipplet in <code>applicationContext.xml</code> to enable annotation driven transaction management.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Enable annotation driven transaction manager --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">tx:annotation-driven</span> <span class="hljs-attr">transaction-manager</span>=<span class="hljs-string">&quot;transactionManager&quot;</span>  /&gt;</span><br></code></pre></td></tr></table></figure><p>This is all XML that needed for annotation driven configuration, pretty simple.  </p><p>Then you can add <code>@Transactional</code> annotation on any method in <code>@Service</code> implementation class, or just on the service class to enable the whole class to be transactional managed and in same transaction behavior.<br>Beware that you must put this annotation on implementation class rather than <code>interface</code>.   </p><p>Some samples:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> Address <span class="hljs-title function_">save</span><span class="hljs-params">(Address bean)</span><br>&#123;<span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-meta">@Transactional(readOnly = true)</span><br><span class="hljs-keyword">public</span> Address <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer id)</span><br>&#123;<span class="hljs-comment">//...</span><br>&#125;<br><br><span class="hljs-comment">//Or you can annotate it on class level to enable the any method in class share same transaction behavior.</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Transactional</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AddressServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AddressService</span><br>&#123;<span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-mixed-style"><a href="#3-mixed-style" class="headerlink" title="3. mixed style"></a>3. mixed style</h4><p>You can also mix these two styles together to make it flexible.</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>My depiction completed, now have a test, just to throw an <code>RuntimeException</code> to test data consistency, you will find hibernate <code>DEBUG</code> tells you that it rollback sucessfully.<br>Congratulation!</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clojure quote symbols</title>
    <link href="/2014/2014-07-03-clojure-quote-symbols/"/>
    <url>/2014/2014-07-03-clojure-quote-symbols/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Well, quote and its related symbols is too confusing for a clojure newbie.<br>Thanks to this excellent <a href="http://blog.8thlight.com/colin-jones/2012/05/22/quoting-without-confusion.html">article</a>.  </p><h2 id="1-‘"><a href="#1-‘" class="headerlink" title="1. ‘"></a>1. ‘</h2><p>The symbol <code>&#39;</code>, the single quote symbol near the <code>Enter</code> button in your keyboard.  Can turn off evaluation functionality for the following expression, its functionality is totally equivalent to <code>(quote)</code>.<br>Functionality of <code>quote</code> is simple and dedicate, which means the expression after this symbol will be treated just as literal, nothing more.  </p><p>Let’s take some examples:   </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; &#x27;()                   <span class="hljs-comment">;()</span><br>user=&gt; &#x27;[]                   <span class="hljs-comment">;[]</span><br>user=&gt; &#x27;(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)              <span class="hljs-comment">;(1 2 3)</span><br>user=&gt; &#x27;(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)         <span class="hljs-comment">;(list 1 2 3)</span><br>user=&gt; (<span class="hljs-name"><span class="hljs-built_in">eval</span></span> &#x27;(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>))  <span class="hljs-comment">;(1 2 3)</span><br></code></pre></td></tr></table></figure><p>As you can see the <code>(eval)</code> can evaluate the quoted or unevaluated(literal) expression and unveil its original ability.  </p><h2 id="2"><a href="#2" class="headerlink" title="2. &#96;"></a>2. &#96;</h2><p>This is a confusing symbol just because it looks like <code>&#39;</code>. But actually this symbol called <code>back-quote</code>, located above the <code>Tab</code> button in your keyboard.<br>Clojure call it <code>syntax-quote</code>.<br>Very similar to <code>quote</code>, this <code>syntax-quote </code>, will left expression behind it unevaluated, but it has some more functionalities.  </p><ol><li><code>syntax-quote</code> will try to find out the corresponding namespace of following symbols.   </li><li><code>syntax-quote</code> could combine use with some other special characters such like <code>~</code>, whereas <code>quote</code> could not.</li></ol><p>let us have some examples:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; `[name]      <span class="hljs-comment">;[clojure.core/name]</span><br>user=&gt; `[`name]     <span class="hljs-comment">;[(quote clojure.core/name)]</span><br>user=&gt; `[&#x27;name]     <span class="hljs-comment">;[(quote clojure.core/name)]</span><br></code></pre></td></tr></table></figure><p>You may notice the <code>(syntax-quote)</code> and <code>(quote)</code> have identical name in clojure, called <code>quote</code>.<br>You could use <code>&#39;</code> as short for <code>quote</code>, but there have no short hand for <code>syntax-quote</code>.   </p><h2 id="3"><a href="#3" class="headerlink" title="3. ~"></a>3. ~</h2><p>This is a magic symbol to unquote expression within the effect area of <code>syntax-quote</code>, you could only use it in the scope of a <code>syntax-quote</code>, it named <code>unquote</code>.<br>By unquoting, the expression affected by <code>~</code> now can be evaluated again even if it in domain of a <code>syntax-quote</code>.  </p><p>Examples below:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; `[~(<span class="hljs-name"><span class="hljs-built_in">quote</span></span> name)]   <span class="hljs-comment">;[name], same as `[~&#x27;name]</span><br>user=&gt; `[~(<span class="hljs-name"><span class="hljs-built_in">quote</span></span> (<span class="hljs-name"><span class="hljs-built_in">name</span></span>))] <span class="hljs-comment">;[(name)], equivalent to `[ ~&#x27;(name)]</span><br>user=&gt; `[~&#x27;name]     <span class="hljs-comment">;[name], same as [&#x27;name]</span><br>user=&gt; `[`~name]     <span class="hljs-comment">;[clojure.core/name], same as `[name]</span><br>user=&gt; `[&#x27;~name]     <span class="hljs-comment">;[(quote #&lt;core$name clojure.core$name@d75415&gt;)]</span><br></code></pre></td></tr></table></figure><h2 id="4"><a href="#4" class="headerlink" title="4. ~@"></a>4. ~@</h2><p>If you have seen my post of <a href="!--swig%EF%BF%BC5--">state management</a>, you will know the <code>@</code> is about to derefer the <code>ref/atom/Agent</code>.<br>But here this symbol again have another behavior that is <code>~</code> alike.<br><code>@</code> symbol must combined use with <code>~</code>, which finally becomes <code>~@</code>, called <code>unquote-splicing</code> symbol.<br>It could extract the inner elementns from the quoted <code>list</code>.   </p><p>sample code:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; `(<span class="hljs-name"><span class="hljs-built_in">max</span></span> @(<span class="hljs-name">shuffle</span> (<span class="hljs-name"><span class="hljs-built_in">range</span></span> <span class="hljs-number">10</span>)))  <span class="hljs-comment">; have no effect without ~ as prefix</span><br><span class="hljs-comment">;(clojure.core/max (clojure.core/deref (clojure.core/shuffle (clojure.core/range 10))))</span><br><br>user=&gt; `(<span class="hljs-name"><span class="hljs-built_in">max</span></span> ~(<span class="hljs-name">shuffle</span> (<span class="hljs-name"><span class="hljs-built_in">range</span></span> <span class="hljs-number">10</span>)))  <span class="hljs-comment">; just behaves as what syntax-quote could do</span><br><span class="hljs-comment">;(clojure.core/max [8 2 6 7 3 9 5 1 0 4]) ;There is an square parenthesis there</span><br><br>user=&gt; `(<span class="hljs-name"><span class="hljs-built_in">max</span></span> ~@(<span class="hljs-name">shuffle</span> (<span class="hljs-name"><span class="hljs-built_in">range</span></span> <span class="hljs-number">10</span>))) <span class="hljs-comment">; ~@ extract list without parenthesis.</span><br><span class="hljs-comment">;(clojure.core/max 0 4 7 5 1 2 6 3 9 8)</span><br></code></pre></td></tr></table></figure><h2 id="5-let’s-confusing"><a href="#5-let’s-confusing" class="headerlink" title="5. let’s confusing"></a>5. let’s confusing</h2><p>You will graduately get accustom to it.<br><code>syntax-quote</code> will affect items one by one in it follow scope, while encounter <code>~</code> then temporary disabled <code>syntax-quote</code>‘s ability in this the scope of <code>~</code>.   </p><p>Try to learn more by yourself.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; `&#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> &#x27;~(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)&#125; <span class="hljs-comment">;&#123;:a 1, :b (quote 3)&#125;</span><br>user=&gt; `[<span class="hljs-symbol">:a</span> ~(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) c]     <span class="hljs-comment">;[:a 2 user/c]</span><br>user=&gt; `[<span class="hljs-symbol">:a</span> ~(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) ~`c]   <span class="hljs-comment">;[:a 2 user/c]</span><br>user=&gt; `[<span class="hljs-symbol">:a</span> ~(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) ~&#x27;c]   <span class="hljs-comment">;[:a 2 c]</span><br>user=&gt; `[<span class="hljs-symbol">:a</span> ~(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) &#x27;c]    <span class="hljs-comment">;[:a 2 (quote user/c)]</span><br>user=&gt; `[<span class="hljs-symbol">:a</span> ~(<span class="hljs-name"><span class="hljs-built_in">+</span></span> <span class="hljs-number">1</span> <span class="hljs-number">1</span>) &#x27;~&#x27;c]  <span class="hljs-comment">;[:a 2 (quote c)]</span><br><br>user=&gt; `&#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> &#x27;~@(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> <span class="hljs-number">2</span>)&#125;  <span class="hljs-comment">;&#123;:a 1, :b (quote 1 2)&#125;</span><br><br>user=&gt; `(<span class="hljs-number">1</span> `(<span class="hljs-number">2</span> <span class="hljs-number">3</span>) <span class="hljs-number">4</span>)<br><span class="hljs-comment">;(1 (clojure.core/seq (clojure.core/concat (clojure.core/list 2) (clojure.core/list 3))) 4)</span><br>user=&gt; `(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> `(<span class="hljs-number">2</span> ~(<span class="hljs-name"><span class="hljs-built_in">-</span></span> <span class="hljs-number">9</span> <span class="hljs-number">6</span>)) <span class="hljs-number">4</span>)<br><span class="hljs-comment">;(clojure.core/list 1 (clojure.core/seq (clojure.core/concat (clojure.core/list 2) (clojure.core/list (clojure.core/- 9 6)))) 4)</span><br>user=&gt; `(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> `(<span class="hljs-number">2</span> ~~(<span class="hljs-name"><span class="hljs-built_in">-</span></span> <span class="hljs-number">9</span> <span class="hljs-number">6</span>)) <span class="hljs-number">4</span>)<br><span class="hljs-comment">;(clojure.core/list 1 (clojure.core/seq (clojure.core/concat (clojure.core/list 2) (clojure.core/list 3))) 4)</span><br>user=&gt; (<span class="hljs-name"><span class="hljs-built_in">eval</span></span> `(<span class="hljs-name"><span class="hljs-built_in">list</span></span> <span class="hljs-number">1</span> `(<span class="hljs-number">2</span> ~~(<span class="hljs-name"><span class="hljs-built_in">-</span></span> <span class="hljs-number">9</span> <span class="hljs-number">6</span>)) <span class="hljs-number">4</span>))   <span class="hljs-comment">;(1 (2 3) 4)</span><br></code></pre></td></tr></table></figure><h3 id="Congratulation"><a href="#Congratulation" class="headerlink" title="Congratulation"></a>Congratulation</h3><p>You finally complete this article, what have you learnt about the <code>quote</code> and <code>unquote</code> symbol in clojure?</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>comparison for acreage of some university</title>
    <link href="/2014/2014-06-30-comparison-for-acreage-of-some-university/"/>
    <url>/2014/2014-06-30-comparison-for-acreage-of-some-university/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I think its rather interesting to have a comparison for different universities before my set out.<br>Seems <code>wateroo</code> is pretty huge campus, <code>manitoba</code> is also appreciated.  </p><table><thead><tr><th align="right">name</th><th></th><th align="left">area</th></tr></thead><tbody><tr><td align="right">wateroo</td><td></td><td align="left">6 070 acre</td></tr><tr><td align="right">TsingHua</td><td></td><td align="left">5 886 acre</td></tr><tr><td align="right">manitoba</td><td></td><td align="left">4 103 acre</td></tr><tr><td align="right">Toranto</td><td></td><td align="left">3 900 acre</td></tr><tr><td align="right">Peking</td><td></td><td align="left">3 478 acre</td></tr><tr><td align="right">ZJUT</td><td></td><td align="left">3 200 acre</td></tr><tr><td align="right">Princeton</td><td></td><td align="left">3 035 acre</td></tr><tr><td align="right">alberta</td><td></td><td align="left">1 335 acre</td></tr><tr><td align="right">Yale</td><td></td><td align="left">1 062 acre</td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>device type in kernel</title>
    <link href="/2014/2014-06-30-device-type-in-kernel/"/>
    <url>/2014/2014-06-30-device-type-in-kernel/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>The road towards linux kernel is tough, some terminology also intuitive, here is some conclusion for devices, that treated differently in kernel.  </p><h3 id="Character-devices"><a href="#Character-devices" class="headerlink" title="Character devices"></a>Character devices</h3><ol><li>unbuffered, direct access to the hardware device </li><li>character device for a hard disk, require that all reads and writes are aligned to block boundaries and most certainly will not let you read a single byte</li><li>They do not necessarily allowed to read or write single characters at a time, that is up to the device in question</li></ol><h3 id="Block-devices"><a href="#Block-devices" class="headerlink" title="Block devices"></a>Block devices</h3><ol><li>buffered access to the hardware</li><li>block devices will always allow you to read or write any sized block you wish (including single characters&#x2F;bytes) and are not subject to alignment restrictions</li><li>The downside is that because block devices are buffered, you do not know how long it will take before a write is pushed to the actual device itself; additionally, if the same hardware exposes both character and block devices, there is a risk of data corruption due to the clients using the character device being unaware of changes made in the buffers of the block device</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mutex vs. semaphore</title>
    <link href="/2014/2014-06-30-mutex-vs-semaphore/"/>
    <url>/2014/2014-06-30-mutex-vs-semaphore/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>You might have seen these two terminologies for a very long time, since university class called <code>operating system</code>, but can you help clarify this?<br> As depict below, they are totally different, although seems identical in mechanism.  </p><h2 id="mutex"><a href="#mutex" class="headerlink" title="mutex"></a>mutex</h2><p>Strictly speaking, a mutex is <code>locking mechanism</code> used to synchronize access to a resource.<br>Only one task (can be a thread or process based on OS abstraction) can acquire the mutex. It means there will be ownership associated with mutex, and only the owner can release the lock (mutex).  </p><h2 id="semaphore"><a href="#semaphore" class="headerlink" title="semaphore"></a>semaphore</h2><p>Semaphore is <code>signaling mechanism</code> (“I am done, you can carry on” kind of signal).<br>For example, if you are listening songs (assume it as one task) on your mobile and at the same time your friend called you, an interrupt will be triggered upon which an interrupt service routine (ISR) will signal the call processing task to wakeup.  </p><hr><p>Hence use <code>semaphore</code> to coordinate through various system of identities that share the same resource.<br>But in the locking section in the detailed semaphored queue towards an object that we try to locking this resources from being accessed or modified by other processes, we need to use <code>mutex</code>.  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>my projects</title>
    <link href="/2014/2014-06-30-my-projects/"/>
    <url>/2014/2014-06-30-my-projects/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Those are all project that completed in between my university</p><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><ol><li>Food tonight</li><li>JH passport Center</li><li>mail.zjut.com</li><li>Hadoop join algorithm optimization</li><li>springmvc-spring-mybatis archetype</li><li>Task tracker</li><li>Vocabulary reciter</li><li><a href="https://github.com/Rugal/springmvc-spring-hibernate">springmvc-spring-hibernate</a> archetype in maven</li><li><a href="https://github.com/Rugal/ssh-common">ssh-common</a> archetype in maven</li></ol>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TODO list</title>
    <link href="/2014/2014-06-30-todo-list/"/>
    <url>/2014/2014-06-30-todo-list/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Here is my TODO list in this few following months:  </p><h2 id="ToDo"><a href="#ToDo" class="headerlink" title="ToDo"></a>ToDo</h2><ol><li>courses</li><li>research methodology</li><li>data mining</li><li>Cloud computing</li><li>machine learning</li><li>paper</li><li>chinese KB layout</li><li>my neural network structure</li><li>Italiano</li></ol>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>clojure state management introduction</title>
    <link href="/2014/2014-06-26-clojure-state-management-introduction/"/>
    <url>/2014/2014-06-26-clojure-state-management-introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Before dive into those state management, let us first understand what are two key reference types are:  </p><h2 id="Coordination"><a href="#Coordination" class="headerlink" title="Coordination"></a>Coordination</h2><ol><li><code>Coordinated</code> means different actors must work on the same workspace. Thus, they need to cooperate according to specific sequence in order to accomplish task.   </li><li><code>Uncoordinated</code> in other hand, means different actors could work on their own workspace, without worrying about interfere others.</li></ol><h2 id="Synchronization"><a href="#Synchronization" class="headerlink" title="Synchronization"></a>Synchronization</h2><ol><li><code>Synchronous</code> operations involves some levels of lock or latch. The actor that owns the lock will block subsequent requirement.  </li><li><code>Asynchronous</code> means different actors will no be blocked.</li></ol><hr><h2 id="1-ref"><a href="#1-ref" class="headerlink" title="1. ref"></a>1. ref</h2><p><code>Ref</code> are Clojure’s implementation of <code>synchronous</code> and <code>coordinated</code> identities. Each is a distinct identity, but operations on them must be run inside a transaction, guaranteeing that multiple identities whose values depend on each other are always in a consistent state.   </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-comment">;definition and dereference:  </span><br><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">ref</span></span> <span class="hljs-number">5</span>)<br><span class="hljs-number">2.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">my-ref</span> (<span class="hljs-name"><span class="hljs-built_in">ref</span></span> <span class="hljs-number">5</span>))<br><span class="hljs-number">3.</span> (<span class="hljs-name"><span class="hljs-built_in">deref</span></span> my-ref) <span class="hljs-comment">; @my-ref</span><br><span class="hljs-comment">;transaction:  </span><br><span class="hljs-number">4.</span> (<span class="hljs-name"><span class="hljs-built_in">dosync</span></span> (<span class="hljs-name"><span class="hljs-built_in">ref-set</span></span> my-ref <span class="hljs-number">6</span>))<br><span class="hljs-number">5.</span> (<span class="hljs-name"><span class="hljs-built_in">dosync</span></span> (<span class="hljs-name"><span class="hljs-built_in">alter</span></span> my-ref + <span class="hljs-number">3</span>))<br><br><span class="hljs-comment">;sample</span><br>(<span class="hljs-keyword">def</span> <span class="hljs-title">my-contacts</span> (<span class="hljs-name"><span class="hljs-built_in">ref</span></span> []))<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">add-contact</span><br>    <span class="hljs-string">&quot;adds a contact to the provided contact list&quot;</span><br>    [contacts contact]<br>    (<span class="hljs-name"><span class="hljs-built_in">dosync</span></span><br>        (<span class="hljs-name"><span class="hljs-built_in">alter</span></span> contacts conj (<span class="hljs-name"><span class="hljs-built_in">ref</span></span> contact))))<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">print-contacts</span><br>    <span class="hljs-string">&quot;prints a list of contacts&quot;</span><br>    [contacts]<br>    (<span class="hljs-name"><span class="hljs-built_in">doseq</span></span> [c @contacts]<br>    (<span class="hljs-name">println</span> (<span class="hljs-name"><span class="hljs-built_in">str</span></span> <span class="hljs-string">&quot;Name: &quot;</span> (@c <span class="hljs-symbol">:lname</span>) <span class="hljs-string">&quot;, &quot;</span> (@c <span class="hljs-symbol">:fname</span>)))<br>    ))<br>(<span class="hljs-name">add-contact</span> my-contacts &#123;<span class="hljs-symbol">:fname</span> <span class="hljs-string">&quot;Luke&quot;</span> <span class="hljs-symbol">:lname</span> <span class="hljs-string">&quot;VanderHart&quot;</span>&#125;)<br>(<span class="hljs-name">add-contact</span> my-contacts &#123;<span class="hljs-symbol">:fname</span> <span class="hljs-string">&quot;Stuart&quot;</span> <span class="hljs-symbol">:lname</span> <span class="hljs-string">&quot;Sierra&quot;</span>&#125;)<br>(<span class="hljs-name">add-contact</span> my-contacts &#123;<span class="hljs-symbol">:fname</span> <span class="hljs-string">&quot;John&quot;</span> <span class="hljs-symbol">:lname</span> <span class="hljs-string">&quot;Doe&quot;</span>&#125;)<br>(<span class="hljs-name">print-contacts</span> my-contacts)<br></code></pre></td></tr></table></figure><h2 id="2-atom"><a href="#2-atom" class="headerlink" title="2. atom"></a>2. atom</h2><p><code>Atom</code> are Clojure’s implementation of <code>synchronous</code>, <code>uncoordinated</code> identities. When updated then change is applied before proceeding with the current thread and the update occurs atomically. All future dereferences to the atom from all threads will resolve to the new value.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">atom</span></span> <span class="hljs-number">5</span>)<br><span class="hljs-number">2.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">my-atom</span> (<span class="hljs-name"><span class="hljs-built_in">atom</span></span> <span class="hljs-number">5</span>))<br><span class="hljs-number">3.</span> @my-atom<br><span class="hljs-number">4.</span> (<span class="hljs-name"><span class="hljs-built_in">swap!</span></span> my-atom + <span class="hljs-number">3</span>) <span class="hljs-comment">;alter alike</span><br><span class="hljs-number">5.</span> (<span class="hljs-name"><span class="hljs-built_in">reset!</span></span> my-atom <span class="hljs-number">1</span>)  <span class="hljs-comment">;ref-set alike</span><br></code></pre></td></tr></table></figure><p>One example of a case where atoms are very useful is for caching values. Cached values need to be accessible quickly, but are not dependent on the rest of the system’s state.</p><h2 id="3-Asynchronous-Agent"><a href="#3-Asynchronous-Agent" class="headerlink" title="3. Asynchronous Agent"></a>3. Asynchronous Agent</h2><p>Like refs and atoms, <code>agent</code> are identities and adhere to Clojure’s philosophy of identity and state. Unlike refs and atoms, however, updates to their values occur asynchronously in a separate system managed thread pool dedicated to managing agent state.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">agent</span></span> <span class="hljs-number">5</span>)<br><span class="hljs-number">2.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">my-agent</span> (<span class="hljs-name"><span class="hljs-built_in">agent</span></span> <span class="hljs-number">5</span>))<br><span class="hljs-number">3.</span> @my-agent<br><span class="hljs-comment">;Asynchronously operation</span><br><span class="hljs-number">4.</span> (<span class="hljs-name"><span class="hljs-built_in">send</span></span> my-agent + <span class="hljs-number">3</span>)  <span class="hljs-comment">;performance better on CPU intensive action</span><br><span class="hljs-number">5.</span> (<span class="hljs-name"><span class="hljs-built_in">send-off</span></span> my-agent + <span class="hljs-number">3</span>) <span class="hljs-comment">;performance better on IO intensive action</span><br></code></pre></td></tr></table></figure><ul><li>Actions to any individual agent are applied serially, not concurrently. Multiple updates to the same agent won’t overwrite each other or encounter race conditions.    </li><li>Multiple actions sent to an agent from the same thread will be applied in the order in which they were sent. Obviously, no such guarantees can be made about actions sent from different threads. </li><li>If an action function contains additional dispatches to agents, either to itself or other agents, dispatches are saved and are not actually called until after the action function returns and the agent’s value has been updated. This allows actions on an agent to trigger further actions without having the updates conflict.  </li><li>If an update is dispatched to an agent within a STM transaction (for example, a dosync expression), the dispatch is not sent until the transaction is committed. This means that it is safe to dispatch updates to atoms from within STM transactions.</li></ul><hr><h2 id="Keeping-Track-of-Identities"><a href="#Keeping-Track-of-Identities" class="headerlink" title="Keeping Track of Identities"></a>Keeping Track of Identities</h2><p>Both validator and watcher can do job on <code>ref</code> <code>agant</code> <code>atom</code>  </p><h3 id="Validators"><a href="#Validators" class="headerlink" title="Validators"></a>Validators</h3><p>validate variable data and throw exception while violated:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">set-validator!</span></span> my-ref (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [x] (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> <span class="hljs-number">0</span> x)))<br>(<span class="hljs-name"><span class="hljs-built_in">set-validator!</span></span> my-agent (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [x] (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> <span class="hljs-number">0</span> x)))<br>(<span class="hljs-name"><span class="hljs-built_in">set-validator!</span></span> my-atom (<span class="hljs-name"><span class="hljs-built_in">fn</span></span> [x] (<span class="hljs-name"><span class="hljs-built_in">&lt;</span></span> <span class="hljs-number">0</span> x)))<br>(<span class="hljs-name"><span class="hljs-built_in">get-validator</span></span> my-agent)<br>(<span class="hljs-name"><span class="hljs-built_in">set-validator!</span></span> my-ref <span class="hljs-literal">nil</span>) <span class="hljs-comment">;remove validator</span><br></code></pre></td></tr></table></figure><h3 id="Watches"><a href="#Watches" class="headerlink" title="Watches"></a>Watches</h3><p>Supervise variable data in any point:</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-keyword">defn</span> <span class="hljs-title">my-watch</span> [key identity old-val new-val]<br>    (<span class="hljs-name">println</span> (<span class="hljs-name"><span class="hljs-built_in">str</span></span> <span class="hljs-string">&quot;Old: &quot;</span> old-val))<br>    (<span class="hljs-name">println</span> (<span class="hljs-name"><span class="hljs-built_in">str</span></span> <span class="hljs-string">&quot;New: &quot;</span> new-val)))<br>(<span class="hljs-name"><span class="hljs-built_in">add-watch</span></span> my-ref <span class="hljs-string">&quot;watch1&quot;</span> my-watch)<br>(<span class="hljs-name"><span class="hljs-built_in">remove-watch</span></span> my-ref <span class="hljs-string">&quot;watch1&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clojure core data structure</title>
    <link href="/2014/2014-06-25-clojure-core-data-structure/"/>
    <url>/2014/2014-06-25-clojure-core-data-structure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h3 id="clojure-build-in-types"><a href="#clojure-build-in-types" class="headerlink" title="clojure build-in types"></a>clojure build-in types</h3><table><thead><tr><th align="left">name</th><th align="right">example</th><th align="right">underlying java interface</th></tr></thead><tbody><tr><td align="left">Number</td><td align="right">100</td><td align="right"><code>java.lang.Number</code></td></tr><tr><td align="left">String</td><td align="right">“Rugal”</td><td align="right"><code>java.lang.String</code></td></tr><tr><td align="left">Boolean</td><td align="right">true, false</td><td align="right"><code>java.lang.Boolean</code></td></tr><tr><td align="left">Character</td><td align="right">\R</td><td align="right"><code>java.lang.Character</code></td></tr><tr><td align="left">Keyword</td><td align="right">:key</td><td align="right"><code>clojure.lang.Keyword</code></td></tr><tr><td align="left">List</td><td align="right">‘(1 2 3), (list 1 2 3)</td><td align="right"><code>nil</code></td></tr><tr><td align="left">Vector</td><td align="right">[1 2 3]</td><td align="right"><code>nil</code></td></tr><tr><td align="left">Map</td><td align="right">{:key val :key val}</td><td align="right"><code>java.util.Map</code></td></tr><tr><td align="left">Set</td><td align="right">#{1 2 3}</td><td align="right"><code>java.util.Set</code></td></tr></tbody></table><hr><h2 id="primitive-type"><a href="#primitive-type" class="headerlink" title="primitive type"></a>primitive type</h2><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span>)<br><span class="hljs-number">2.</span> (<span class="hljs-name"><span class="hljs-built_in">-</span></span>)<br><span class="hljs-number">3.</span> (<span class="hljs-name"><span class="hljs-built_in">*</span></span>)<br><span class="hljs-number">4.</span> (/)<br><span class="hljs-number">5.</span> (<span class="hljs-name"><span class="hljs-built_in">inc</span></span>)<br><span class="hljs-number">6.</span> (<span class="hljs-name"><span class="hljs-built_in">dec</span></span>)<br><span class="hljs-number">7.</span> (<span class="hljs-name"><span class="hljs-built_in">quot</span></span>)<span class="hljs-comment">;aliquot</span><br><span class="hljs-number">8.</span> (<span class="hljs-name"><span class="hljs-built_in">rem</span></span>) <span class="hljs-comment">;remain</span><br><span class="hljs-number">9.</span> (<span class="hljs-name"><span class="hljs-built_in">min</span></span>)<br><span class="hljs-number">10.</span> (<span class="hljs-name"><span class="hljs-built_in">max</span></span>)<br></code></pre></td></tr></table></figure><h3 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">str</span></span>)<br><span class="hljs-number">2.</span> (<span class="hljs-name">subs</span> string from end)   <br>    <span class="hljs-comment">;from:inclusive, start from 0</span><br>    <span class="hljs-comment">;end: exclusive</span><br><span class="hljs-number">3.</span> (<span class="hljs-name"><span class="hljs-built_in">string?</span></span> <span class="hljs-string">&quot;test&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Regular-Expression-Functions"><a href="#Regular-Expression-Functions" class="headerlink" title="Regular Expression Functions"></a>Regular Expression Functions</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name">re-pattern</span> <span class="hljs-string">&quot;[a-z]&quot;</span>)<br><span class="hljs-number">2.</span> (<span class="hljs-name">re-matches</span> <span class="hljs-regex">#&quot;[a-zA-Z]* &quot;</span> <span class="hljs-string">&quot;test&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">not</span></span>)<br><span class="hljs-number">2.</span> (<span class="hljs-name"><span class="hljs-built_in">and</span></span>)<br><span class="hljs-number">3.</span> (<span class="hljs-name"><span class="hljs-built_in">or</span></span>)<br></code></pre></td></tr></table></figure><h3 id="Characters"><a href="#Characters" class="headerlink" title="Characters"></a>Characters</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name">char</span> ASCII/Unicode)<br></code></pre></td></tr></table></figure><h3 id="Keywords"><a href="#Keywords" class="headerlink" title="Keywords"></a>Keywords</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">keyword</span></span> string)<br><span class="hljs-number">2.</span> (<span class="hljs-name"><span class="hljs-built_in">keyword?</span></span>)<br></code></pre></td></tr></table></figure><hr><h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>List is a linked list, which is convenient in insertion and deletion, but not perform good in traverse and random indexing.<br>So for a list, modification, appending and conjunction is happened on the top&#x2F;head of a list.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> &#x27;(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>)    <span class="hljs-comment">; (list) are the same</span><br><span class="hljs-number">2.</span> (<span class="hljs-name"><span class="hljs-built_in">peek</span></span> &#x27;(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>))   <span class="hljs-comment">;get first element of list;</span><br><span class="hljs-number">3.</span> (<span class="hljs-name"><span class="hljs-built_in">pop</span></span> &#x27;(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>))    <span class="hljs-comment">;returns a new list with the first item removed.</span><br><span class="hljs-number">4.</span> (<span class="hljs-name"><span class="hljs-built_in">conj</span></span> &#x27;(<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) <span class="hljs-number">4</span>)  <span class="hljs-comment">;conjunct last parameter into mid parameter represented list</span><br></code></pre></td></tr></table></figure><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>Vector is like an array, hence perform good in traverse, data appending and  random selection, but disappointing in insertion and deletion.<br>So for a vector, modification, append and conjunction is happened on the tail of a vector.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-name"><span class="hljs-built_in">vector</span></span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>) <span class="hljs-comment">;convert all elements into a vector</span><br><span class="hljs-number">2.</span> (<span class="hljs-name"><span class="hljs-built_in">get</span></span> [<span class="hljs-string">&quot;first&quot;</span> <span class="hljs-string">&quot;second&quot;</span> <span class="hljs-string">&quot;third&quot;</span>] <span class="hljs-number">1</span>) <span class="hljs-comment">;get data of a vector by index, start from 0</span><br><span class="hljs-number">3.</span> (<span class="hljs-name"><span class="hljs-built_in">peek</span></span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>])  <span class="hljs-comment">; get data of a list by the tail</span><br><span class="hljs-number">4.</span> (<span class="hljs-name"><span class="hljs-built_in">conj</span></span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] <span class="hljs-number">4</span> <span class="hljs-number">5</span>)  <span class="hljs-comment">; conjunct other parameter into second parameter represented vector</span><br><span class="hljs-number">5.</span> (<span class="hljs-name"><span class="hljs-built_in">assoc</span></span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>] <span class="hljs-number">1</span> <span class="hljs-string">&quot;new value&quot;</span>) <span class="hljs-comment">;return vector that replace target index with last parameter</span><br><span class="hljs-number">6.</span> (<span class="hljs-name"><span class="hljs-built_in">pop</span></span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>])  <span class="hljs-comment">;remove the last element of given vector</span><br><span class="hljs-number">7.</span> (<span class="hljs-name"><span class="hljs-built_in">subvec</span></span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span> <span class="hljs-number">4</span> <span class="hljs-number">5</span>] start end) <span class="hljs-comment">;substract target vector from `start` to `end`</span><br></code></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><p>very similar to an Object in OOP:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">my-map</span> &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">3</span>&#125;) <span class="hljs-comment">;map definition</span><br><span class="hljs-number">2.</span> (<span class="hljs-name">my-map</span> <span class="hljs-symbol">:a</span>)  <span class="hljs-comment">;normal map get</span><br><span class="hljs-number">3.</span> (<span class="hljs-keyword">defstruct</span> <span class="hljs-title">person</span> <span class="hljs-symbol">:first-name</span> <span class="hljs-symbol">:last-name</span>) <span class="hljs-comment">;define struct for frequently used map structure</span><br><span class="hljs-number">4.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">person1</span> (<span class="hljs-name">struct-map</span> person <span class="hljs-symbol">:first-name</span> <span class="hljs-string">&quot;Luke&quot;</span> <span class="hljs-symbol">:last-name</span> <span class="hljs-string">&quot;VanderHart&quot;</span>)) <span class="hljs-comment">;create instance</span><br><span class="hljs-number">5.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">get-first-name</span> (<span class="hljs-name">accessor</span> person <span class="hljs-symbol">:first-name</span>)) <span class="hljs-comment">;define accessor for performance</span><br><span class="hljs-number">6.</span> (<span class="hljs-name">get-first-name</span> person1)  <span class="hljs-comment">;use accessor to access field</span><br><span class="hljs-number">7.</span> (<span class="hljs-name"><span class="hljs-built_in">assoc</span></span> &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span>&#125; <span class="hljs-symbol">:c</span> <span class="hljs-number">3</span> <span class="hljs-symbol">:d</span> <span class="hljs-number">4</span>) <span class="hljs-comment">; add or replace indexed element with parameters</span><br><span class="hljs-number">8.</span> (<span class="hljs-name"><span class="hljs-built_in">dissoc</span></span> &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">3</span> <span class="hljs-symbol">:d</span> <span class="hljs-number">4</span>&#125; <span class="hljs-symbol">:a</span> <span class="hljs-symbol">:c</span>)<span class="hljs-comment">;remove indexed elements with target parameters</span><br><span class="hljs-number">9.</span> (<span class="hljs-name"><span class="hljs-built_in">merge</span></span> &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span>&#125; &#123;<span class="hljs-symbol">:c</span> <span class="hljs-number">3</span> <span class="hljs-symbol">:d</span> <span class="hljs-number">4</span>&#125;)<span class="hljs-comment">;merge two maps together</span><br><span class="hljs-number">10.</span> (<span class="hljs-name">merge-with</span> + &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span>&#125; &#123;<span class="hljs-symbol">:b</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">4</span>&#125;)<span class="hljs-comment">;merge maps with operation</span><br><span class="hljs-number">11.</span> (<span class="hljs-name"><span class="hljs-built_in">keys</span></span> &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">3</span>&#125;) <span class="hljs-comment">;get all keys</span><br><span class="hljs-number">12.</span> (<span class="hljs-name"><span class="hljs-built_in">vals</span></span> &#123;<span class="hljs-symbol">:a</span> <span class="hljs-number">1</span> <span class="hljs-symbol">:b</span> <span class="hljs-number">2</span> <span class="hljs-symbol">:c</span> <span class="hljs-number">3</span>&#125;) <span class="hljs-comment">;get all values</span><br></code></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs clojure"><span class="hljs-number">1.</span> (<span class="hljs-keyword">def</span> <span class="hljs-title">languages</span> #&#123;<span class="hljs-symbol">:java</span> <span class="hljs-symbol">:lisp</span> <span class="hljs-symbol">:c++</span>&#125;)<br><span class="hljs-number">2.</span> (<span class="hljs-name">clojure.set/union</span> #&#123;<span class="hljs-symbol">:a</span> <span class="hljs-symbol">:b</span>&#125; #&#123;<span class="hljs-symbol">:c</span> <span class="hljs-symbol">:d</span>&#125;)<br><span class="hljs-number">3.</span> (<span class="hljs-name">clojure.set/intersection</span> #&#123;<span class="hljs-symbol">:a</span> <span class="hljs-symbol">:b</span> <span class="hljs-symbol">:c</span> <span class="hljs-symbol">:d</span>&#125; #&#123;<span class="hljs-symbol">:c</span> <span class="hljs-symbol">:d</span> <span class="hljs-symbol">:f</span> <span class="hljs-symbol">:g</span>&#125;)<br><span class="hljs-number">4.</span> (<span class="hljs-name">clojure.set/difference</span> #&#123;<span class="hljs-symbol">:a</span> <span class="hljs-symbol">:b</span> <span class="hljs-symbol">:c</span> <span class="hljs-symbol">:d</span>&#125; #&#123;<span class="hljs-symbol">:c</span> <span class="hljs-symbol">:d</span>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>basic asm learning</title>
    <link href="/2014/2014-06-24-basic-asm-learning/"/>
    <url>/2014/2014-06-24-basic-asm-learning/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Well, I have to say learn some <code>ASM</code> is mandatory while inspecting linux kernel code, hence I give a sample of simply write an <code>asm</code> code.   </p><p>There are six registers that are used for the arguments that the system call takes.<br>The first argument goes in EBX, the second in ECX, then EDX, ESI, EDI, and finally EBP.  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm">moveax,1       ; The exit syscall number<br>movebx,0       ; Have an exit code of 0<br>int80h         ; Interrupt 80h, the thing that pokes the kernel and says, &quot;Yo, do this&quot;<br></code></pre></td></tr></table></figure><hr><h4 id="Hello-world-sample"><a href="#Hello-world-sample" class="headerlink" title="Hello world sample"></a>Hello world sample</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs asm">section .data<br>hello:     db &#x27;Hello world!&#x27;,10    ; &#x27;Hello world!&#x27; plus a linefeed character<br>helloLen:  equ $-hello             ; Length of the &#x27;Hello world!&#x27; string<br>                                   ; (I&#x27;ll explain soon)<br>section .text<br>global _start<br><br>_start:<br>mov eax,4         ; The system call for write (sys_write)<br>mov ebx,1         ; File descriptor 1 - standard output<br>mov ecx,hello     ; Put the offset of hello in ecx<br>mov edx,helloLen  ; helloLen is a constant, so we don&#x27;t need to say<br>                  ; mov edx,[helloLen] to get it&#x27;s actual value<br>int 80h           ; Call the kernel<br>mov eax,1         ; The system call for exit (sys_exit)<br>mov ebx,0         ; Exit with return code of 0 (no error)<br>int 80h<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>asm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>financial market conception tree view</title>
    <link href="/2014/2014-06-24-financial-market-conceptions-tree-view/"/>
    <url>/2014/2014-06-24-financial-market-conceptions-tree-view/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Three main asset classes:</p><ol><li>Bonds</li><li>stocks</li><li>cash equivalents</li></ol><h3 id="security"><a href="#security" class="headerlink" title="security"></a>security</h3><p>A security is a tradable asset of any kind. Securities are broadly categorized into:</p><blockquote><ol><li>debt securities (such as <code>banknotes</code>, <code>bonds</code>);</li><li>equity securities, e.g., <code>common stocks</code>;</li><li>derivative contracts, such as <code>forwards</code>, <code>futures</code>, <code>options</code> and <code>swaps</code>.</li></ol></blockquote><h3 id="bonds"><a href="#bonds" class="headerlink" title="bonds"></a>bonds</h3><p>Bonds <code>---generally--&gt;</code> fixed-income securities</p><p>main categories of Bonds:</p><ol><li>corporate bonds</li><li>municipal bonds</li><li>Treasury<ol start="4"><li>notes – tax</li><li>bills – short term</li><li>bonds – long term</li></ol></li></ol><h2 id="securities-type"><a href="#securities-type" class="headerlink" title="securities type"></a>securities type</h2><ol><li><strong>Equities</strong>: also known as <code>shares</code> or <code>stock</code><ol><li><strong>common</strong>: called <code>ordinary shares</code> in UK</li><li><strong>preferred</strong>: no voting right &amp; less appreciation</li></ol></li><li><strong>Debt securities</strong>: also known as <code>fixed-income securities</code><ol><li><strong>corporate bonds</strong></li><li><strong>municipal bonds</strong></li><li><strong>government bonds</strong><ol><li><strong>notes</strong> – tax</li><li><strong>bills</strong> – short term</li><li><strong>bonds</strong> – long term</li></ol></li><li><strong>collateralized</strong><ol><li><strong>CDO</strong></li><li><strong>CMO</strong></li><li><strong>GNMA</strong></li></ol></li><li><strong>zero-coupon securities</strong></li><li><strong>preferred stock</strong>: same as <code>1.2</code></li></ol></li><li><strong>derivatives</strong><ol start="2"><li><p><strong>future</strong></p><ol start="3"><li><strong>Stock Index Futures</strong>:</li></ol></li><li><p><strong>options</strong>: are exchange instruments and are not issued by the company, measured in months</p><ol start="2"><li><strong>stock index options</strong><ol start="3"><li><strong>Options on Physicals</strong> result in the receipt or delivery of the underlying index</li><li><strong>Futures Options</strong>: combination of the profit potential of a futures contract and the limited risk characteristics of an option</li></ol></li></ol></li><li><p><strong>convertibles</strong></p><ol><li><strong>convertible bonds</strong></li><li><strong>convertible preferred stock</strong>: could exercise immediately</li></ol></li><li><p><strong>warrant</strong>: issued and guaranteed by the company, right to deal with common stock, often attached to preferred stock, often measured in years</p><ol><li><strong>put warrant</strong>: sell</li><li><strong>call warrant</strong>: buy</li></ol></li><li><p><strong>equity swap</strong></p></li><li><p><strong>Equity-linked Securities</strong></p></li><li><p><strong>Contracts for Difference</strong>: a zero coupon bond embedded with a call option on a stock index</p></li></ol></li></ol>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JVM internal and classloader</title>
    <link href="/2014/2014-06-24-jvm-internal-and-classloader/"/>
    <url>/2014/2014-06-24-jvm-internal-and-classloader/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="classloader-category"><a href="#classloader-category" class="headerlink" title="classloader category"></a>classloader category</h2><ol><li><code>BootStrap Class Loader</code>: Is responsible for loading all java class in <code>rt.jar</code> file, which means all Java core classes is loaded by this <code>classloader</code>. implemented by <code>C++</code> in <code>Sun JDK</code>. No any reflection could get their reference.</li><li><code>Extension Class Loader</code>: Loading some functional extensible jar.</li><li><code>System Class Loader</code>: Responsible for loading class that specified in bootstrap parameter <code>classpath</code>. In general, all classes written by ourselves are loaded by this classloader.</li><li><code>User Defined Class Loader</code>: Developer could define load strategy and manually control load procedure.</li></ol><hr><h2 id="ClassLoader-working-principle"><a href="#ClassLoader-working-principle" class="headerlink" title="ClassLoader working principle"></a>ClassLoader working principle</h2><p>Class loading procedure divided into three phases:  </p><h3 id="1-Load"><a href="#1-Load" class="headerlink" title="1. Load"></a>1. Load</h3><p>Loading class through Class’s <code>canonical name</code>: load specific <code>.class</code> file into <code>JVM</code>. After load completion, identify the classloader as <code>CanonicalName+ClassLoader</code>.<br>Classloader instance and Class instance live in heap, their class properties and information located in method area.<br>Loading procedure adapt <code>Parent delegation model</code>, when classloader plan to load class, it will request its parent classloader, while its parent classloader will move on to forward loading request to upper classloader until <code>bootstrap classloader</code>. Classload would load lass only if its parent unable load specific class.<br><code>Parent delegation model</code> is the first security guard line, it ensured safely class loading. Actually it rely on classloader separation principle: different classloader could not interactive directly while loading classes, even loading identical class, different classloader could not sense the other one. Thus inimical class that disguised as core jar, such like <code>java.lang</code>, have no impact to JVM as they could not loaded by <code>bootstrap classloader</code><br>Beware, developer must ensure loading security if they define their own classloader.</p><h3 id="2-Linkage"><a href="#2-Linkage" class="headerlink" title="2. Linkage"></a>2. Linkage</h3><p>Linkage is to merge binary class information into JVM runtime state.<br>Linkage task separate into three steps:   </p><ol><li>verification: ensure validity of .class file, ensure this file obey specification and also suitable for current JVM.</li><li>preparation: allocation memory for class, meanwhile initialize static variable with default value.</li><li>Resolve(optional): resolve class token constant pool into direct reference, but actually it could postponed while referring it in usage.</li></ol><h3 id="3-Initialization"><a href="#3-Initialization" class="headerlink" title="3. Initialization"></a>3. Initialization</h3><p>Initialize static variable in class, and execute static code and constructor defined in class.<br><code>JVM</code> specification strictly defined when to do initialization.:   </p><ol><li>Instantiate object while: key word <code>new</code>, reflection, clone, deserialization.</li><li>Invoking class static method.</li><li>Do assignment to static field of class.</li><li>Invoking method through reflection.</li><li>Initialize its sub-class.(But its base class must guarantee initialized)</li><li>Tagged as bootstrap class while JVM startup.(Simply treated as <code>public static void main(String[]args)</code> method)</li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>jvm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>some oracle tools and introduction</title>
    <link href="/2014/2014-06-24-some-oracle-tools-and-introduction/"/>
    <url>/2014/2014-06-24-some-oracle-tools-and-introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="ASH"><a href="#ASH" class="headerlink" title="ASH"></a>ASH</h2><p>active session history<br>recording trace and performance for each SQL in different grade:<br>instance&#x2F;database&#x2F;session&#x2F;service&#x2F;…  </p><h3 id="recording-single-SQL"><a href="#recording-single-SQL" class="headerlink" title="recording single SQL"></a>recording single SQL</h3><h2 id="AWR"><a href="#AWR" class="headerlink" title="AWR"></a>AWR</h2><p>automatic workload repository<br>monitoring database’s performance includes I&#x2F;O, CPU, latch, lock, log file, buffer usage log, redo log size, (soft&#x2F;hard)parse  </p><h3 id="snapshot-the-whole-database-performance"><a href="#snapshot-the-whole-database-performance" class="headerlink" title="snapshot the whole database performance"></a>snapshot the whole database performance</h3><h2 id="ADDM"><a href="#ADDM" class="headerlink" title="ADDM"></a>ADDM</h2><p>automatic database diagnostic monitor<br>ADDM is a self diagnostic engine designed from the experience of Oracle’s best tuning experts<br>Analyzes AWR data automatically after an AWR snapshot  </p><h3 id="automatically-generate-diagnostic-report-after-analyse-AWR"><a href="#automatically-generate-diagnostic-report-after-analyse-AWR" class="headerlink" title="automatically generate diagnostic report after analyse AWR"></a>automatically generate diagnostic report after analyse AWR</h3><hr><h2 id="v-fixed-table"><a href="#v-fixed-table" class="headerlink" title="v$fixed_table"></a>v$fixed_table</h2><p>This view displays all dynamic performance tables, views, and derived tables in the database.<br>Some <code>V$tables</code> (for example, <code>V$ROLLNAME</code>) refer to real tables and are therefore not listed.  </p><h2 id="DICTIONARY"><a href="#DICTIONARY" class="headerlink" title="DICTIONARY"></a>DICTIONARY</h2><p><code>DICTIONARY</code> contains descriptions of data dictionary tables and views.  </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>oracle</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>clarify different link functions in clojure</title>
    <link href="/2014/2014-06-13-clarify-different-link-functions-in-clojure/"/>
    <url>/2014/2014-06-13-clarify-different-link-functions-in-clojure/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>A great useful <a href="http://blog.8thlight.com/colin-jones/2010/12/05/clojure-libs-and-namespaces-require-use-import-and-ns.html">tutorial</a> and I am there to make this summary.</p><h2 id="refer"><a href="#refer" class="headerlink" title="refer"></a>refer</h2><p>refer takes a symbol argument and maps all the public symbols from that namespace into the current namespace.<br>The symbols are still mapped to the values in their original namespace. By calling refer in the example, you created a namespace mapping from the symbol <code>greetings/println</code> to the Var <code>#&#39;clojure.core/println</code>.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">clojure.core/refer</span> &#x27;clojure.core)<br>(<span class="hljs-name"><span class="hljs-built_in">refer</span></span> &#x27;clojure.core <span class="hljs-symbol">:exclude</span> &#x27;(<span class="hljs-name"><span class="hljs-built_in">map</span></span> set))<br>(<span class="hljs-name"><span class="hljs-built_in">refer</span></span> &#x27;clojure.core <span class="hljs-symbol">:only</span> &#x27;(<span class="hljs-name">println</span> prn))<br></code></pre></td></tr></table></figure><h2 id="require"><a href="#require" class="headerlink" title="require"></a>require</h2><p>To link another class&#x2F;function with our namespace, but its own namespace kept.  Needs canonical namespace to invoke.<br>Loads libs, skipping any that are already loaded. Each argument is either a libspec that identifies a lib, a prefix list that identifies multiple libs whose names share a common prefix, or a flag that modifies how all the identified libs are loaded. Use :require in the ns macro in preference to calling this directly.   </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; (<span class="hljs-name">require</span> &#x27;clojure.string &#x27;clojure.test <span class="hljs-symbol">:verbose</span> <span class="hljs-symbol">:reload</span>) <span class="hljs-comment">;separately</span><br>user=&gt; (<span class="hljs-name">require</span> &#x27;[clojure.string <span class="hljs-symbol">:as</span> string]) <span class="hljs-comment">;use alias</span><br>user=&gt; (<span class="hljs-name">require</span> &#x27;(<span class="hljs-name">clojure</span> string test)) <span class="hljs-comment">;import NS of same root</span><br>user=&gt; (<span class="hljs-name">require</span> &#x27;(<span class="hljs-name">clojure</span> [string <span class="hljs-symbol">:as</span> string] test)) <span class="hljs-comment">; combination</span><br>user=&gt; (<span class="hljs-name">require</span> &#x27;[clojure.data.json <span class="hljs-symbol">:refer</span> <span class="hljs-symbol">:all</span>]) <span class="hljs-comment">; this :refer is the most encouraged method</span><br><br>user=&gt; (<span class="hljs-name">clojure.string/join</span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>])  <span class="hljs-comment">;use ns/fn to invoke</span><br>user=&gt; (<span class="hljs-name">string/join</span> [<span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">3</span>])  <span class="hljs-comment">;use alias to shorten if alias exists</span><br></code></pre></td></tr></table></figure><p>As you need to use <code>namespace/function</code> to refer to target function.</p><h2 id="use"><a href="#use" class="headerlink" title="use"></a>use</h2><p>To import another class&#x2F;function into our namespace, hence target namespace just like <code>merged</code> into your namespace.<br>This function combined <code>require</code> and <code>refer</code>.  But for recent version, they tend to deprecated <code>use</code> by using <code>(require &#39;[clojure.data.json :refer :all])</code>.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure">user=&gt; (<span class="hljs-name"><span class="hljs-built_in">use</span></span> &#x27;clojure.string)<br>user=&gt; (<span class="hljs-name"><span class="hljs-built_in">use</span></span> &#x27;[clojure.string <span class="hljs-symbol">:only</span> [split]])<br>user=&gt; (<span class="hljs-name"><span class="hljs-built_in">use</span></span> &#x27;[clojure.string <span class="hljs-symbol">:exclude</span> [replace reverse]]) <span class="hljs-comment">; To import all except those</span><br><span class="hljs-comment">;since USE will merge target ns into current ns</span><br><span class="hljs-comment">; [:only] option makes it possible to merge partially.</span><br>user=&gt; (<span class="hljs-name">split</span> <span class="hljs-string">&quot;a,b,c&quot;</span> <span class="hljs-regex">#&quot;,&quot;</span>) <span class="hljs-comment">;split is a function defined in [string] ns</span><br></code></pre></td></tr></table></figure><p>You just need to use <code>function</code> to refer to target function directly without referring namespace.</p><h2 id="import"><a href="#import" class="headerlink" title="import"></a>import</h2><p>To import <code>Java</code> class into namespace and shorten the invock name.</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">java.util.Date.</span>) <span class="hljs-comment">;you could invoke this class by its canonical  name</span><br>(<span class="hljs-name"><span class="hljs-built_in">import</span></span> &#x27;java.util.Date)<br>(<span class="hljs-name">Date.</span>) <span class="hljs-comment">;now just calling class name</span><br></code></pre></td></tr></table></figure><p>You could shorten the canonical name and just need to use simple name of a <code>class</code> to refer to target class</p><h2 id="namespace-declare"><a href="#namespace-declare" class="headerlink" title="namespace declare"></a>namespace declare</h2><p>To simply those kinds of link function, use <code>(ns)</code> function to bring them all together.  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">ns</span></span> my-great-project.core<br>    <span class="hljs-string">&quot;This namespace is CRAZY!&quot;</span><br>    (<span class="hljs-symbol">:use</span> [clojure.string <span class="hljs-symbol">:only</span> [split join]] <span class="hljs-symbol">:reload</span>)<br>    (<span class="hljs-symbol">:require</span> clojure.stacktrace<br>        [clojure.test <span class="hljs-symbol">:as</span> test]<br>        (<span class="hljs-name">clojure</span> template walk) <br>        <span class="hljs-symbol">:verbose</span><br>    )<br>    (<span class="hljs-symbol">:import</span> (<span class="hljs-name">java.util</span> Date GregorianCalendar))<br>)<br></code></pre></td></tr></table></figure><p>You could use random quantity of any <code>:use</code> <code>:require</code> and <code>:import</code> in this function.</p><h2 id="example"><a href="#example" class="headerlink" title="example"></a>example</h2><p>An original innovated prime number function:  </p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name"><span class="hljs-built_in">ns</span></span> rugal.core<br>    <span class="hljs-string">&quot;This namespace is belong to Rugal Bernstein!&quot;</span>)<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">aliquot?</span> <span class="hljs-string">&quot;To  determine if a could be aliquoted by b&quot;</span><br>    [a b]<br>    (<span class="hljs-name"><span class="hljs-built_in">=</span></span> <span class="hljs-number">0</span> (<span class="hljs-name"><span class="hljs-built_in">mod</span></span> a b)))<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">smallest-divisor</span><br>    <span class="hljs-string">&quot;Get smallest divisor of a given number&quot;</span><br>    [n]<br>    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">even?</span></span> n)<br>        <span class="hljs-number">2</span><br>        (<span class="hljs-name"><span class="hljs-built_in">loop</span></span> [i <span class="hljs-number">3</span>]<br>        (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name">aliquot?</span> n i)<br>        i<br>        (<span class="hljs-name"><span class="hljs-built_in">recur</span></span> (<span class="hljs-name"><span class="hljs-built_in">+</span></span> i <span class="hljs-number">2</span>))<br>        ))))<br>(<span class="hljs-keyword">defn</span> <span class="hljs-title">prime?</span> <span class="hljs-string">&quot;To determine if given number is prime&quot;</span><br>    [n]<br>    (<span class="hljs-name"><span class="hljs-built_in">if</span></span> (<span class="hljs-name"><span class="hljs-built_in">=</span></span> n (<span class="hljs-name">smallest-divisor</span> n))<br>        <span class="hljs-literal">true</span><br>        <span class="hljs-literal">false</span><br>    ))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>clojure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>keep configuration file untracked in git</title>
    <link href="/2014/2014-06-10-keep-configuration-file-untracked-in-git/"/>
    <url>/2014/2014-06-10-keep-configuration-file-untracked-in-git/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It recently came to bother me when I trying to keep configuration file such as <code>log4j</code> and <code>jdbc</code> in project while avoiding versioning by git automatically.<br>For synchronization aspect, different coder and application need basic file content to tackle with; Whilst various coder and production environment will definitely have disparate configuration.<br>So I need git to control those configuration file while cloning with default configuration, but to keep them untracked if individual coder changed the content in it.  </p><p>Try this after commit your last version:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git update-index --assume-unchanged path/to/those/file<br></code></pre></td></tr></table></figure><p>Command below set <code>assume unchanged</code> bit on, which enable what we want in the future.<br>Now you will not have change stage information for those files. What a great!  </p><p>But be careful if you want to deliberately <code>git add path/to/those/file</code> as git policy unable to track them. One need to reset <code>assume unchanged</code> bit by   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">git update-index --no-assume-unchanged path/to/those/file<br></code></pre></td></tr></table></figure><p>So as to enable file system tracking.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dynamic programming algorithm</title>
    <link href="/2014/2014-05-21-dynamic-programming-algorithm/"/>
    <url>/2014/2014-05-21-dynamic-programming-algorithm/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Dynamic Programming is an algorithmic paradigm that solves a given complex problem by breaking it into subproblems and stores the results of subproblems to avoid computing the same results again.<br>Following are the two main properties of a problem that suggest that the given problem can be solved using Dynamic programming.</p><ol><li><a href="!--swig%EF%BF%BC0--">Overlapping Subproblems</a></li><li><a href="!--swig%EF%BF%BC1--">Optimal Substructure</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>easy using update alternatives</title>
    <link href="/2014/2014-05-11-easy-using-update-alternatives/"/>
    <url>/2014/2014-05-11-easy-using-update-alternatives/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>While it is still very annoying in Linux to switch between different environment like JDK6 and JDK7, even though this is much easier than in Windows.<br>Now <code>update-alternatives</code> gives us a solution.  </p><h2 id="switch-between-different-environements"><a href="#switch-between-different-environements" class="headerlink" title="switch between different environements"></a>switch between different environements</h2><p>Any installed kit and environment by <code>apt-get</code> will automatically registered in <code>update-alternatives</code>, which is in the folder of <code>/etc/alternatives</code>, you could see it has so many symbolic links, different links point to that <code>bin</code> command in real.<br>The strategy above ensured the flexibility to switch between different software and environment, you just need to use  </p><pre><code class="hljs">sudo update-alternatives --config &lt;name&gt;</code></pre><p>or  </p><pre><code class="hljs">sudo update-alternatives --set &lt;name&gt; &lt;bin_path&gt;</code></pre><p>to specify and switch to a new environment.  </p><p>Notice <code>--config</code> is an interactive command hence is very user friendly, whilst <code>--set</code> have no prompt as to make it feasible to write script.  </p><h2 id="install-or-append-new-command"><a href="#install-or-append-new-command" class="headerlink" title="install or append new command"></a>install or append new command</h2><pre><code class="hljs">sudo update-alternatives --install &lt;link&gt; &lt;name&gt; &lt;path&gt; &lt;priority&gt;</code></pre><p>where <code>link</code> is the path where your <code>$PATH</code> will included in, like <code>/usr/bin/java</code>.  </p><p><code>name</code> is the name registered in alternatives, where it shown in <code>/etc/alternatives/&lt;name&gt;</code>, like <code>java</code>.  </p><p><code>path</code> is the real command path where you can use this path to execute target command, like <code>/usr/lib/jvm/java-8.0.5-oracle-amd64/bin/javac</code>  </p><p><code>priority</code> will affect default choice of this command, you could browse others by <code>update-alternatives --config &lt;name&gt;</code> to have a comparison. with higher value means higher priority.  </p><p>example:  </p><pre><code class="hljs">sudo update-alternatives --install /usr/bin/javac    java /usr/lib/jvm/java-8.0.5-oracle-amd64/jre/bin/java   1000</code></pre>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hex dump tool xxd</title>
    <link href="/2014/2014-05-07-hex-dump-tool-xxd/"/>
    <url>/2014/2014-05-07-hex-dump-tool-xxd/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It is rather conveinent to use <code>UltraEditor</code> to edit bytecode file of Java or other binary files, but it is rather hard to achieve it in Linux on a glance, now here comes an evangel — <code>xxd</code>.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">xxd [option] infile  [outfile]<br>option:<br>-b  #xxd will use hex dump by default, use -b to enforce binary dump<br>-r  #revert dump<br>-i  #use C unsigned char array as output format<br>-u  #use upper case in HEX dump<br></code></pre></td></tr></table></figure><p>Thus to dump the hex of a file, just use<br><code>xxd filename</code>  </p><p>This command also could be invoked in <code>VIM</code> enable it to be a hex editor:  </p><ol><li>First open a file in binary mode with <code>vim -b filename</code>, or there will have a <code>0x0a</code> append.</li><li>in command mode type <code>%!xxd</code> to dump the whole file into HEX, the same as xxd command in shell.</li></ol>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgresql sequence operation</title>
    <link href="/2014/2014-05-03-postgresql-sequence-operation/"/>
    <url>/2014/2014-05-03-postgresql-sequence-operation/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>postgresql use <code>serial</code> as sequence type.<br>It conveniently generate a sequence named <code>$tablename_$columnname_seq</code> by default, which I think is so easy to use.  </p><h3 id="set-current-value-for-sequence"><a href="#set-current-value-for-sequence" class="headerlink" title="set current value for sequence"></a>set current value for sequence</h3><pre><code class="hljs">SELECT setval(&#39;sequence_name&#39;, 21, true);</code></pre><p>For which the last parameter <code>true</code> is the tag for <code>first use</code>; if true, it cannot be used as sequencer.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>post JSON data from Curl</title>
    <link href="/2014/2014-04-10-post-json-data-from-curl/"/>
    <url>/2014/2014-04-10-post-json-data-from-curl/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Really very useful tip.<br>To post JSON format data in <code>CURL</code> from termial, you need to specify header parameter<br><code>-H &quot;Content-Type: application/json&quot;</code>.<br>Springmvc would reject this request body if <code>JSON</code> header not specified.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -H &quot;Content-Type: application/json&quot; \<br>    -d &#x27;&#123;&quot;username&quot;:&quot;xyz&quot;,&quot;password&quot;:&quot;xyz&quot;&#125;&#x27;  \<br>    http://localhost:8080/api/login<br></code></pre></td></tr></table></figure><p>Also note that, you could use <code>-X GET</code> option to indicate using <code>GET</code> method at the meantime of using <code>-d</code> option, which might originally treat as a way of <code>POST</code> data.<br>Actually <code>-d</code> option just indicate the data within it need to be treat as <code>request body</code>.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>curl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>binding form variables with Model in springmvc</title>
    <link href="/2014/2014-04-09-binding-form-variables-with-model-in-springmvc/"/>
    <url>/2014/2014-04-09-binding-form-variables-with-model-in-springmvc/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Even if <code>springmvc</code> provides <code>@ModelAttribute</code>, it could only bind name that not start with root variable name, for instance:  </p><h3 id="Model"><a href="#Model" class="headerlink" title="Model:"></a>Model:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderLog</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Client client;<br>    <span class="hljs-keyword">private</span> Restaurant restaurant;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Client</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Integer cid;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Restaurant</span><br>&#123;<br>    <span class="hljs-keyword">private</span> Integer rid;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Action-class"><a href="#Action-class" class="headerlink" title="Action class:"></a>Action class:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span><br><span class="hljs-meta">@RequestMapping(value = &quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderAction</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOG</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(OrderAction.class.getName());<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderLogService orderLogService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ClientService clientService;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestaurantService restaurantService;<br><br>    <span class="hljs-meta">@RequestMapping(method = RequestMethod.POST)</span><br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">create</span><span class="hljs-params">(<span class="hljs-meta">@FormModel(&quot;orderLog&quot;)</span> OrderLog orderLog)</span><br>    &#123;<br>        orderLog.setClient(clientService.findById(orderLog.getClient().getCid()));<br>        orderLog.setRestaurant(restaurantService.findById(orderLog.getRestaurant().getRid()));<br>        orderLogService.save(orderLog);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>(<span class="hljs-string">&quot;SUCCESS&quot;</span>, <span class="hljs-string">&quot;Ordered&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Without any specified assistance, one could only bind variables below onto <code>OrderLog</code> object.<br><code>curl -d&quot;restaurant.rid=1&amp;client.cid=2&quot; &quot;localhost:8080/order&quot;</code><br>It did not includes root name: <code>orderLog</code>, makes it not easy and cosy enough to be binded onto a specified model, at the meantime, makes it harder for maintemance.  </p><hr><h2 id="solution"><a href="#solution" class="headerlink" title="solution"></a>solution</h2><p>After Googling, I found a great <a href="http://jinnianshilongnian.iteye.com/blog/1717180">solution</a> and <a href="http://www.java-allandsundry.com/2013/01/spring-mvc-customizing.html">assist</a>.<br>By adding <code>@formModel</code> annotation and related resolving methods, springmvc now could tackle with it with great convenience.<br>While in integration, you need to register the customized arguments resolver into springmvc framework by add them in <code>springmvc-servlet.xml</code> to prevent potential risks.  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mvc:annotation-driven</span>  <span class="hljs-attr">content-negotiation-manager</span>=<span class="hljs-string">&quot;contentNegotiationManager&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mvc:argument-resolvers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rugal.common.springmvc.method.annotation.RequestJsonParamMethodArgumentResolver&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">bean</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;rugal.common.springmvc.method.annotation.FormModelMethodArgumentResolver&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mvc:argument-resolvers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mvc:annotation-driven</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Now let us use:<br><code>curl -d&quot;orderLog.restaurant.rid=1&amp;orderLog.client.cid=2&quot; &quot;localhost:8080/order&quot;</code>  </p><p>Everything runs smoothly! great!</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>time related operations in postgresql</title>
    <link href="/2014/2014-04-08-time-related-operations-in-postgresql/"/>
    <url>/2014/2014-04-08-time-related-operations-in-postgresql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I am keen on using UNIX epoch to represent date and time data.<br>Without too much dependency on disparate database, it’s also very good at date representation in Java.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--convert from timestamp to epoch seconds</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">EXTRACT</span>(EPOCH <span class="hljs-keyword">FROM</span> <span class="hljs-type">TIMESTAMP</span> <span class="hljs-string">&#x27;2011-05-17 10:40:28&#x27;</span>);<br><br><span class="hljs-comment">--convert from epoch seconds to timestamp</span><br><span class="hljs-keyword">select</span> to_timestamp(<span class="hljs-number">1284352323</span>);<br><br><span class="hljs-comment">--Convert a given Timestamp into another time zone, before using new date format.</span><br><span class="hljs-keyword">select</span> to_char(timezone(<span class="hljs-string">&#x27;UTC&#x27;</span>, to_timestamp(<span class="hljs-number">1372204800</span>)), <span class="hljs-string">&#x27;DD-Mon-YY&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>invoke bash functions in xargs</title>
    <link href="/2014/2014-03-31-invoke-bash-functions-in-xargs/"/>
    <url>/2014/2014-03-31-invoke-bash-functions-in-xargs/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>As <code>xargs</code> could <code>MapReduce</code> multiple lines of input into segregated input, Recently I keen to use it to tackle with many situation that need to use a bash loop.<br>But I find I could not pass parameters to <code>xargs</code> if I want to invoke functions in it.<br>This may happen if you need functional programming, but xargs could hardly achieve it at a glance.<br>You can not invoke functions that defined in same file with <code>xargs</code> command because after retrieving the <code>$PATH</code>, <code>xargs</code> could not got this function.<br>What you need to do is to register this function, or just <code>export -f</code> it.   </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">define a <span class="hljs-keyword">function</span></span><br>function tackle()<br>&#123;<br>    echo $1<br>&#125;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">export</span> <span class="hljs-keyword">function</span>: tackle</span><br>export -f tackle<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">use bash -c to execute <span class="hljs-keyword">function</span>: tackle</span><br>xargs -a b -I&#123;&#125;  bash -c &quot;tackle &#123;&#125;&quot;<br></code></pre></td></tr></table></figure><p>Just as comments explains in script, use <code>export -f </code> to export a bash function.<br>Then use <code>bash -c functionName</code> to invoke this function in <code>xargs</code>.<br>I reckon it will be much popular and hacky to use <code>xargs</code> in the future.<br>Hard to imagine how the ancient <code>UNIX</code> engineers figure out it! It is fabulous!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tmux usage introduction</title>
    <link href="/2014/2014-03-23-tmux-usage-introduction/"/>
    <url>/2014/2014-03-23-tmux-usage-introduction/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="https://tmuxcheatsheet.com/">cheatsheet</a></p><p>assume <code>CONTROL</code> key is <code>CTRL + b</code></p><h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><table><thead><tr><th>function</th><th>command</th></tr></thead><tbody><tr><td>create</td><td><code>$ tmux</code></td></tr><tr><td>delete</td><td><code>$ tmux kill-session -t NAME</code></td></tr><tr><td>list</td><td><code>$ tmux ls</code>, <code>CONTROL s</code></td></tr><tr><td>rename</td><td><code>CONTROL $</code></td></tr><tr><td>attach</td><td><code>$ tmux a -t NAME</code></td></tr><tr><td>detach</td><td><code>CONTROL d</code></td></tr></tbody></table><h2 id="window"><a href="#window" class="headerlink" title="window"></a>window</h2><table><thead><tr><th>function</th><th>command</th></tr></thead><tbody><tr><td>create</td><td><code>CONTROL c</code></td></tr><tr><td>delete</td><td><code>CONTROL &amp;</code></td></tr><tr><td>list</td><td><code>CONTROL w</code></td></tr><tr><td>rename</td><td><code>CONTROL ,</code></td></tr><tr><td>select</td><td><code>CONTROL [0...9]</code></td></tr></tbody></table><h2 id="pane"><a href="#pane" class="headerlink" title="pane"></a>pane</h2><table><thead><tr><th>function</th><th>command</th></tr></thead><tbody><tr><td>create</td><td><code>CONTROL %</code>, <code>CONTROL &quot;</code></td></tr><tr><td>close</td><td><code>CONTROL x</code></td></tr><tr><td>show</td><td><code>CONTROL q</code></td></tr><tr><td>move</td><td><code>CONTROL &#123;</code>, <code>CONTROL &#125;</code></td></tr><tr><td>select</td><td><code>CONTROL q [0...9]</code></td></tr><tr><td>zoom</td><td><code>CONTROL z</code></td></tr><tr><td>convert</td><td><code>CONTROL !</code></td></tr></tbody></table><h2 id="copy-mode"><a href="#copy-mode" class="headerlink" title="copy mode"></a>copy mode</h2><table><thead><tr><th>function</th><th>command</th></tr></thead><tbody><tr><td>enter copy mode</td><td><code>CONTROL [</code></td></tr><tr><td>start selection</td><td><code>SPACE</code></td></tr><tr><td>copy selection</td><td><code>ENTER</code></td></tr><tr><td>paste buffer</td><td><code>CONTROL ]</code></td></tr><tr><td>show buffer</td><td><code>:show-buffer</code>, <code>:showb</code></td></tr><tr><td>browse buffers</td><td><code>:list-buffers</code></td></tr><tr><td>delete buffer #1</td><td><code>:delete-buffer -b 1</code>, <code>:deleteb -b 1</code></td></tr><tr><td>save buffer to file</td><td><code>:save-buffer buf.txt</code></td></tr><tr><td>copy entire pane</td><td><code>:capture-pane</code></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>apply for ideal university</title>
    <link href="/2014/2014-03-19-apply-for-ideal-university/"/>
    <url>/2014/2014-03-19-apply-for-ideal-university/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>如果你已经结束了你的标准化考试，并且已经把学校挑选的过程完成了，那么接下来就变成了一些比较干脆的机械化的流程了，其中包括：   </p><ol><li>在学校的相关申请网站上填写你的信息。</li><li>支付申请费。</li><li>去教务处打印中英文成绩单.</li><li>完成个人陈述文档。</li><li>书写一份个人履历。</li><li>请学校的老师为你写推荐信。</li><li>按照学校要求提交申请材料。</li></ol><p>每一项都比较重要，我们一样一样说。</p><hr><h2 id="填写申请信息"><a href="#填写申请信息" class="headerlink" title="填写申请信息"></a>填写申请信息</h2><p>填写学校的在线申请表格一般来说是每一个外国大学的基本流程，而且这个网站的入口一般都是非常明显和正规的，也有很少一部分的学校是要用纸质材料申请的，老夫觉得这种学校还是不要申请的好，非常麻烦！<br>找到并且注册了以后账号以后就要进行信息填写，这个账号密码是一定要记住的，根据老夫在加拿大学校申请的经验，不少学校要求密码强度比较高的，因此推荐大家使用<code>keepass</code>这个密码管理软件进行复杂密码和账号的管理。<br>按照你的实际情况把信息填写进去，一般都是用全英文的，名字就是用拼音，先名后姓分开，比如老夫就是<code>Yunheng Yao</code>。还有你的生日，生日信息是一定要认真仔细填写的，很多学校申请系统里会根据你的生日生成另外一个密码用于查看录取情况，千万不要弄错了。<br>填写自己家的住址，邮箱，本科学校信息，语言考试成绩，推荐信老师名字、邮箱、职位等，你自己的工作经验也可以写上。注意会要求你写电子邮箱地址，这里推荐用比较正规的邮箱，比如163、yahoo等，gmail当然也非常好，QQ邮箱可能会被申请系统或者对方学校的邮件系统当成黑名单。电子邮件地址是非常重要的，建议新建一个专门用于申请的，这样也比较方便分类。<br>一般填写完毕以后可以保存一下你的的申请信息，这个时候你的申请并没有提交，而只是把信息保存在这个网站上了，想要真正进行提交你需要交钱，没错就是这个腐朽的资本主义套路，交钱才能算是提交了，所以在提交之前你可以进行信息的更改，但一旦<code>submit</code>以后就很难进行修改了，至少加拿大学校的申请系统都是这样的。当然<code>submit</code>是需要付钱的，一般加拿大学校需要<code>100 CAD</code>，按照目前的汇率大概是550元人民币的样子，认真仔细的检查好个人信息以后你就可以进行提交了。</p><h2 id="支付申请费"><a href="#支付申请费" class="headerlink" title="支付申请费"></a>支付申请费</h2><p>加拿大的学校都是如此，只有你付了钱才能<code>submit</code>。申请费的支付其实非常方便，加拿大学校都可以使用信用卡进行支付，<code>VISA</code>&#x2F;<code>MASTER card</code>等都是可以的，这个地方老夫也被银行科普了一下什么是<code>银联</code>，什么是<code>VISA</code>，通过DIY老夫学到了一些平时学不到的知识。<br>可以用父母的信用卡进行支付，你自己也可以去办一张，不过一般自己办一张还是比较难的，银行需要对你的支付能力进行调查，我父亲就办理了<code>工商银行</code>的子母卡，我在我的信用卡上支付会直接在我父亲的卡上扣款。<br>要注意的是用信用卡支付是非常方便的，因为只需要输入卡号、卡的有效日期、卡背后的安全码就能完成支付，这其实是一个非常可怕的事情，你想想看，什么密码都没有，都写在卡上，如果卡被偷了或者被人看到了背后的信息不就成了冤大头了么？确实如此，所以信用卡的信息一定要好好保护好。  </p><h2 id="成绩单"><a href="#成绩单" class="headerlink" title="成绩单"></a>成绩单</h2><p>很多同学都觉得比较麻烦，成绩单需要中英文对照版的，其实这个非常简单，在我的学校里，先去教务处跟老师说一声”我要出国”，一般这个时候老师都大概了解你要干嘛了，于是他会把电子的成绩单，一般是excel格式发给你的邮箱，然后你回去修修改改，注意当然不是作假，是把中文的课程相应的翻译成英文，有的学校还允许删除几门课程，那么你也可以搞起，记得到时候要跟老师说一声你删了哪几门课程，老实一点不会错的。<br>然后再发给老师，最好人也过去一起看看，有任何问题也可以当场改，然后老师说“可以，你去打印出来”，然后就去打印了，老夫打印了20份，中英文的话就是40张纸了，打印出来给老师再检查一下，然后老师会给你敲章，说明这个成绩单还是比较靠谱的。<br>但事情还没有结束，仔细的同学可能在填写申请信息的时候就发现了，对方学校要求的是<code>sealed official transcript</code>，也就是说这个东西应该是被封起来，至少看起来你个人是从来没有接触过，是学校直接发出来的，这个服务在中国大学里基本是没有的，所以只能自己去做。步骤也很简单：  </p><ol><li>先去学校超市里买20张有学校logo的信封，如果能买到官方的信封当然是最好了。</li><li>把中英文的成绩单折在一起，放到信封里去。</li><li>去学校教务处让老师给你的信封的两边封口处都要敲上章，如果有封泥就最好了。</li></ol><p>以上步骤说明这个成绩单是学校出具的，并且你没有修改过，保证了成绩单的权威性和可靠性，这样一来成绩单的问题就结束了。</p><h2 id="个人陈述文档和履历"><a href="#个人陈述文档和履历" class="headerlink" title="个人陈述文档和履历"></a>个人陈述文档和履历</h2><p>这两份文件时非常重要的，教授并不了解你，光看你的GRE、雅思、托福以及你的成绩单，他怎么了解你呢，除了你的自吹自擂，数据上所显示出来的并不是一个活灵活现的你，带有感情和个人感受的文章才是你的武器。</p><ol><li>履历就是<code>CV</code>:<code>curriculum vitae</code>.和求职简历也不是特别一样，主要说的是你的经历和能力，最好能说一下你在学校什么实验室做过什么事情，有什么成就。或者什么比赛里有什么奖，担任什么角色，有什么感悟。在网上找一个模板，然后把自己的经历一项一项填进去就好了。</li><li>个人陈述就是<code>PS</code>:<code>personal statement</code>或者<code>purpose statement</code>.这个东西最好要英语很强的人，或者<code>native English speaker</code> 帮你改一下，我就是先在网上找了一个模板，然后好好改了一下，先找了个英语专业的同学帮我改了一下，然后让一个我在学校认识的<a href="!--swig%EF%BF%BC0--">黑妞</a> 帮我改了一下。感觉还是不错的，好像她让她大学的语言学教授也帮着改了一下。PS中最重要的就是的你的个人感悟了，经历反而不太重要了，因为很多经历可能都大同小异，而且大多数中介都喜欢伪造经历，导致中国学校的申请材料都是千篇一律，让审批老师看的十分无语，这个时候，一个真实的、发自内心思考的个人感悟反而能够让老师觉得你跟别人不一样，比如同样一个去敬老院服务的事情，别人都说，帮助老人让你知道了孝顺的重要性什么的废话，而你却能说处“有一天我也会老，人生的轮回规律在这一刻让我感到十分无力”，这样的话，当然可以让老师从大家抄袭的无聊文章你发现闪亮的你了。因为你在思考这一切，你在动脑子，这是你除了这些基本事情以外和别人不一样的地方。</li></ol><p>还有一点要注意，每个学校都会要求你写CV和PS，尽管CV的内容都是没什么差别的，成绩、排名之类的，但是PS有可能是不一样的，特别是针对你的专业进行书写的，要写清楚你为什么要进这个学校学习，你的学习计划，你的目标，你个人已经在这个领域做过什么事情了，都要针对你所申请的专业进行书写。<br>不要用同一个PS来应付所有学校，这样很容易让学校认为你在敷衍了事，至少PS里对方学校的名字你不能写错吧。</p><h2 id="推荐信"><a href="#推荐信" class="headerlink" title="推荐信"></a>推荐信</h2><p>推荐信是非常重要的，除了你个人对自己的评估以及数值上成就以外，有点名望的人对你的评价当然是最好的参考素材了。<br>有名望的老师，在国际上有名望的当然最好了，没有的话，院长或者研究所主任之类的，当然也是没问题的。  记得一般要2-3个，美国的话需要3位，加拿大一般都只要两位。<br>一般来说是这样的，由于教授比较忙，他不太会有时间帮你从头到尾写一篇文章，特别是在中国，当然你要是本身在国外的话，那当然没问题。所以你要按照你和这个老师的关系写一篇你对自己的评估，切记不要浮夸，要真实造假之类的被发现可就完蛋了。然后你发给那位老师，让他帮你改一下，措辞啊，经历的真实性之类的让他看过总比你自己一个人闭门造车的好。  当老师改好了以后把这些文章保存起来。<br>对了之前在填写申请材料的时候你应该已经了解到，哪些学校需要你把纸质推荐信寄送过去，哪些只需要<code>email</code>就好了，了解了以后就按照学校要求分别写好了让老师弄好就行了。<br>填写申请信息的时候一般会让你把老师的邮件地址、title、工作之类的写进去，到时候教授就回收到一封跟你推荐信有关系的电子邮件，教授可能会自己去填，不过我遇到的所有老师都是让我自己去填的，他们会把邮件转发给我，让我自己把内容填写进去。  </p><h2 id="寄送申请材料"><a href="#寄送申请材料" class="headerlink" title="寄送申请材料"></a>寄送申请材料</h2><p>一般来说申请材料的递交有两种方式，这个要看学校规定来做：</p><ol><li>一种是<code>网上递交</code>，这种就最方便了，你直接上传一些文件就好了，但语言成绩之类的还是需要到考试网站上去提交递交申请的，这个之后再说； </li><li>还有一种方法就是<code>纸质材料寄送</code>了，这种比较常见也有点麻烦，但其实也还好，具体就是首先你要把不同的学校的材料装好，放在一个档案袋里，然后可以去邮局寄挂号信，也可以用EMS等其他国际快递寄送方式.<ol><li><code>挂号信</code>：优点就是价格便宜，但时间比较慢，一般到对方国内就需要两周不到的时候，再到研究生招生办公室就更加久了。大概用这种方式寄出去直到对方学校反馈出来说收到你的材料的时间需要一个月的样子。我寄的就是这种方式，一封信大概20+软妹币，可靠性我觉得也是可以的不错的。</li><li>EMS、UPS等<code>国际快递</code>：这种方式优点就是比较快，我没有寄过，据说一般半个月就肯定已经寄到对方办公室了，当然也只是据说。但是价格非常贵，我问过EMS一封信是多少钱，他们说是230+软妹币。</li></ol></li></ol><p>到底选择哪种寄送方式你需要自己衡量一下，老夫由于准备的比较早，大概10月已经把所有的东西都准备好了，而且加拿大学校的申请时间截止一般都在第二年的3-4月，所以时间有的是，于是老夫就是全都用国际挂号信的形式寄出去了，当然一开始也是很担心的，总是怕信在路上被弄丢了。不过后来还好没丢。用国际挂号信寄送的童鞋寄出去以后可以去中国邮政的官网上查询到自己的信件在哪个地方了，也可以用微信加一个中国邮政的服务号可以方便的追踪自己的邮件信息。有一点要注意，挂号信的feedback信息只包括到到达对方国家这个程度，之后在什么地方你是无法知道的，所以确实有点揪心。<br>据说UPS之类的国际快递在这方面就更加直接和方便了。大家可以根据自己的需要，自己的时间安排来选择。</p><p>现在来说一下<code>语言成绩</code>的寄送。由于老夫是考的雅思，就说一下雅思吧，托福据说也是差不多的。本身你考完一次以后会有EMS寄给你一封成绩单，那个东西我建议你保存起来，以后申请<code>签证</code>的时候可以用上，只要保存一封成绩最好的就可以了，当然时间不能超过距今两年时间。你考完雅思以后网上成绩单上后面那个链接点进去就能登录到雅思成绩自助中心，雅思考试成绩可以免费寄送6封好像，老夫不太记得了，反正可以免费寄送几封，超过了以后就要开始收钱了收费也不贵的，一封大概80+软妹币好像。你在里面一步一步把学校的名字，接受的办公室名字<code>选上</code>就好了，一般不需要自己填写，只要你的学校不是很野鸡的大学，那里基本都有的可以直接选。有的学校可以选择寄送电子成绩单，这个事情你最好跟学校问过。然后等几天就好了，你确认了几天之后他们就会开始寄了。</p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>abroad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>find applicable destination</title>
    <link href="/2014/2014-03-19-find-applicable-destination/"/>
    <url>/2014/2014-03-19-find-applicable-destination/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="为什么要DIY？"><a href="#为什么要DIY？" class="headerlink" title="为什么要DIY？"></a>为什么要DIY？</h2><p>不是为了受虐，不是为了申请差的学校，而是为了申请更好的学校，让更加了解自己的你对自己负责，而不是让对你不可能那么了解的中介主宰你的未来。DIY可以省不少父母的血汗钱，一般来说一个留学中介起价是4W软妹币，这仅仅是雇佣他们的费用，如果要到申请学校的时候，一般每个学校还要额外付费。老夫估计你做一次DIY可以省下5-6W软妹币呢，这些钱用来做其他更有用的事情不是更好吗？如果做了充分的准备，愿意不怕麻烦，愿意对自己的未来负起责任，每个人都可以DIY，毕竟你才是自己的主人!  </p><p>作为DIY留学中十分关键的一步，选学校十分关键，并不是因为这个过程有多么复杂难懂，GRE都能考，<code>perspective student</code> 之类的你都看不懂？关键在于对于信息掌握的不全面，毕竟以前从来没有干过这种信息搜集的事情，我觉得这个是DIY过程中最麻烦的事情了。第一反应就是抓瞎，什么都不懂，什么都不知道，无从下手，无从下口。而中介就恰恰抓到一个心理，就是“留学申请很麻烦”，于是不断加强这一点在学生和家长心中的印象，让大家觉得这个事情没有他们是办不好的，好像他们跟那个学校有熟人一样，呵呵，对于这种自满于“我上面有人”的傻逼一样的中国传统官僚主义思想，老夫是极其鄙视的。<br>在经历了这些以后，老夫基本了解了大部分信息，下面我们来一步一步分解来做。  </p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li>了解有哪些学校可以选择，这里有一个还算不错的<a href="http://www.gradschools.com/">网站</a>，老夫就是在这个网站上找的。</li><li>知道了有哪些学校以后就可以上网搜索一下学校的官网了。进入学校页面，找到学校的招生页面，将学校招生的硬性要求（雅思，GRE，绩点要求）、最迟申请时间都记在一个文件上，我一开始是使用excel的，这样进行比较的时候可以非常直观，所有相同的信息都放在一列上，这样比较起来很直接。</li><li>一家一家把所有学校的信息搜集起来进行比较，根据你自己的能力进行排列，选出你觉得比较有可能的大约10所学校，开始集中搜索</li><li>集中搜索的过程其实跟第二步类似，但需要了解这个学校更多的信息，例如软性要求（如 有论文发表）、学校能给与的奖励（奖学金数量，）、开学时间、申请费用。同时也可以去百度百科看看这个学校的一些评价，毕竟还算是比较客观。这些信息都能对大家的申请有很大帮助。</li><li>现在信息记录的方法也可以改变一下了，老夫是这样做的：所有信息放在一个云同步软件里，老夫用的是<code>dropbox</code>，这样信息会舒服不少哈。然后每一个学校创建一个文件夹，这个学校所有要求都记在一个txt文件的标题上，这样对于一个学校有几个要求的就更加清晰了，同时可以上google地图查一下学校的地点照片，截个图放在里面，比较起来会更加有依据。</li><li>最后要记住的，这个信息搜集的过程并不是做完了就结束了，有可能当你专注于一个学校是发现这个学校有其他的东西，比如有的学校要求必须要GRE，甚至GRE作文要求有3.5分以上之类的，当深入了解以后会有一些新的信息出现。</li><li>完成所有的这些以后你也就知道你应该跟哪个学校联系了，每个学校的招生办公室邮件地址，邮寄地址，学院邮件地址，教授的联系方式之类的都可以收集起来了。</li></ol><h2 id="套磁"><a href="#套磁" class="headerlink" title="套磁"></a>套磁</h2><p>接下来开始就是关于每一个学校的了解阶段了，其实也没有什么特别的地方，就是可能大家都听到过的<code>套磁</code>。<br>其实老夫并没有经历过什么壮丽的套磁，只是发了大概30几封邮件而已，其中大概回复了两封，毕竟老夫写的东西并没有实质性的内容，导致教授看都不想看我的信吧。<br>一般套磁的过程是这样的：  </p><ol><li>找到教授的联系方式。</li><li>查看他的研究方向。</li><li>看到他发表的论文，如果有兴趣最好要找到看一下，这样可以对他的程度了解更多。</li><li>据说一般不推荐学术套，因为几乎不太可能。你要真的有那么NB的能力才能这么做。千万不要班门弄斧！</li></ol><p>以上所有的工作都是为了确定一个专业，确定一个研究方向，不同的学校不同的教授的方向都不一样，你最好有类似的研究经历，能做出自己的贡献，能让教授觉得你是一个可用之才。<br>确定好了要报什么专业，要选什么教授的时候，差不多就可以开始申请啦！  </p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>流程看起来简单，做起来也没那么简单，因为每个学校的页面不一样，这是显然的；每个学校进入招生页面的路径也不一样，这也是显然的；这就对我们找招生信息增加了难度，有的学校页面组织的比较好，招生信息排列的比较明显，但有的学校页面弄的很难看，但是没有关系，一般如果能在10月以前把该考的试、该重考的课程全都弄好的话，你完全有足够的时间去找这些繁复的信息，毕竟分数之类的才是硬性条件。  </p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>abroad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>get your study permit</title>
    <link href="/2014/2014-03-19-get-your-study-permit/"/>
    <url>/2014/2014-03-19-get-your-study-permit/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>加拿大的学校一般都是第二年的<code>二月</code>截止申请，而到了<code>三月</code>到<code>五月</code>就是学校发放录取通知书的时候了。<br>offer是指由奖学金的录取，admit或者简称ad是指没有奖学金的录取了。 但一般说offer是录取通知书，不在乎有没有奖学金。  </p><p>经过了焦急的等待，恭喜你得到了学校的offer，不管这所学校是你理想的还是无所谓的，有地方去总比在家里做无业游民要有骨气的多。其实一般来说只要你是好好学习努力做事情的人，offer或者admit率是有大概60%的，就是说你投10所学校肯定会有6所给你伸出橄榄枝，所以大家不需要惊慌。我也听说过有一位申请米国的比较优秀的童鞋接受率只有40%，但不管怎么样请大家一定要放心相信，你一定会实现你的飞跃梦想的。  </p><p>当然这个东西得到了以后，你差不多可以松一口气了，不过还是不要完全放松，因为接下来就要进行签证申请啦。由于老夫是申请加拿大的，在这里老夫就详细介绍一下加拿大留学签证所需要的过程和文件吧，希望对大家有帮助。<br>加拿大留学签证的申请比较简单，<code>不需要</code>面签，但需要准备不少文件;和美国留学签证不同的是，加拿大留学不需要学校寄过来的什么签证文件，只需要录取通知书的复印件&#x2F;打印件就好了。<br>在说明具体的文件之前我想说一下，加拿大留学签证（英文名为study permit，学习许可）的申请有几种方法,链接也附上了：  </p><ol><li><a href="http://www.cic.gc.ca/english/information/applications/student.asp"><code>普通申请</code></a></li><li><a href="http://www.canadainternational.gc.ca/china-chine/visas/SDS_Application_Kit.aspx?lang=eng"><code>SDS</code></a></li><li><a href="http://www.cic.gc.ca/english/my_application/apply_online.asp"><code>EAPP</code></a></li></ol><p>围绕这几种方法我来稍微讲解一下。  </p><ol><li><code>普通</code>申请是非常慢的，一般需要3个月时间才能通过，而且通过率据说不是<code>非常高</code>，虽然所需要的文件少了很多，但是时间太耽误了，万一你的学校是在5-6月发给你的offer，而你用这种方法申请study permit，那就尴尬了…8-9月开学的话你就完了…费用不了解，地点的话非常有限，只能去加拿大领事馆，只有北京、重庆、香港才有。  </li><li><code>SDS</code>就是老夫所使用的方法了，文件比较多，稍微有点麻烦，但是比较快，老夫是周二去递交的签证，第二周的周一就已经寄到老夫手上了，算起来加上EMS寄送的时候也就4天，当然据说有的人会比较慢，可能要11天，但不管怎么说还是非常快，而且通过率比较高。由于这个方法老夫比较熟悉，可以在后面的篇幅重点讲一下。注意这个方法有一个最重要的要求就是要<code>雅思总分6分</code>，<code>托福</code>再高也没用，还有雅思单项是<code>没有</code>要求的。</li><li><code>EAPP</code>是什么老夫一开始也不知道，后来被人科普了一下知道是<code>electronic application</code>，就是网上申请，老夫才想起来之前其实也已经有所涉猎了，只要在<code>CIC</code>的网上申请页面填入很多信息然后把该寄送的东西寄过去（好像不多），然后在线支付费用就好了。在线申请的页面还是比较科学的，老夫试过感觉比较人性化，用户体验也比较好，但到底多少时间能出结果，我也不知道，反正按照我的感觉，那些跟我差不多时间用EAPP申请的童鞋都没出来，所以老夫觉得SDS比较靠谱。但EAPP的优点就是比较方便，不需要跑到签证中心之类的地方去，只要在网上写个申请就好了。</li></ol><p>以上说的这几种是老夫了解的方法而已，肯定还有其他的方法，这些方法都是加拿大政府所认可的申请方法，不是谁说一句就可以的，这一点请大家一定要分辨清楚，很多中介会吹牛说他们有多厉害，什么政策他们都能搞定。<br>大概说了一下签证方法有哪些，接下来老夫来详细说一下<code>SDS</code>的流程吧。  </p><p>以下所有文件如果没有特殊写明的话必须要有英文或法文版本，而中文可有可无：  </p><ol><li>按照要求填写的<code>学习许可申请表</code> 文件编号为<code>IMM 1294</code>.</li><li>填写申请人的<code>家属表和教育及就业细节表</code>，父母各一份，签字中文就可以</li><li>填写父母的<code>家属表和教育及就业细节表</code>，签字中文就可以</li><li>准备两张签证规格照片，<code>35mm X 45mm</code>，浅色背景。跟照相馆的人说一声就好了，如果自己拍的话记得要露出耳朵，长发要扎起来。照片背后用拼音注明此人姓名及出生日期（日&#x2F;月&#x2F;年）</li><li>有效的护照（所以最好在申请学校的时候就把护照办好）</li><li>两份用中文写有申请人现住址的粘性贴纸(无需信封)。其实这一点我不太同意，我当时去的时候就没有带这个，也没有要求我写。</li><li>指定医院提供的体检表格副本。</li><li>录取通知书。如果有学校提供的关于学费、开学时间等信息的表格话记得也要带上。</li><li>所有就读过的本科及以上学历的学位学历的公证件。成绩单也要带上，但不需要公证。</li><li>大于等于<code>6</code>分的雅思成绩单原件（跟你们说了考的比较的成绩单一定要保留吧）。</li><li>警方提供的无犯罪证明的公证件。</li><li>加拿大政府认可的金融机构所出具的资金证明。</li><li>显示足以支付第一年学费的存款证明，20W软妹币就可以了，不过多也没坏处。如果已经支付学费的话，支付证明也没问题。</li><li>父母的工作证明，工作证明要包含公司名称、联系电话、地址、就业年限、近两年的年收入（我觉得写个平均年收入也没问题）、职称</li><li>如果有中介帮你递送的话需要多填一个表格，不过既然是中介的话，他也应该知道的吧…不说了。</li><li>未满18岁需要填写监护人信息表。</li><li>如果在<code>魁北克</code>读书的话则需要提交魁北克省的接受函(CAQ)</li><li>提交申请费，大约是1089元。</li></ol><p>罗列了很多东西，其实这些都是<code>CIC</code>网上的那份SDS checklist里的内容。  下面详细说一下其中的一些需要注意的条目吧。  </p><h4 id="关于材料递交地点"><a href="#关于材料递交地点" class="headerlink" title="关于材料递交地点"></a>关于材料递交地点</h4><p>如果你选择了SDS计划，那么就必须要到加拿大的签证中心递交材料，简称<code>VAC</code>，这些VAC的地址在CIC网上也有，查起来也很方便。这样一来你选择的余地就很大了，不需要去北京、重庆或者香港了。上海就有一个VAC，在<code>徐汇区的广发银行的二楼</code>，里面全都是各种签证中心，希腊、新西兰等等。<br>他们的工作时间是周一到周五，每天8:00—15:00。办理study permit的人并不会特别多，相比之类非常少，所以不需要太担心。一开始我也不太懂，很着急的冲过去，结果发现办理study permit并不是特别多的，但是办理旅游签证的人超级多，你去看看就会有一种<code>condescence</code>  </p><h4 id="关于体检"><a href="#关于体检" class="headerlink" title="关于体检"></a>关于体检</h4><p>体检必须到加拿大政府制定的医院去体检，大概费用是1700的样子，时间的话不一定，有的童鞋说在北京弄的半个小时就弄完了，老夫在杭州弄了一个下午才弄好，我觉得这个应该是跟医院的执行效率和当时体检的人数是有关系。我当时大概有8个月一起体检吧，护士说已经算是比较少的了，有加拿大的和去英国的，英国体检要求比加拿大少一点，所以英国的那些童鞋会比较早离开。<br>体检的项目其实非常少：  </p><ol><li>验血（这个我有点模糊了）</li><li>验尿</li><li>身高体重</li><li>视力</li><li>胸透</li><li>内科（有个医生给你肚子上按来按去的那种）</li><li>血压</li></ol><p>另外要填表格，大概两个表格吧，声明什么的，说我保证没有艾滋病之类的。<br>体检结束以后会给你一个副本，说你已经体检了，但是体检结果是不会发给你的，只是直接发给了领事馆，到时候要把这个体检副本带去说明你已经体检过了，体检的结果他们会根据你体检副本上的那个ID去查的。  </p><h4 id="关于公证件"><a href="#关于公证件" class="headerlink" title="关于公证件"></a>关于公证件</h4><p>学位证、学历证和无犯罪证明都需要公证，去公证处弄个公证就好了，我一开始以为公证处是一个政府机构，后来发现已经外表个企业了，害得我虚惊一场。我公证了以上这三个文件，每个做了三份，后来发现真是浪费了钱，其实只要弄一份就好了，交上去签证用的非官方表格文件都会退换…<br>关于无犯罪证明，思路就是这样的。先到所在派出所要求他们开具<code>无犯罪证明</code>(中文版，而且他们只会给你中文版)，然后拿着这个证明去公证处让他们公证，并且让他们帮你开具英文的翻译件，这个翻译也是要额外花钱的，不过既然都上了贼船了，花钱也没办法了。  </p><h4 id="关于雅思"><a href="#关于雅思" class="headerlink" title="关于雅思"></a>关于雅思</h4><p>其实这个就是SDS最重要的条件，用于区分优秀学生和土豪的方法，只需要雅思总分6分就能搞定啦，如果没有这个分数就赶紧努力吧，或者只能换一个方法了。<br>想想看如果用SDS就能享受只需1W加元的快速签证通道，童鞋们赶紧努力一下吧。<br>记得要用雅思成绩单的原件，考完以后的寄给你的那个东西是免费的，要是把那个丢了的话要额外交钱多浪费…  </p><h4 id="关于加拿大政府认可的金融机构所出具的资金证明"><a href="#关于加拿大政府认可的金融机构所出具的资金证明" class="headerlink" title="关于加拿大政府认可的金融机构所出具的资金证明"></a>关于加拿大政府认可的金融机构所出具的资金证明</h4><p>这个也是SDS的一个关键，需要找CIC认可的那些金融机构，这个证明被称为<code>GIC</code>(Guarantee of Investment Certification)。据老夫了解有加拿大皇家银行和中国工商银行是可以的，广大银行应该也是可以的，具体请到<code>CIC</code>网站去看。老夫是用加拿大皇家银行的，不过这个银行的手续费比较贵，要1500呢…<br>流程差不多是这样的：  </p><ol><li>你发电子邮件到那个银行的相关邮件地址，说你要这么弄。</li><li>他会回邮件给你，里面有几个附件，还有填写的流程和内容，严格按照里面的填</li><li>把填好的文件寄到那个银行去</li><li>等银行收到你的文件后，他们会给你的原来的电子邮件地址里发邮件，告诉你开好的账号等保密信息 </li><li>支付相关的手续费，还有1W加币的保证金。</li></ol><p>然后就结束了。</p><h4 id="关于存款证明"><a href="#关于存款证明" class="headerlink" title="关于存款证明"></a>关于存款证明</h4><p>由于SDS计划是包含GIC的，因此对银行存款的要求就降低很多，开一个大概20W软妹币的存款证明就好了，冻结时间到开学前就没问题了。当然多也不会出错。  </p><hr><h2 id="我的递签经历"><a href="#我的递签经历" class="headerlink" title="我的递签经历"></a>我的递签经历</h2><p>说了不少了，接下来说一下我去搞签证的经历吧，还是挺简单的。  </p><p><strong>2014.4.21</strong><br>早上睡懒觉了，被老爸说了一顿，开车去上海徐汇区的那个广发银行，还是比较好找的，下了高架就差不多在眼前了。但是一进门发现是复活节放假，要4.22日才上班，怒了，只能回去。不过也有不少人来扑了个空。大家以后也要注意查一下这些北美的节日。我们不在乎这些节日不代表他们不过。  </p><p><strong>2014.4.22</strong><br>想让老爸开心点，早点起来吃个早饭继续走。到了广发银行，还好今天没关门，8点半到，但是人已经超多了，才发现其实8点就已经开门了。被网上那个outdated的时刻表给骗了。这么多人，差点放弃抵抗了，后来说了一下我是申请study permit的，哈，完全不一样，只有4个人在我前面。左右一看这么多人挤在一个小屋子里，都是去旅游和探亲的，深表遗憾啊！<br>轮到我的时候大概是9点多了吧，接待的是一个化妆比较重，但还算是美美的姐姐，粉之类的倒是不多，那美瞳我实在受不鸟，看起来跟咒怨一样。一个一个文件给她，她说成绩单不可以封在信封里，要拿出来，当然没问题啦。有些文件我多填了，也不需要的，那也是好事情哈，总比没填好。后来说我有一个文件写错了，要我重新填一下，原来是我自己的<code>教育就业细节表</code>写错了，不是内容错了，而是表格用错了，还好有惊无险，美美的姐姐打印了出来给我，小心的填写一下就好了。全程大概20分钟，费用是1089RMB，<code>只收现金</code>。</p><p><strong>2014.4.28</strong><br>在公司上班的我突然有邮件通知说我有EMS，我以为是我买的猪肉脯呢，好吧去瞧瞧，哈居然是薄薄的一张大信封，应该是签证了。这么快应该没问题的。拆开一看果然，有一个大大的纸粘在护照页上，非常舒服，仔细摸了一下，感慨万千。  </p><p>我想我的故事应该也到此为止了吧！  </p>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>abroad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>let us study abroad</title>
    <link href="/2014/2014-03-19-let-us-study-abroad/"/>
    <url>/2014/2014-03-19-let-us-study-abroad/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>我知道，不少人需要这样的一篇文档来指导和帮助他们，那些在漫漫留学路上苦苦挣扎的同学们啊，这也许是你们的福音，因为我至今也没有看到过这么详细的DIY文档，为了能让比较迷茫和信息不太通常的留学道路变得简单，为了能让大家节约一些父母的血汗钱，为了不被中介坑害，为了自己更加光明的未来，老夫决定写一篇DIY留学出国的指南，希望对大家有帮助，如果我的语气你看不惯，请不要憋着，大声说出来，反正我也不会改。  </p><p>在开始所有的介绍之前，我必须要说，DIY留学并不是什么可怕的事情，流程也十分清晰，并不像中介那样忽悠的好像个人根本不用指望DIY来留学似的，老夫根本不信，因此在这里老夫十分自信的先和大家说一句，如果你决定要DIY留学的话，请坚持下去，相信自己，不要被中介所诱惑了。  </p><p>然后对老夫自己的情况有一个基本的介绍以供后人参考吧，毕竟有相近的程度来进行参考才可以让自己觉得比较可信吧，至少这是我在看了好多文章以后仍然不太确信的原因。  </p><h3 id="self-introduction"><a href="#self-introduction" class="headerlink" title="self introduction"></a>self introduction</h3><table><thead><tr><th align="left">name</th><th></th><th align="right">value</th></tr></thead><tbody><tr><td align="left">Secondary School</td><td></td><td align="right">ZJUT</td></tr><tr><td align="left">Bachelor Degree</td><td></td><td align="right">Bachelor of Engieering</td></tr><tr><td align="left">Major</td><td></td><td align="right">Software Engineering</td></tr><tr><td align="left">GPA</td><td></td><td align="right">3.77&#x2F;5 or 3.44&#x2F;4</td></tr><tr><td align="left">IELTS</td><td></td><td align="right">6.5(each section&gt;&#x3D;6)</td></tr><tr><td align="left">GRE</td><td></td><td align="right">313</td></tr><tr><td align="left">CET4</td><td></td><td align="right">473</td></tr><tr><td align="left">CET6</td><td></td><td align="right">435</td></tr><tr><td align="left">Target Country</td><td></td><td align="right">Candada</td></tr><tr><td align="left">Target Program</td><td></td><td align="right">Computer Science</td></tr><tr><td align="left">Target Degress</td><td></td><td align="right">Master</td></tr></tbody></table><hr><p>我知道，很多大神看到我的参数都会觉得这样的情况是在是很差，我知道。但不管怎么说，像你们这样的大神不太多，我看到太多的论坛里，大神们都说  <code>“怎么办啊，我六级才658,这样是不是没希望了。。。”</code><br>对于这样的情况我只想说，呵呵。<br>所以像我这么<code>现实</code>的情况应该可以和大多数普通学生所匹配了。 也希望大家能更加自信。  </p><p>本人总共申请了8所学校，其中包括：  </p><h3 id="applied-university"><a href="#applied-university" class="headerlink" title="applied university"></a>applied university</h3><ol><li>University of Manitoba(<code>Offer</code>)</li><li>University of Ontario Institute of Technology(<code>Got no Idea</code>)</li><li>University of Ottawa(<code>insufficient Application Material</code>)</li><li>University of Windsor(<code>Offer</code>)</li><li>Memorial University of Newfoundland(<code>AD</code>)</li><li>University of Brock(<code>WaitList</code>)</li><li>University of McMaster(<code>AD</code>)</li><li>University of Western Ontario(<code>Reject</code>)</li></ol><p>怎么样，看起来这么差的成绩也能也还算不错的结果吧，既然这样为什么还要害怕自己做不好呢？看这篇文章的你肯定能比我做的更好，加油！<br>最后，老夫去了<code>University of Manitoba</code>，因为个人原因。  研究方向是<code>data mining &amp; database</code>，欢迎朋友们来交流。  </p><h3 id="DIY留学费用粗略统计"><a href="#DIY留学费用粗略统计" class="headerlink" title="DIY留学费用粗略统计"></a>DIY留学费用粗略统计</h3><table><thead><tr><th align="left">item</th><th></th><th align="right">price(RMB if not set)</th></tr></thead><tbody><tr><td align="left">IELTS(5)</td><td></td><td align="right">9000 roughly</td></tr><tr><td align="left">GRE(1)</td><td></td><td align="right">1500 roughly</td></tr><tr><td align="left">Application Fee</td><td></td><td align="right">$100 * 7 roughly</td></tr><tr><td align="left">mailing fee</td><td></td><td align="right">7*23 roughly</td></tr><tr><td align="left">physical examination</td><td></td><td align="right">1700</td></tr><tr><td align="left">notary fee</td><td></td><td align="right">700</td></tr><tr><td align="left">VISA fee</td><td></td><td align="right">1089</td></tr><tr><td align="left">total</td><td></td><td align="right">18350 roughly</td></tr></tbody></table><hr><p>这就是你整个留学申请的全部费用了，当然老夫去加拿大，所以有这样的费用，其他国家请自己相应计算一下。<br>想一下如果你请中介的话，中介费是多少呢？一般美国的话，没个4W不行的吧，这还只是启动费，等到申请学校的时候他们会给额外收钱哦，一所学校一般额外收1000元左右。<br>然后你不幸又要参加英语的培训班，那么语言和GRE之类的学完，没个1W不行吧，然后你又能从里面学到多少呢？考试的费用还是要你自己出的哟？  </p><p>DIY申请，又靠谱，又便宜。克服了自己懒惰&#x2F;不愿意面对&#x2F;不自信的心理以后，一切都会变得简单，那么我们开始吧。</p><hr><ol><li><a href="!--swig%EF%BF%BC0--">prepare for standardized examination</a></li><li><a href="!--swig%EF%BF%BC1--">searching for applicable university</a></li><li><a href="!--swig%EF%BF%BC2--">apply for university</a></li><li><a href="!--swig%EF%BF%BC3--">apply for study permit</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>abroad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>standardized examination</title>
    <link href="/2014/2014-03-19-standardized-examination/"/>
    <url>/2014/2014-03-19-standardized-examination/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><p>  这些考试是出国留学的必然需要经历的，不管你认为是磨难还是历练，这几们考试就在那里，不增不减。当然那些土豪之类的我们不予以评价，我们只对靠自己的努力和勤奋出国的童鞋们进行指导。<br>  出国考试一般分为两类，一种是语言考试，例如雅思和托福等是英语国家所需要的语言考试；另外一种叫能力考试，能力考试不太多，但美国比较多，例如耳熟能详的GRE&#x2F;GMAT&#x2F;LSAT&#x2F;SAT等便是能力考试了。那么这两种考试有什么样的区别的？<br>  区别其实很明显，顾名思义，语言考试，注重的主要是语言能力，对于逻辑思维能力，数学运算能力，要求并不像能力考试那样有较高的要求。一般这样的考试听说读写都会考，以良好的成绩完成这种考试就证明你有了基本的在国外生活的能力，不会因为无法开口而在国外发高烧命丧黄泉，保证的是学生的基本语言能力，可以比较正常的进行交流和学习。<br>而能力考试，则更加侧重于逻辑思维能力和运算能力，表达能力方面。例如老夫参加的GRE考试便是这种考试，GRE里没有听力部分，只有写作&#x2F;语文&#x2F;数学，看到语文，不要以为是考中文的语言哟，这里的所有考试都是英文的，中文什么的想都不要想了。想象一下一篇比较复杂的用英文书写的措辞较为严谨，而且词汇相对专业的议论文，你要在几分钟内把几百字的文章看完并完成相应的1-4题，每道题目都会有5个选项，而且选项之间可以说有的非常含糊，但逻辑十分紧凑，如果你完全看懂了这篇文章，或者把这篇文章翻译成中文，你绝对可以无误的作出选择。但现在情况不一样了，这是英文的，而且里面的词汇相对来说比较少见，具有针对性，打个比方，在汉语中，你会用<code>开心</code>来表示你心情的<code>愉快</code>，这是很自然的，也是很常见的用法，但在你写书面文章的时候，你如何表达这种情感会比较好呢？当然是愉悦&#x2F;欢愉&#x2F;欢畅&#x2F;会心一笑 之类的说法会比较有意思啦，当然不是生搬硬套进去的，需要结合具体的context。<br>  老夫选择的是加拿大，而且由于加拿大的一些政策，老夫选择考了雅思（IELTS），并且十分蛋疼的也去考了GRE，就是因为对GRE的畏惧让我延迟了一年才出国，想起来还是很恐怖的，当然这跟老夫垃圾的英语能力有关系，千万不要把老夫所说当成完全事实，也最好不要走老夫的老路，不要恐惧，勇往直前，珍惜时间，拒绝拖延。   </p><h1 id="2-IELTS"><a href="#2-IELTS" class="headerlink" title="2. IELTS"></a>2. IELTS</h1><p>  为什么要选择雅思？而不是托福。托福和雅思都是英语语言考试，但他们之间有几个区别，一个是适用地区差异：托福是由ETS（可以看成米国的教育局）出题，因此在米国高校中认可度很高，而雅思是由剑桥大学的一个部门和澳大利亚的IDP组织等几个组织出题的，在英联邦等地区有较高的认可度，这里要注意，对一个考试的认可度高不代表对另一个考试就不认可。举个例子，加拿大几乎所有的学校都接受托福成绩同时也接受雅思成绩，这点老夫以这个博客的水平担保，而据说米国一些学校也接受雅思成绩。从语气中可以看出，米国高校好像对雅思不太待见，说起来好象是这样的，但雅思官方说IELTS考试在米国更受欢迎，谁知道呢…<br>  第二个不同是考试侧重点略有差异，托福比较侧重做科研方面，对单词要求稍微高一点点，对听力要求也会高一些，而雅思比较侧重实用性，对口语要求比较高，单词相对简单一些。<br>  了解了这些基本的差别以后，在选择适用的考试时还要注意一些细节，老夫选择雅思不仅仅是因为老夫去加拿大，而是因为加拿大有一个留学利好政策，如果雅思考到6分及以上，就可以使用GIC计划及后来推出的SDS计划，这些政策对留学生签证等方面比较有益，而如果你考了托福的满分也是没用的，必须要考雅思。基于这种方面的考量，老夫选择了雅思。  </p><ol><li>学习方法<br>  雅思的学习比较简单，因为雅思单词比较简单，一般来说也没什么gap，所以推荐大家直接做雅思的真题，<code>《剑桥雅思》</code>系列是雅思出卷方出版的题目，所有出版的题目都是雅思考试历史上出现过的真题，也就是说这书里出现的题目真正考试的是绝对不可能出现的，想都不要想了。由于雅思题目会一定的变动，因此太过久远的版本一般都失去参考性，《剑桥雅思》系列截至目前<code>2014-03-19</code>为止一共有9本，一般1-2年出一本，1-9册并不是按照难度区分，而是以出版的时间区分，一般认为1-3册已经基本失去参考性，而目前最新出的第九册则最具参考性，建议考前再做。建议同学们从第四册开始学起。<br>  关于口语学习，个人认为读课文是一个不错的方法，目前市面上有不少《商务英语速成》等书籍，老夫认为是相当不可信的，还是要老老实实做最基本的事情最靠谱。老夫推荐尽量多用英语进行思考，例如看到一位女生，就想一下如何形容她呢？当然要用英语，然后组织一下语言，默默多想几遍等到说熟练以后再换一个目标进行描述（什么？你说让老夫教你泡妞？呵呵），这样对你一定很有帮助，但要记得英语这种东西毕竟需要一个语言环境，身处在这样的中文环境中，一定要逼迫自己多用英语才能提高口语。<br>  顺带提一句，如果你非常努力的学习训练自己的口语，但考出来还是只有<code>6</code>分或者<code>6.5</code>分，请不要难过，这个分数一般来说已经是中国学生的极限了。  </li><li>报名<br>  在这个<a href="http://ielts.etest.net.cn/">中国雅思</a>报名，报名流程相对来说比较简单，按照要求填好就好了。<br>  预订雅思考位需要先付钱，目前报考一次需要￥1700，比托福和GRE都要贵。但不付钱也是可以先查看空位的。建议大家要提前1-2个月报名，出国越来越火热，雅思也越来越火热，一般不提前几个月是定不到考位的。  </li><li>注意事项<br>  考完以后要10个工作日才能出成绩，也就是两个星期。之后会在网上显示尼的成绩，同时一段时间以后用会有EMS寄送的成绩单，这个成绩单最好保管好，因为后来有些地方需要用到，重新邮寄是要花钱的。</li></ol><h1 id="3-GRE"><a href="#3-GRE" class="headerlink" title="3. GRE"></a>3. GRE</h1><p>在讲GRE以前我来先科普一下GRE和其他几个能力考试的差别。  </p><ul><li>GRE  米国研究生入学考试，除商科和法学以外都可以考。</li><li>GMAT 一般用于申请商科master及doctor，单词比GRE简单，但逻辑比GRE复杂。</li><li>LSAT 一般用于法学master及doctor申请，单词和逻辑都比GRE复杂。</li><li>SAT  米国高考，一般用于申请米国本科。</li></ul><p>GRE的单词非常复杂，而且比较专业，但其实实用性很强，能够很专业和精准的表达意思，所以学好GRE其实对出国留学生活有不错的帮助！只是复习GRE的过程确实对我来说有些痛苦。  </p><ol><li>学习方法<br>  GRE的学习分为三个部分，但对于中国学生来说只有两个部分，一个是作文，一个是语文，数学这一部分对普通的中国学生都是没有问题的。<br>  作文的话要学习范文，并最好在阅读过程中体会复杂句子及逻辑的使用技巧。<br>  语文主要分为填空和阅读理解，但自己最难的就是单词这个硬坎了，过了单词这一关还要加强自身对英语的理解，GRE阅读中的长难句是十分蛋疼的。搜索<code>要你命3000</code>  <code>阅读36套</code> <code>陈圣元填空</code>即可！个人认为背好这三千单词其实不太够，背熟以后应该再看看<code>红宝书</code>.<br>  数学部分，只要单词看的懂，做出来是没问题的！  </li><li>报名<br>  <a href="http://gre.etest.net.cn/login.do?lang=CN">GRE考位</a>, 类似于雅思报名。</li><li>注意事项<br>  有一点要注意的是，考试成绩出来以后要查成绩并不是像雅思一样在原来的报名网站上查的，要去米国ETS GRE的那个网站查成绩，出成绩的时候会有邮件通知，到时候去那个网站，注册一个帐号就可以了。</li></ol>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
    <tags>
      
      <tag>abroad</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>using winmanager and nerdtree</title>
    <link href="/2014/2014-03-18-using-winmanager-and-nerdtree/"/>
    <url>/2014/2014-03-18-using-winmanager-and-nerdtree/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><code>winmanager</code> is a windows manager used in VIM to tackle with multiple windows.<br>As for <code>nerdTree</code>, an delicate VIM plugin for tree view browsing throughout folder tree.<br>But when integrating these two plugins together, One might find it always have an extra window opened.<br>In this situation, you need to make some code modification in <code>winmanager.vim</code> file.  </p><p>At line <code>1059</code>:  </p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-comment">&quot; toggle showing the explorer plugins.</span><br>function! <span class="hljs-symbol">&lt;SID&gt;</span>ToggleWindowsManager()<br><span class="hljs-keyword">if</span> IsWinManagerVisible()<br><span class="hljs-keyword">call</span> <span class="hljs-variable">s:CloseWindowsManager</span>()<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">call</span> <span class="hljs-variable">s:StartWindowsManager</span>()<br>exec <span class="hljs-string">&#x27;q&#x27;</span>   <span class="hljs-comment">&quot;Just add this line</span><br>end<br><span class="hljs-keyword">endfunction</span><br></code></pre></td></tr></table></figure><p>Now, <code>winmanager</code> and <code>nerdTree</code> collaberating well!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bash read line from file</title>
    <link href="/2014/2014-03-13-bash-read-line-from-file/"/>
    <url>/2014/2014-03-13-bash-read-line-from-file/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Sometimes the <code>readline</code> functionality is required and <code>bash</code> could tackle it.<br>Seems it needs redirect or pipe to provide data.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">using pipe</span><br>cat txt | \<br>while read line<br>do<br>    echo $line<br>done<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">using redirect</span><br>while read line<br>do<br>    echo $line<br>done &lt; `cat txt`<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>linux date command</title>
    <link href="/2014/2014-03-13-linux-date-command/"/>
    <url>/2014/2014-03-13-linux-date-command/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I found <code>date</code> is rather a useful command to encode or decode timestamp from epoch or human readable date.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">date [options]   [+format]<br>--date=&quot;TIME&quot;  #use this to input a human readable date<br><span class="hljs-meta prompt_"># </span><span class="language-bash">example: <span class="hljs-built_in">date</span> --<span class="hljs-built_in">date</span>=<span class="hljs-string">&quot;2014-03-12 15:13:10&quot;</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Notice --<span class="hljs-built_in">date</span>  option could also <span class="hljs-built_in">read</span> seconds-from-epoch</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">example: <span class="hljs-built_in">date</span> --<span class="hljs-built_in">date</span>=<span class="hljs-string">&quot;@1396572606&quot;</span></span><br><br>--set=&quot;TIME&quot;  #set linux date as specified TIME<br><br>+%s   #format as secnds from epoch<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">example:</span><br>date --date=&quot;2013-06-01 12:00:05&quot; +%s<br><span class="hljs-meta prompt_"># </span><span class="language-bash">1370059205</span><br></code></pre></td></tr></table></figure><p>But actually, the <code>-s</code> option will not change linux time from <code>CMOS</code> level, linux time will follow what <code>CMOS</code> tick tock.  </p><p>There is another command to modify linux time from <code>CMOS</code> level.<br><code>hwclock --set --date=&quot;2011-08-14 16:45:05&quot;</code><br>It will surely set hardware clock as <code>2011-08-14 16:45:05</code></p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>set ubuntu screen saver idle time</title>
    <link href="/2014/2014-03-05-set-ubuntu-screen-saver-idle-time/"/>
    <url>/2014/2014-03-05-set-ubuntu-screen-saver-idle-time/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>After searching for a very long time, I got some answer at last:  </p><p>first method is to use <code>gsettings</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">gsettings set org.gnome.settings-daemon.plugins.power sleep-display-ac 600<br>gsettings set org.gnome.settings-daemon.plugins.power sleep-display-battery 600<br>gsettings set org.gnome.desktop.session idle-delay 600<br>gsettings set org.gnome.desktop.screensaver idle-activation-enabled &#x27;true&#x27;<br>gsettings set org.gnome.desktop.screensaver lock-enabled &#x27;true&#x27;<br>gsettings set org.gnome.desktop.screensaver lock-delay 900<br></code></pre></td></tr></table></figure><p>another way is:  </p><p><code>vim ~/.gconf/desktop/gnome/%gconf.xml</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">gconf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;idle_delay&quot;</span> <span class="hljs-attr">mtime</span>=<span class="hljs-string">&quot;1282047258&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;int&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">gconf</span>&gt;</span><br></code></pre></td></tr></table></figure><p>which indicate default idle time is <code>2</code> minutes. Interesting!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>gnome</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>init postgres password</title>
    <link href="/2014/2014-03-04-init-postgres-password/"/>
    <url>/2014/2014-03-04-init-postgres-password/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I just reinstalled my Laptop and it now become <code>Ubuntu 12.04 LTS</code>, I love this.<br>After whole day of installing, finally I got my postgresql installed, it is a good time to record how to initialize password for new installed postgresql.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo -u postgres psql -c &quot;ALTER USER postgres PASSWORD &#x27;postgres&#x27;;&quot;<br></code></pre></td></tr></table></figure><p>This will set your postgres USER’s password into <code>postgres</code>.  </p><p>Then just use <code>psql -U postgres -h 127.0.0.1</code> to logon.  </p><p>But if you encountered<br><code>sql: FATAL:  password authentication failed for user &quot;postgres&quot;</code>  </p><p>then check the file &#x2F;etc&#x2F;postgresql&#x2F;{VERSION}&#x2F;main&#x2F;pg_hba.conf:<br>There must be a line like this as the first non-comment line:<br><code>local   all         postgres              ident</code><br>After this, remember to restart your <code>postgresql</code>.  </p><p>For newer versions of PostgreSQL <code>ident</code> actually might be <code>peer</code>. That’s OK also.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>the black girl I met in ZJUT</title>
    <link href="/2014/2014-02-27-the-black-girl-i-met-in-zjut/"/>
    <url>/2014/2014-02-27-the-black-girl-i-met-in-zjut/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I met <code>Princess</code> at around march in 2013, it’s spring.<br>I notice this girl was sitting on a bench in JianXing of my university. I never brave enough to actively talk to foreign people before, it’s a nice attemptation.  </p><p>Her name is <code>Princess</code>, actually I still do not know her real English name.<br>Seems she did not want me to know it.  </p><p>We became pretty good friend!<br>We go to supermarket to buy some stuff for her to use, I introduced what kind of thing that are not good in China.<br>Actually, good stuffs in China rather uncommon.<br>After all, it’s <code>China</code>.  </p><p>I helped her to shopping online in TB, quite fashion right?<br>At least Princess was very happy!<br>It’s so good to let a foreign people feel like at home.<br>How I wish I could have a friend like me if I arrive Canada.  </p><p>We learnt a lot of history and political stories of different continents from each other.<br>This might due to the reason that there is no other people to depict a world that is totally disparate with current one.<br>I appreciate this experience.  </p><p>I will remember this black girl, who told me what outer world feels like.<br>Who told me how a foreign student felt in a strange country that language almost unable to express your thought.<br>Who shown me what impression chinese people leave in their mind.<br>Who let me know how foreign man thinking while they are chasing a chinese girl.<br>Those all broaden my horizen.</p><p>Thanks to Princess, accompanied me at my most arduous time. Makes me believe tomorrow will better than today.<br>Princess back to her hometown in July 2013, I never met her since then.  </p><p>Princess reviewed my PS last year, the PS that you reviewed is perfect!  </p><pre><code class="hljs">Hello Princess:    It has been a very long time since I contact with you last time. How is everything going?    I already got an offer from a notable university and I might have scholarship. Thanks for you assistance in my PS.    I appreciate it as witness of our friendship.    Wish you all good and achieve what you want!    Wish we could meet again in this life!Best regard!Rugal</code></pre>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>install extensions in postgresql</title>
    <link href="/2014/2014-02-26-install-extensions-in-postgresql/"/>
    <url>/2014/2014-02-26-install-extensions-in-postgresql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><h2 id="way-to-get-extensions-in-ubuntu"><a href="#way-to-get-extensions-in-ubuntu" class="headerlink" title="way to get extensions in ubuntu"></a>way to get extensions in ubuntu</h2><p><code>sudo apt-get install postgresql-contrib</code>  </p><ol><li>libossp-uuid16:amd64 (1.6.2-1.3, automatic)</li><li>postgresql-contrib-9.1:amd64 (9.1.12-0ubuntu0.13.10, automatic)</li><li>postgresql-contrib:amd64 (9.3+146really9.1+148)</li></ol><p>Action above will download all control file into Postgresql software folder.<br>Like <code>/usr/share/postgresql/9.1/extension</code>  </p><p>available extensions list:  </p><pre><code class="hljs">adminpack               autoincbtree_gin               btree_gistchkpass                 citextcube                    dblinkdict_int                dict_xsynearthdistance           fuzzystrmatchhstore                  insert_usernameint_aggregate           isnlo                      ltreemoddatetime             pageinspectpg_buffercache          pgcryptopg_freespacemap         pgrowlockspg_stat_statements      pgstattuplepg_trgm                 pgxmlrefint                  segsslinfo                 tablefunctest_parser             timetraveltsearch2                uuid-ossp</code></pre><h2 id="1-Version-before-9-1"><a href="#1-Version-before-9-1" class="headerlink" title="1. Version before 9.1"></a>1. Version before 9.1</h2><p>You need to manually install them by <code>psql</code> command:<br><code>psql -U user_name -d database_name -f module_name.sql</code>  </p><p>For example, if your administrative user was named <code>postgres</code> and your database was also named <code>postgres</code> and the module you wanted was tablefunc, you would type:<br><code>psql -U postgres -d postgres -f tablefunc.sql</code>  </p><p>or use <code>\i</code> command in psql:<br><code>\i /usr/share/postgresql/9.1/extension/tablefunc--1.0.sql</code>  </p><h2 id="2-Version-after-9-1-included"><a href="#2-Version-after-9-1-included" class="headerlink" title="2. Version after 9.1 included"></a>2. Version after 9.1 included</h2><p>After 9.1(included) version, postgresql provide new command to install extensions.<br><code>CREATE EXTENSION &quot;tablefunc&quot;;</code><br>That is much easier!  </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL connect by in postgresql</title>
    <link href="/2014/2014-02-26-sql-connect-by-in-postgresql/"/>
    <url>/2014/2014-02-26-sql-connect-by-in-postgresql/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> test(id <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key,pid <span class="hljs-type">int</span>, misc <span class="hljs-type">character</span> <span class="hljs-type">varying</span>(<span class="hljs-number">10</span>));<br><span class="hljs-comment">--simplest structure of a tree table</span><br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;Boss&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;Manager&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;CFO&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">4</span>,<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;CTO&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;developer&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">6</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;QA&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">7</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;support&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;PM&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> test <span class="hljs-keyword">VALUES</span>(<span class="hljs-number">9</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;product&#x27;</span>);<br><span class="hljs-comment">-- as required this is a level tree driven by pid.</span><br><br><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> tree(id,pid,misc,depth,path) <span class="hljs-keyword">AS</span><br>(<br>    <span class="hljs-keyword">SELECT</span> id,pid,misc,<span class="hljs-number">1</span>,<span class="hljs-keyword">ARRAY</span>[id]<br>        <span class="hljs-keyword">FROM</span> test<br>        <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span><br>    <span class="hljs-keyword">UNION</span><br>    <span class="hljs-keyword">SELECT</span> a.id, a.pid, a.misc, b.depth<span class="hljs-operator">+</span><span class="hljs-number">1</span>, b.path<span class="hljs-operator">||</span>a.id<br>        <span class="hljs-keyword">FROM</span> test a, tree b<br>        <span class="hljs-keyword">WHERE</span> a.pid<span class="hljs-operator">=</span>b.id<br>)<span class="hljs-comment">-- Using depth first search: order by path</span><br><span class="hljs-keyword">SELECT</span> id,pid,misc,depth,path <span class="hljs-keyword">FROM</span> tree <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> path;<br><br> id <span class="hljs-operator">|</span> pid <span class="hljs-operator">|</span>   misc    <span class="hljs-operator">|</span>  path<br><span class="hljs-comment">----+-----+-----------+---------</span><br>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> Boss      <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>&#125;<br>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Manager   <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> PM        <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>&#125;<br>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> product   <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>&#125;<br>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> CFO       <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;<br>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> CTO       <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;<br>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> developer <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> QA        <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>&#125;<br>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> support   <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>&#125;<br><br><br><span class="hljs-comment">-- Using breadth first search: order by path</span><br><span class="hljs-keyword">SELECT</span> id,pid,misc,depth,path <span class="hljs-keyword">FROM</span> tree <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> depth;<br><br> id <span class="hljs-operator">|</span> pid <span class="hljs-operator">|</span>   misc    <span class="hljs-operator">|</span> depth <span class="hljs-operator">|</span>  path   <br><span class="hljs-comment">----+-----+-----------+-------+---------</span><br>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> Boss      <span class="hljs-operator">|</span>     <span class="hljs-number">1</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>&#125;<br>  <span class="hljs-number">2</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> Manager   <span class="hljs-operator">|</span>     <span class="hljs-number">2</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;<br>  <span class="hljs-number">3</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> CFO       <span class="hljs-operator">|</span>     <span class="hljs-number">2</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>&#125;<br>  <span class="hljs-number">4</span> <span class="hljs-operator">|</span>   <span class="hljs-number">1</span> <span class="hljs-operator">|</span> CTO       <span class="hljs-operator">|</span>     <span class="hljs-number">2</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>&#125;<br>  <span class="hljs-number">5</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> developer <span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;<br>  <span class="hljs-number">6</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> QA        <span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>&#125;<br>  <span class="hljs-number">7</span> <span class="hljs-operator">|</span>   <span class="hljs-number">4</span> <span class="hljs-operator">|</span> support   <span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">7</span>&#125;<br>  <span class="hljs-number">8</span> <span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> PM        <span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>&#125;<br>  <span class="hljs-number">9</span> <span class="hljs-operator">|</span>   <span class="hljs-number">2</span> <span class="hljs-operator">|</span> product   <span class="hljs-operator">|</span>     <span class="hljs-number">3</span> <span class="hljs-operator">|</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">9</span>&#125;<br></code></pre></td></tr></table></figure><p>According to official Document, <code>WITH</code> syntax means to use a temporary table to simpify query.  </p><h3 id="1-define-temporary-table"><a href="#1-define-temporary-table" class="headerlink" title="1. define temporary table"></a>1. define temporary table</h3><p><code>tree(id,pid,misc,depth,path)</code> defines columns of temporary table to project in query after this.<br>As you could tell that <code>id</code> <code>pid</code> and <code>misc</code> columns are originally existed in main table.<br><code>depth</code> and <code>path</code> column are defined to adopt to different search strategies.  </p><h3 id="2-initial-row-of-recursion"><a href="#2-initial-row-of-recursion" class="headerlink" title="2. initial row of recursion"></a>2. initial row of recursion</h3><p><code>SELECT</code> snipplet above <code>UNION</code> is defined as initial statement.<br><code>SELECT id, pid, misc, 1, ARRAY[id] FROM test WHERE id=1</code><br>This defines the start position of a recursive search, which id is 1, just like the root of a tree.<br>All the rest queries are based on this statement.<br><code>ARRAY[id]</code> create an array to record hierachy of a spcified rows.</p><h3 id="3-recursion-statement"><a href="#3-recursion-statement" class="headerlink" title="3. recursion statement"></a>3. recursion statement</h3><p>The <code>SELECT</code> statement under <code>UNION</code> is defined as recursive statement, temporary table itself could be referred in this section.<br><code>SELECT a.id, a.pid, a.misc, b.depth+1, b.path||a.id FROM test a, tree b WHERE a.pid=b.id</code><br><code>projection</code> must be identical with initial statement, thus makes it possible to recurse.<br>This statement join with temporary table and search specified rows that match predication. This is how recursion happened.<br><code>b.path||a.id</code> makes pre-defined array to append with newest row.  </p><h3 id="4-return-statement"><a href="#4-return-statement" class="headerlink" title="4. return statement"></a>4. return statement</h3><p>A semicolon is used to indicate an end of a SQL.<br><code>SELECT id,pid,misc,depth,path FROM tree order by path;</code><br><code>order by</code> syntax will affect different strategies of searching.<br>    * DFS: path<br>    * BFS: depth</p><p>BTW, I found a table function named <code>connectby</code> has the same functionality with <code>WITH RECURSIVE</code>.<br>I assume this function is built base on <code>WITH RECURSIVE</code> statement.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ajax usage</title>
    <link href="/2014/2014-02-25-ajax-usage/"/>
    <url>/2014/2014-02-25-ajax-usage/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I love async feature of AJAX so much. I won’t use it if JS could only send request synchroly.<br>Also way to use it rather easy enough:  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getXHR</span>(<span class="hljs-params"></span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> xmlhttp;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">window</span>.<span class="hljs-property">XMLHttpRequest</span>)<br>    &#123;<span class="hljs-comment">// code for IE7+, Firefox, Chrome, Opera, Safari</span><br>        xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<span class="hljs-comment">// code for IE6, IE5</span><br>        xmlhttp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActiveXObject</span>(<span class="hljs-string">&quot;Microsoft.XMLHTTP&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> xmlhttp;<br>&#125;<br></code></pre></td></tr></table></figure><p>Function above will get an available XML http request object, which is the key component of async-communication.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">data</span>)<br>&#123;<br>    <span class="hljs-keyword">var</span> xhr = <span class="hljs-title function_">getXHR</span>();<br>    xhr.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, <span class="hljs-string">&quot;TaskServlet&quot;</span>, <span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//xhr.open(&quot;GET&quot;, &quot;TaskServlet?name=value&quot;, true);</span><br>    xhr.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>    <span class="hljs-keyword">var</span> string = <span class="hljs-string">&quot;id=&quot;</span> + data.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;&amp;task=&quot;</span> + data.<span class="hljs-property">task</span> + <span class="hljs-string">&quot;&amp;owner=&quot;</span> + data.<span class="hljs-property">owner</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(string);<br>    xhr.<span class="hljs-title function_">send</span>(string);<br>    <span class="hljs-comment">//xhr.send(); use this in GET method</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Right? Light weight and easy to handle.<br>Notice different parameter passing usage should be taken when in disparate request METHOD.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>javascript first nip</title>
    <link href="/2014/2014-02-25-javascript-first-nip/"/>
    <url>/2014/2014-02-25-javascript-first-nip/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I told myself that I do not like javascript, actually it is just a joke, you never know when there is a requirement to use it.<br>Honestly, Javascript is very powerful. Now, I learn JS not for further deeping, but for slightly using its async-functionality in AJAX.  </p><h2 id="load-JS-in-html"><a href="#load-JS-in-html" class="headerlink" title="load JS in html"></a>load JS in html</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;js/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>it’s alright to put it in any position for my level of JS. Actually I hear about the position and sequence of loading JS will have some influence on rendering performance and some logic.  </p><h2 id="navigation"><a href="#navigation" class="headerlink" title="navigation"></a>navigation</h2><p>Navigating through HTML is a tough work, but a JS library called <code>jQuery</code> could achieve this without too much burden.  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> rows = $(<span class="hljs-string">&quot;tr&quot;</span>, <span class="hljs-string">&quot;#bodystart&quot;</span>);<br><span class="hljs-comment">//Matching tag by id:bodystart first, then filter all &lt;tr&gt; tag inside this context</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; rows.<span class="hljs-property">length</span>; i++)<br>&#123;<br>    <span class="hljs-comment">//matching a input tag with specified attribute. Using single row as context.</span><br>    <span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>, rows[i])[<span class="hljs-number">0</span>].<span class="hljs-property">checked</span>)<br>        <span class="hljs-keyword">continue</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;R&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>The <code>context</code> means searching action will happen only in given scope, which shrink our filter base and easier for targeting a specified tag.  </p><p>Well I do not want to further into this, Javascript code is bullshit. It just makes JS developer feel like achieving great compare with C&#x2F;C++&#x2F;Java developer whose work are not directly revealed.<br>But actually it’s not that much, please be modest JS developers.<br>I’d rather pay more attention on <code>C</code>, <code>Java</code>.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>install KVM on ubuntu</title>
    <link href="/2014/2014-02-13-install-kvm-on-ubuntu/"/>
    <url>/2014/2014-02-13-install-kvm-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>First of all you need to check your PC have the capability to use the kernel based virtualization.<br>Checking by using command below:<br><code>sudo egrep &#39;(vmx|svm)&#39; --color=always /proc/cpuinfo</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">flags       : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid<br></code></pre></td></tr></table></figure><p>If you found this command output nothing, just switch to another virtualization software as your PC does not support KVM.  </p><p>Then to install KVM component:<br><code>sudo apt-get install qemu-kvm kvm-ipxe ikvm ubuntu-vm-builder libvirt-bin bridge-utils</code>  </p><p>After installation, the virtual network card is created by default, so just start virtual network card process:<br><code>sudo service libvirt-bin start</code>  </p><p>Before making use of the <code>virsh</code> command to operate VM in real, you need to grant permission to operate them by adding into group:<br><code>sudo adduser rugal libvirtd</code><br><code>sudo adduser rugal kvm</code><br>Just replace <code>rugal</code> with your own user name.  </p><p>Now just check if you have the right command and permission to execute below:<br><code>virsh --connect qemu:///system list --all</code><br>Our installation procedure proven sucessful as output below:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">Id    Name                           State<br>----------------------------------------------------<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>virtualization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kvm virtual machine usage</title>
    <link href="/2014/2014-02-12-kvm-virtual-machine-usage/"/>
    <url>/2014/2014-02-12-kvm-virtual-machine-usage/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I have successfully installed KVM virtual machine for a very long time, but I did not do some actual jobs on it yet.<br>Today I am started to do some developing jobs towards Hadoop eco-system, which needs virtual machines for a better and clean workspace.  </p><h2 id="create-VM"><a href="#create-VM" class="headerlink" title="create VM"></a>create VM</h2><p>Operate according to this <a href="http://www.havetheknowhow.com/Configure-the-server/Configure-KVM.html">doc</a>, which is already detailed to fully create a KVM machine. I rewrite the <a href="http://githubpage.u.qiniudn.com/build-vm">build-vm</a> script for creating VM.<br>During the installation, I encountered some problems. I just wanna share them online.<br>Notice that <code>--dest</code> is the parameter that VM file will be stored, you need to create the folder name yourself, or KVM will have error stack at the final stage! killing time.  </p><p>If you found it rather slow to initially create a VM, this might caused by the slow network between you and source provider, in my experiment, I use 163 as source provider, be aware of this connection speed between you and source server.  </p><p>After fetching bin files from source server, maybe it will have a error that shows <code>Could not found libvirt</code>, whenever this happens, please startup <code>libvirt</code> by:<br><code>sudo service libvirt start</code>  </p><p>After a around  15 mins, the automatical installation procedure already finished and it will deploy to the folder that you specified in <code>build-vm</code> script.  </p><h2 id="clone-VM"><a href="#clone-VM" class="headerlink" title="clone VM"></a>clone VM</h2><p>It also very simple and easy to clone a VM rather than recreate a VM from network again!<br>For more details, please refer to <a href="http://www.havetheknowhow.com/Configure-the-server/Configure-KVM.html">clone</a><br><code>&gt; virt-clone --connect=qemu:///system -o oldVM -n newVM -f /home/rugal/VM/new/NewVM.gcow2</code>  </p><h2 id="step-into-VM"><a href="#step-into-VM" class="headerlink" title="step into VM"></a>step into VM</h2><p>Now its time to startup our VM, how exciting!<br>Use <code>list</code> command:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">virsh --connect qemu:///system list --all</span><br> Id    Name                           State<br> ----------------------------------------------------<br>  -     master               shut off<br></code></pre></td></tr></table></figure><p>Use <code>start</code> to startup VM named <code>master</code><br><code>&gt; virsh --connect qemu:///system start master</code>  </p><p>After installation, the first thing you might to do is use SSH to connect into VM, but actually you do not know about the DHCP allocated IP adress, here I found a method to get IP for your new created VM.  </p><p>First use <code>virsh</code> command to find out MAC address of your VM.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">virsh domiflist master.</span><br>Interface  Type       Source     Model       MAC<br>-------------------------------------------------------<br>vnet0      bridge     virbr0     virtio      52:54:00:9b:9f:d2<br></code></pre></td></tr></table></figure><p>Then use ARP scan to determine the allocated IP.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">arp -a</span><br>? (192.168.122.50) at 52:54:00:9b:9f:d2 [ether] on virbr0<br>? (192.168.1.1) at d8:5d:4c:29:b1:f8 [ether] on wlan0<br></code></pre></td></tr></table></figure><p>Now just try on this with <code>ssh 192.168.122.50</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">ssh 192.168.122.50</span><br>rugal@192.168.122.50&#x27;s password: <br>Welcome to Ubuntu 12.04.4 LTS (GNU/Linux 3.2.0-58-virtual x86_64)<br><br> * Documentation:  https://help.ubuntu.com/<br> Last login: Wed Feb 12 15:51:55 2014 from 192.168.122.1<br> To run a command as administrator (user &quot;root&quot;), use &quot;sudo &lt;command&gt;&quot;.<br> See &quot;man sudo_root&quot; for details.<br><br> rugal@master:~$ <br></code></pre></td></tr></table></figure><p>Wow it works!</p><h2 id="close-VM"><a href="#close-VM" class="headerlink" title="close VM"></a>close VM</h2><p>It also very easy to do the reverse action to shutdown VM, just as command below:<br><code>&gt; virsh --connect qemu:///system shutdown master</code>  </p><h2 id="drop-VM"><a href="#drop-VM" class="headerlink" title="drop VM"></a>drop VM</h2><p>I wrote a <a href="http://githubpage.u.qiniudn.com/vmdelete">script</a> to delete a VM in one command, you will find it rather easy!</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>virtualization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postgres command</title>
    <link href="/2014/2014-02-08-postgres-command/"/>
    <url>/2014/2014-02-08-postgres-command/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Postgres is a super excellent RDBMS and object database which integreted with various number of functionalities exceed current average level of other database productions.<br>Rugal also become a member of developer in pg-hacker. Here I want to introduce some basic usage in Postgres command line prompt:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">S = show system objects<br>+ = additional detail<br>\d[S+]                  list tables, views, and sequences<br>\d[S+]  NAME            describe table, view, sequence, or index<br>\db[+]  [PATTERN]       list tablespaces<br>\ddp    [PATTERN]       list default privileges<br>\dD[S]  [PATTERN]       list domains<br>\dg[+]  [PATTERN]       list roles<br>\di[S+] [PATTERN]       list indexes<br>\dn[S+] [PATTERN]       list schemas<br>\do[S]  [PATTERN]       list operators<br>\dp     [PATTERN]       list table, view, and sequence access privileges<br>\ds[S+] [PATTERN]       list sequences<br>\dt[S+] [PATTERN]       list tables<br>\du[+]  [PATTERN]       list roles<br>\dv[S+] [PATTERN]       list views<br>\l[+]                   list all databases<br>\sf[+] FUNCNAME         show a function&#x27;s definition<br>\z      [PATTERN]       same as \dp<br></code></pre></td></tr></table></figure><p>When thinking about postgres’s data organization, I made a conclusion below:  </p><pre><code class="hljs">datafile -&gt; tablespace -&gt; database -&gt;schema -&gt; table</code></pre><p>But I did not get detailed knowledge like <code>segment/extent</code> in Oracle.<br>I think Postgres is awesome, high performance and well organized.  Good resource to study and backended as DBMS.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>send email using Java</title>
    <link href="/2014/2014-01-18-send-email-using-java/"/>
    <url>/2014/2014-01-18-send-email-using-java/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It is said that we could conveniently sending email in Java. with the requirement of my project, I started to use it for my solution.  </p><h2 id="package-requirement"><a href="#package-requirement" class="headerlink" title="package requirement"></a>package requirement</h2><p>sending email in Java needs two part of <code>jar</code>, First of it is the <code>JavaEE</code> declared API which do not includes implementation. Another part is provided by vendor, different web server may have disparate support.<br>For me, <code>com.sun.mail</code> has rather enough function.<br>In maven you need to add two <code>&lt;dependency&gt;</code>  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.sun.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.mail<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.mail<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.mail-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Please refer to <a href="https://java.net/projects/javamail/pages/Home">JavaMail API</a> for further exploration.  </p><h2 id="coding"><a href="#coding" class="headerlink" title="coding"></a>coding</h2><p>I want to implement the mailing function in a clear way, hence I separate it into three parts by <code>sender-info</code> <code>mail-info</code> and <code>mail-sending</code>.<br>First part includes information about the sender, the procedure of sending email regularly needs a logined session from sender, which is similar to the procedure of logining <code>mail.google.com</code> by your <code>gmail</code> account.<br>So you need to fill the account authentication in this class:  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> rugal.mail.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rugal Bernstein</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sender</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String emailAddress;<br><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-comment">//simply resolve smtp host name by default, could manually change later</span><br>    <span class="hljs-keyword">private</span> String smtpHostName;<br><br>    <span class="hljs-comment">//default smtp port is 25, but some mail system will have different port</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">smtpPort</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;25&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getEmailAddress</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> emailAddress;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUsername</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> emailAddress.split(<span class="hljs-string">&quot;@&quot;</span>)[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSmtpHostName</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> smtpHostName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSmtpHostName</span><span class="hljs-params">(String smtpHostName)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.smtpHostName = smtpHostName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSmtpPort</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> smtpPort;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSmtpPort</span><span class="hljs-params">(String smtpPort)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.smtpPort = smtpPort;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Sender</span><span class="hljs-params">(String emailAddress)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.emailAddress = emailAddress;<br>        resolveSmtpHost();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resolveSmtpHost</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.smtpHostName = <span class="hljs-string">&quot;smtp.&quot;</span> + <span class="hljs-built_in">this</span>.emailAddress.split(<span class="hljs-string">&quot;@&quot;</span>)[<span class="hljs-number">1</span>];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>I think there is a very strange design in <code>javax.mail</code>, it needs to inherit <code>Authenticator</code> class to provide identity autorization, as below.<br>I still could not figure out the reason, since this could be better designed.  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> rugal.mail.pojo;<br><br><span class="hljs-keyword">import</span> javax.mail.Authenticator;<br><span class="hljs-keyword">import</span> javax.mail.PasswordAuthentication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rugal Bernstein</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AccountAuthenticator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Authenticator</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AccountAuthenticator</span><span class="hljs-params">(String id, String password)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> PasswordAuthentication <span class="hljs-title function_">getPasswordAuthentication</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PasswordAuthentication</span>(id, password);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>And this is my mail information class that includes the recipient address and mail content.<br>It will be very conveinent!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> rugal.mail.pojo;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rugal Bernstein</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Mail</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String recipient;<br><br>    <span class="hljs-keyword">private</span> String subject;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRecipient</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> recipient;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getSubject</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> subject;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSubject</span><span class="hljs-params">(String subject)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.subject = subject;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getContent</span><span class="hljs-params">()</span><br>    &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContent</span><span class="hljs-params">(String content)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mail</span><span class="hljs-params">(String recipient)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.recipient = recipient;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Mail</span><span class="hljs-params">(String recipient, String subject, String content)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.recipient = recipient;<br>        <span class="hljs-built_in">this</span>.subject = subject;<br>        <span class="hljs-built_in">this</span>.content = content;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>And this is a service class that provide integrated function of sending mail.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> rugal.mail.service;<br><br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> javax.mail.Message;<br><span class="hljs-keyword">import</span> javax.mail.MessagingException;<br><span class="hljs-keyword">import</span> javax.mail.Session;<br><span class="hljs-keyword">import</span> javax.mail.Transport;<br><span class="hljs-keyword">import</span> javax.mail.internet.InternetAddress;<br><span class="hljs-keyword">import</span> javax.mail.internet.MimeMessage;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> rugal.mail.pojo.AccountAuthenticator;<br><span class="hljs-keyword">import</span> rugal.mail.pojo.Mail;<br><span class="hljs-keyword">import</span> rugal.mail.pojo.Sender;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This is a mail service provide mail sending function&lt;BR/&gt;</span><br><span class="hljs-comment"> * This class is designed as one to many mailing method&lt;BR/&gt;</span><br><span class="hljs-comment"> * you need to provide sender instance as constructor parameter&lt;BR/&gt;</span><br><span class="hljs-comment"> * then use &lt;code&gt;send&lt;/code&gt; method to send mail</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rugal Bernstein</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMailService</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">mail_smtp_auth</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mail.smtp.auth&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">mail_smtp_starttls_enable</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mail.smtp.starttls.enable&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">mail_smtp_host</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mail.smtp.host&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">mail_smtp_port</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mail.smtp.port&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> Session session;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sender sender;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SendMailService</span><span class="hljs-params">(Sender sender)</span><br>    &#123;<br>        <span class="hljs-built_in">this</span>.sender = sender;<br>        properties.put(mail_smtp_starttls_enable, <span class="hljs-string">&quot;true&quot;</span>);<br>        properties.put(mail_smtp_auth, <span class="hljs-string">&quot;true&quot;</span>);<br>        properties.put(mail_smtp_host, sender.getSmtpHostName());<br>        properties.put(mail_smtp_port, sender.getSmtpPort());<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">send</span><span class="hljs-params">(Mail mail)</span> <span class="hljs-keyword">throws</span> MessagingException<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-literal">null</span> == session) &#123;<br>            <span class="hljs-comment">//need this authenticator class to specify authentication</span><br>            session = Session.getDefaultInstance(properties, <br>                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccountAuthenticator</span>(sender.getUsername(), sender.getPassword()));<br>        &#125;<br>        <span class="hljs-type">MimeMessage</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MimeMessage</span>(session);<br>        message.setFrom(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InternetAddress</span>(sender.getEmailAddress()));<br>        <span class="hljs-type">InternetAddress</span> <span class="hljs-variable">toAddress</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InternetAddress</span>(mail.getRecipient());<br><br>        message.addRecipient(Message.RecipientType.TO, toAddress);<br><br>        message.setSubject(mail.getSubject());<br>        message.setText(mail.getContent());<br>        Transport.send(message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="test-functionality"><a href="#test-functionality" class="headerlink" title="test functionality"></a>test functionality</h2><p>I like to use <code>JUnit</code> to do the unit test.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> rugal.mail.service;<br><br><span class="hljs-keyword">import</span> javax.mail.MessagingException;<br><span class="hljs-keyword">import</span> org.junit.Before;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> rugal.mail.pojo.Mail;<br><span class="hljs-keyword">import</span> rugal.mail.pojo.Sender;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> Rugal Bernstein</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SendMailServiceTest</span><br>&#123;<br><br>    <span class="hljs-keyword">private</span> Mail mail;<br><br>    <span class="hljs-keyword">private</span> Sender sender;<br><br>    <span class="hljs-keyword">private</span> SendMailService instance;<br><br>    <span class="hljs-meta">@Before</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUp</span><span class="hljs-params">()</span><br>    &#123;<br>        mail = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mail</span>(<span class="hljs-string">&quot;example@web.com&quot;</span>);<br>        mail.setContent(<span class="hljs-string">&quot;This is a test mail&quot;</span>);<br>        mail.setSubject(<span class="hljs-string">&quot;This is a test subject&quot;</span>);<br>        sender = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sender</span>(<span class="hljs-string">&quot;example@web.com&quot;</span>);<br>        sender.setPassword(<span class="hljs-string">&quot;123456&quot;</span>);<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SendMailService</span>(sender);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Test of send method, of class MailSender.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> javax.mail.MessagingException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSend</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> MessagingException<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;begin&quot;</span>);<br>        instance.send(mail);<br>        System.out.println(<span class="hljs-string">&quot;end&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Seems everything is done!<br>JavaMail API is pulchritude indeed!  </p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>use xargs to replace bash loop</title>
    <link href="/2014/2014-01-12-use-xargs-to-replace-bash-loop/"/>
    <url>/2014/2014-01-12-use-xargs-to-replace-bash-loop/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I have no solution toward multi-options dealing command, When I come across this, I will have a bash script to achieve it.<br>But now, I find a ancient but marvel tool in linux called <code>xargs</code>.  </p><p>By using <code>xargs</code>, I could skip the loop in bash for many situations.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">for file in `ls`<br>do<br>    #some processes or modifications to the $file.<br>    #here I just use echo as an example!<br>    echo $file&quot; rugal&quot;<br>done<br></code></pre></td></tr></table></figure><p>The bash script shown above is what I used to do when I need to batchly dealing with folder files. But now, I could do it with only one line command:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ls | xargs -I% echo &quot;% rugal&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">it use % to represent string from previous <span class="hljs-built_in">command</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">execute the <span class="hljs-built_in">command</span> after it one by one!</span><br></code></pre></td></tr></table></figure><p>Wow, how briliant is it, which save a lot of time and energy on writing and meditating bash structure.<br>But actually there can be more usefulness by ultilizing <code>xargs</code>, for instance in <code>find</code> command, you can implement complex command in just one line, instead of using bash looping.  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">find . -name &quot;*.back&quot; |xargs rm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">to remove files that suffixed as .back</span><br><br>find . -name &quot;*.back&quot; |xargs -I% mv % old_folder<br><span class="hljs-meta prompt_"># </span><span class="language-bash">to move back files into old folder <span class="hljs-keyword">for</span> cleaning</span><br></code></pre></td></tr></table></figure><p>More usage about the <code>xargs</code>, please refer to <code>man xargs</code>.  </p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java access modifiers clarification</title>
    <link href="/2014/2014-01-11-java-access-modifiers-clarification/"/>
    <url>/2014/2014-01-11-java-access-modifiers-clarification/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script><script type="text/x-mathjax-config">MathJax.Hub.Config({  tex2jax: {    inlineMath: [['$','$'], ['\\(','\\)']],    displayMath: [['$$','$$'], ['\[','\]']],    processEscapes: true,    processEnvironments: true,    skipTags: ['script', 'noscript', 'style', 'textarea', 'pre'],    TeX: { equationNumbers: { autoNumber: "AMS" },         extensions: ["AMSmath.js", "AMSsymbols.js"] }  }});</script><table><thead><tr><th>Modifier</th><th></th><th>Class</th><th></th><th>Package</th><th></th><th>Subclass</th><th></th><th>World</th></tr></thead><tbody><tr><td>public</td><td></td><td>$\checkmark$</td><td></td><td>$\checkmark$</td><td></td><td>$\checkmark$</td><td></td><td>$\checkmark$</td></tr><tr><td>protected</td><td></td><td>$\checkmark$</td><td></td><td>$\checkmark$</td><td></td><td>$\checkmark$</td><td></td><td>$\times$</td></tr><tr><td>No modifier</td><td></td><td>$\checkmark$</td><td></td><td>$\checkmark$</td><td></td><td>$\times$</td><td></td><td>$\times$</td></tr><tr><td>private</td><td></td><td>$\checkmark$</td><td></td><td>$\times$</td><td></td><td>$\times$</td><td></td><td>$\times$</td></tr></tbody></table><p>It is probably worth pointing out that in the case of no modifier, whether or not the subclass can see it’s superclass’s methods&#x2F;fields depends on the location of the subclass. If the subclass is in another package, then the answer is it <code>can&#39;t</code>.<br>If the subclass is in the same package then it CAN access the superclass methods&#x2F;fields.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>miracle tool: javap</title>
    <link href="/2014/2014-01-11-miracle-tool-javap/"/>
    <url>/2014/2014-01-11-miracle-tool-javap/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It has been disturbing  me for a very long time that how Java byte-code are executed and the organization of heap&#x2F;stack in JVM:<br>Now I have a tutorial over steps towards <a href="http://blog.jamesdbloom.com/JVMInternals.html">JVM Internals</a><br>Today I will introduce the code dissamble tool: <code>javap</code>, which could be great helpfull when dive into JVM  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">javap  [options]  [classes]<br>options:<br>-v          #to print additional information<br>-l          #print line number and local variable tables<br>-c          #dissamble method code as opcode<br>-s          #print internal type signatures<br>-private -p #print all level of fields and methods<br>-package    #print package/protected/public classes and methods<br>-protected  #print protected/public classes and members<br>-public     #print public classes and members only<br>-sysinfo    #print system information<br>-constants  #print static final constants<br></code></pre></td></tr></table></figure><p>In default, <code>-public</code> will be set.<br>So, if you want to print all information of a <code>.class</code> file, you need to execute:<br><code>javap -v -s -p name.class</code></p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>android develop on 64 bit linux</title>
    <link href="/2014/2014-01-10-android-develop-on-64-bit-linux/"/>
    <url>/2014/2014-01-10-android-develop-on-64-bit-linux/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Sometimes I will feel a little bit of sorrow, that I do not know where to forward.<br>Many people call it <code>at sea</code>.  </p><p>Yesterday night I feel little bit of <code>at sea</code>, thus I downloaded <code>ADT</code> for my linux.<br>and I encountered some problems about the shared library for C++, now I’d like to share the solution to you all:  </p><p>Even though I already installed <code>zlib-dev</code> and <code>libstdc++-4.8-dev</code>, eclipse keep tells me my linux can not find <code>libz</code> and <code>libstdc++</code>.<br>What a stupid!.  </p><p>the <code>ldd</code> tells me it want to use the lib from below path:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[rugal@rugal-TM8473 platform-tools]&gt; ldd /opt/adt-bundle-linux/sdk/platform-tools/adb <br>linux-gate.so.1 =&gt;  (0xf7767000)<br>librt.so.1 =&gt; /lib/i386-linux-gnu/librt.so.1 (0xf7740000)<br>libdl.so.2 =&gt; /lib/i386-linux-gnu/libdl.so.2 (0xf773b000)<br>libpthread.so.0 =&gt; /lib/i386-linux-gnu/libpthread.so.0 (0xf771f000)<br>libstdc++.so.6 =&gt; /usr/lib/i386-linux-gnu/libstdc++.so.6 (0xf7636000)<br>libm.so.6 =&gt; /lib/i386-linux-gnu/libm.so.6 (0xf75f3000)<br>libgcc_s.so.1 =&gt; /lib/i386-linux-gnu/libgcc_s.so.1 (0xf75d6000)<br>libc.so.6 =&gt; /lib/i386-linux-gnu/libc.so.6 (0xf7422000)<br></code></pre></td></tr></table></figure><p>But my lib was in:  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[rugal@rugal-TM8473 platform-tools]&gt; dpkg -S  libstdc++.so.6<br>libstdc++6:amd64: /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.18<br>libstdc++6:amd64: /usr/lib/x86_64-linux-gnu/libstdc++.so.6<br></code></pre></td></tr></table></figure><p>Here I got an idea that, seems ADT can only make use of 32-bit of lib…<br>what a stupid…  </p><p>Hence I installed 32-bit library for <code>libstdc++</code> and <code>libz</code>  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install lib32z1-dev<br>sudo apt-get install libstdc++6:i386 libgcc1:i386 zlib1g:i386 libncurses5:i386<br></code></pre></td></tr></table></figure><p>in some release, you need to use  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install ia32-libs<br></code></pre></td></tr></table></figure><p>All things are done! But today, I get back of myself, I still want to deepen my future into <code>database</code>.<br>So I deleted the <code>ADT</code>…that is all I have done yesterday.</p>]]></content>
    
    
    <categories>
      
      <category>development</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>java</tag>
      
      <tag>android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>compilation error with postgres 9.3 on ubuntu</title>
    <link href="/2014/2014-01-10-compilation-error-with-postgres-93-on-ubuntu/"/>
    <url>/2014/2014-01-10-compilation-error-with-postgres-93-on-ubuntu/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>I start on studying database development with <code>postgres</code> recently, and I’m sure I need to start from compilation of the source code, but a compilation problem comes to me.<br>The one I coped with is shared below, and I would like to show my linux environment first:  </p><p>Compilation Env:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Ubuntu</span> <span class="hljs-number">13</span>.<span class="hljs-number">10</span>  <br><span class="hljs-attribute">Linux</span> rugal-TM8473 <span class="hljs-number">3</span>.<span class="hljs-number">11</span>.<span class="hljs-number">0</span>-<span class="hljs-number">15</span>-generic #<span class="hljs-number">23</span>-Ubuntu SMP Mon Dec <span class="hljs-number">9</span> <span class="hljs-number">18</span>:<span class="hljs-number">17</span>:<span class="hljs-number">04</span> UTC <span class="hljs-number">2013</span> x86_64 x86_64 x86_64 GNU/Linux  <br><span class="hljs-attribute">gcc</span> version <span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span> (Ubuntu/Linaro <span class="hljs-number">4</span>.<span class="hljs-number">8</span>.<span class="hljs-number">1</span>-<span class="hljs-number">10</span>ubuntu9)  <br><span class="hljs-attribute">bison</span> (GNU Bison) <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">12</span>-<span class="hljs-number">4996</span>  <br></code></pre></td></tr></table></figure><p>Error Stack:</p><figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs vhdl">make -C preproc <span class="hljs-keyword">all</span><br>make[<span class="hljs-number">4</span>]: Entering directory `/home/rugal/workspace/postgresql/src/interfaces/ecpg/preproc&#x27;<br>gcc -O2 -Wall -Wmissing-prototypes -Wpointer-arith -Wdeclaration-<span class="hljs-keyword">after</span>-statement -Wendif-labels -Wmissing-format-<span class="hljs-keyword">attribute</span> -Wformat-security -fno-strict-aliasing -fwrapv -fexcess-precision=standard -pthread  -D_REENTRANT -D_THREAD_SAFE -D_POSIX_PTHREAD_SEMANTICS -DECPG_COMPILE -I../include -I../../../../src/interfaces/ecpg/include -I. -I. -DMAJOR_VERSION=<span class="hljs-number">4</span> -DMINOR_VERSION=<span class="hljs-number">10</span> -DPATCHLEVEL=<span class="hljs-number">0</span> -I../../../../src/include -D_GNU_SOURCE   -c -o preproc.o preproc.c -MMD -MP -MF .deps/preproc.Po<br><span class="hljs-keyword">In</span> <span class="hljs-keyword">file</span> included from preproc.y:<span class="hljs-number">15004</span>:<span class="hljs-number">0</span>:<br>pgc.l: <span class="hljs-keyword">In</span> <span class="hljs-keyword">function</span> ‘base_yylex’:<br>pgc.l:<span class="hljs-number">403</span>:<span class="hljs-number">24</span>: <span class="hljs-literal">error</span>: ‘ET_FATAL’ undeclared (first <span class="hljs-keyword">use</span> <span class="hljs-keyword">in</span> this <span class="hljs-keyword">function</span>)<br>       <span class="hljs-keyword">BEGIN</span>(state_before);<br>                        ^<br>pgc.l:<span class="hljs-number">403</span>:<span class="hljs-number">24</span>: <span class="hljs-literal">note</span>: each undeclared identifier <span class="hljs-keyword">is</span> reported only once <span class="hljs-keyword">for</span> each <span class="hljs-keyword">function</span> it appears <span class="hljs-keyword">in</span><br><span class="hljs-keyword">In</span> <span class="hljs-keyword">file</span> included from preproc.y:<span class="hljs-number">15004</span>:<span class="hljs-number">0</span>:<br>pgc.l: <span class="hljs-keyword">In</span> <span class="hljs-keyword">function</span> ‘parse_include’:<br>pgc.l:<span class="hljs-number">1366</span>:<span class="hljs-number">28</span>: <span class="hljs-literal">error</span>: ‘ET_FATAL’ undeclared (first <span class="hljs-keyword">use</span> <span class="hljs-keyword">in</span> this <span class="hljs-keyword">function</span>)<br>    <span class="hljs-keyword">if</span> (!yyin)<br>                            ^<br>make[<span class="hljs-number">4</span>]: *** [preproc.o] <span class="hljs-literal">Error</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>This problem keep bothering even after I used<br><code>make distclean</code><br><code>./configure --enable-depend &amp;&amp; make</code>  </p><p>At first, I found some solution mentioned about the <code>bison</code> parser generator,  so I regenerator some syntax file.<br><code>bison -d -o preproc.c preproc.y</code><br>But this continue bothering me.  I feel helpless…  </p><p>Night after that,  I find a other method to cope with it:  </p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-comment">--- a/src/interfaces/ecpg/preproc/type.h</span><br><span class="hljs-comment">+++ b/src/interfaces/ecpg/preproc/type.h</span><br><span class="hljs-meta">@@ -186,7 +186,7 @@</span> struct assignment<br> <br> enum errortype<br><br><br> &#123;<br><span class="hljs-deletion">-   ET_WARNING, ET_ERROR, ET_FATAL</span><br><br><br><span class="hljs-addition">+   ET_WARNING, ET_ERROR</span><br> &#125;;<br></code></pre></td></tr></table></figure><p>After adding this enum,  <code>ET_FATAL</code>, compilation become successful!<br>But there still has a strange warning:  </p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs matlab">preproc.y: In <span class="hljs-function"><span class="hljs-keyword">function</span> ‘<span class="hljs-title">vmmerror</span>’:</span><br>preproc.y:<span class="hljs-number">76</span>:<span class="hljs-number">2</span>: warning: <span class="hljs-keyword">enumeration</span> value ‘ET_FATAL’ not handled in <span class="hljs-keyword">switch</span> [-Wswitch]<br>  <span class="hljs-keyword">switch</span>(<span class="hljs-built_in">type</span>)<br>  ^<br></code></pre></td></tr></table></figure><p>Which indicating the <code>enum</code> I just added is already retired.  What can I do next?  </p><p>So I sent my first mail to <code>psql-hackers</code> mail group, and I got replied:  </p><p><code>You have to rebuild the auto-generated pgc.c, preproc.c and preproc.y or simplyremove them to force a rebuild.</code>  </p><p>This directed me.  I deleted <code>pgc.c</code> <code>preproc.c</code> <code>preproc.h</code> <code>preproc.y</code>, which I used to treat as important, but turn out to be generated files.<br>And this time, I could <code>make</code> successfully!  </p><p>I have learned it is the reason that the first time I <code>make</code>, those <code>.y</code> files are generated automatically, but they would not deleted by <code>make distclean</code>, which result in the above error.<br>Also I got to know, <code>make maintainer-clean</code> can clean all unnecessary file, hackers will use this to clean all no-needed files when they coding.<br>I have learnt more from this, <code>compilation principle</code> is so important that it was a great pity for my school do not have this class!  </p><h2 id="Let’s-start-developing-PostgreSQL"><a href="#Let’s-start-developing-PostgreSQL" class="headerlink" title="Let’s start developing PostgreSQL"></a>Let’s start developing <a href="http://wiki.postgresql.org/wiki/Todo">PostgreSQL</a></h2>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>c</tag>
      
      <tag>postgresql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>reset mysql root password</title>
    <link href="/2013/2013-08-05-reset-mysql-root-password/"/>
    <url>/2013/2013-08-05-reset-mysql-root-password/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><a href="https://devanswers.co/how-to-reset-mysql-root-password-ubuntu/">reference</a></p><p>You may forget root password of your mysql database, follow instruction below to reset it.  </p><ul><li>Add a entry in <code>my.cnf</code>:</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">[mysqld]<br><span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><ul><li>then restart mysql server, now you can login as root without prompting password.</li><li>execute as below:</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">use mysql;<br><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> <span class="hljs-keyword">password</span>=<span class="hljs-keyword">password</span>(&quot;123456&quot;) <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span>=<span class="hljs-string">&#x27;root&#x27;</span>;<br>flush <span class="hljs-keyword">privileges</span>;<br></code></pre></td></tr></table></figure><ul><li>Do not forget to delete the entry you have added in step <code>1</code> after this command:</li></ul>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>KTV songs list</title>
    <link href="/2013/2013-08-03-ktv-songs-list/"/>
    <url>/2013/2013-08-03-ktv-songs-list/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><ol><li>hostage</li><li>realization</li><li>give me your love</li><li>in the spring</li><li>pity</li><li>fly me to the moon</li><li>say u love me</li><li>you are the girl I love</li></ol>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>number calculation in bash</title>
    <link href="/2013/2013-08-03-number-calculation-in-bash/"/>
    <url>/2013/2013-08-03-number-calculation-in-bash/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>computation efficiency rank:<br><code>(()) == let &gt; expr &gt; bc </code></p><p>1.<code>(())</code> and <code>let</code> is bash buildin command, which can execute efficiently<br>2.<code>expr</code> and <code>bc</code> is system command, drain memory and low efficiency.<br>3.<code>(())</code> <code>let</code> and <code>expr</code> can only do integer computation.<br>4.<code>bc</code> can do float computation.  </p><h3 id=""><a href="#" class="headerlink" title="(())"></a>(())</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">value=$((3*(5+2)))<br>((value++))<br></code></pre></td></tr></table></figure><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">let &quot;value=3*(5+2)&quot;<br>let value++<br></code></pre></td></tr></table></figure><h3 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">value=`expr 3 \* \( 5 + 2\)`<br>value=`expr $value+1`<br></code></pre></td></tr></table></figure><h3 id="bc"><a href="#bc" class="headerlink" title="bc"></a>bc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">value=`echo &quot;3*(5+2)&quot; | bc`<br>value=`echo &quot;$value+1&quot; | bc `<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>encrypy and hide windows folder</title>
    <link href="/2013/2013-08-01-encrypy-and-hide-windows-folder/"/>
    <url>/2013/2013-08-01-encrypy-and-hide-windows-folder/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p><code>foldername</code> is the name before encrypted.<br><code>targetname</code> name theone after that.<br><code>password</code> variable is the key to unlock the folder.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell">set foldername=god<br>set targetname=&quot;rugal&quot;<br>set password=&quot;123456&quot;<br><br>cls<br>@ECHO OFF<br>title Folder %foldername%<br>if EXIST %targetname% goto UNLOCK<br>if NOT EXIST %foldername% goto MDLOCKER<br><br>:CONFIRM<br>echo Are you sure you want to lock the folder(Y/N)<br>set/p &quot;cho=&gt;&quot;<br>if %cho%==Y goto LOCK<br>if %cho%==y goto LOCK<br>if %cho%==n goto END<br>if %cho%==N goto END<br>echo Invalid choice.<br>goto CONFIRM<br><br>:LOCK<br>ren %foldername% %targetname%<br>attrib +h +s %targetname%<br>echo Folder locked<br>goto End<br><br>:UNLOCK<br>echo Enter password to unlock folder<br>set/p &quot;pass=&gt;&quot;<br>if NOT %pass%==%password% goto FAIL<br>attrib -h -s %targetname%<br>ren %targetname% %foldername%<br>echo Folder Unlocked successfully<br>goto End<br><br>:FAIL<br>echo Invalid password<br>goto end<br><br>:MDLOCKER<br>md %foldername%<br>echo %foldername% created successfully<br>goto End<br>:End<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>batch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>disable mysql automatic startup on Ubuntu 13.04</title>
    <link href="/2013/2013-07-29-disable-mysql-automatic-startup-on-ubuntu-1304/"/>
    <url>/2013/2013-07-29-disable-mysql-automatic-startup-on-ubuntu-1304/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>Ubuntu has abandoned SysV init script approach to booting the server since 10.04.<a href="http://www.linuxplanet.com/linuxplanet/tutorials/7033/1">This link explains</a><br>So to prevent mysql from starting on boot, you have to switch to a new way as belew:</p><ol><li>go to the <code>/etc/init</code> directory</li><li>open the <code>mysql.conf</code> file</li><li>comment out the <code>start on</code> line near the top of the file, this might be spread across two lines, so it is better to comment out both.</li></ol>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mysql</tag>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I love you</title>
    <link href="/2013/2013-07-29-i-love-you/"/>
    <url>/2013/2013-07-29-i-love-you/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>It it a really funny and cosy story<br>On that day, 1st June<br>I met you<br>acquainted you<br>Love you!<br>Thanks for coming long way to see me.<br>I know it it not easy for a little girl like you to travel this long way to see me!<br>I feel fulfilled!<br>It is my honor to love you!<br>So I wish I could have the chance to take care the rest of your life!  </p><h1 id="Forever"><a href="#Forever" class="headerlink" title="Forever"></a>Forever</h1>]]></content>
    
    
    <categories>
      
      <category>myself</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux shell redirect</title>
    <link href="/2013/2013-07-29-linux-shell-redirect/"/>
    <url>/2013/2013-07-29-linux-shell-redirect/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>In some situation, that we need to hide the output information of a<br>application, such goagent or some useful manual scripts.Thus redirect into a<br>blackhole is the best choice you can make.<br>Here I will introduce the representation of streams in linux bash programming:</p><ul><li>0 :STDIN</li><li>1 :STDOUT</li><li>2 :STDERR</li></ul><p>upon which we could use that number to redirect data or information into<br>another stream.<br>Here is our example:  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-variable">$CommandThatProduceOutputs</span> 1&gt;/dev/null 2&gt;&amp;1<br></code></pre></td></tr></table></figure><p>As we could see that,through <code>&gt;</code>, we could redirect the number represented<br>stream into another place.<br>If you want to redirect one stream into another stream, using <code>&amp;</code> to represent.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>loop syntax in Bash</title>
    <link href="/2013/2013-07-03-loop-syntax-in-bash/"/>
    <url>/2013/2013-07-03-loop-syntax-in-bash/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>if you wanna loop through from number to another number, bash loop may not be the best choice for you, cause it has lot of differences from the original <code>for</code> loop as you might think of.  </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> <span class="hljs-variable">$from</span> <span class="hljs-variable">$to</span> )<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>where <code>seq</code> is a special function that generate a array, similar with <code>python</code>.</p>]]></content>
    
    
    <categories>
      
      <category>operation</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bash</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
